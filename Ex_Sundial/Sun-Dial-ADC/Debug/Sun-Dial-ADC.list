
Sun-Dial-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005be0  08005be0  00015be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c60  08005c60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c60  08005c60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c60  08005c60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000042c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f66e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206d  00000000  00000000  0002f70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4b2  00000000  00000000  00033058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001138f  00000000  00000000  0005150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b79af  00000000  00000000  00062899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a248  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa0  00000000  00000000  0011a298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bc4 	.word	0x08005bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005bc4 	.word	0x08005bc4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <enable_clocks>:
/* USER CODE BEGIN 0 */

ADC_ChannelConfTypeDef sConfig = {0};


void enable_clocks() {
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <enable_clocks+0x1c>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <enable_clocks+0x1c>)
 8000aea:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000aee:	6153      	str	r3, [r2, #20]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <initialise_board>:

void initialise_board() {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <initialise_board+0x20>)
 8000b08:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000b10:	801a      	strh	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	48001002 	.word	0x48001002

08000b24 <ADC_select_CH2>:

void ADC_select_CH2 (void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <ADC_select_CH2+0x44>)
 8000b50:	f001 fa62 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <ADC_select_CH2+0x3a>
	{
	  Error_Handler();
 8000b5a:	f000 fb7f 	bl	800125c <Error_Handler>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000480 	.word	0x20000480
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <ADC_select_CH3>:

void ADC_select_CH3 (void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <ADC_select_CH3+0x40>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <ADC_select_CH3+0x40>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <ADC_select_CH3+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <ADC_select_CH3+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <ADC_select_CH3+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <ADC_select_CH3+0x40>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	4905      	ldr	r1, [pc, #20]	; (8000bac <ADC_select_CH3+0x40>)
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <ADC_select_CH3+0x44>)
 8000b98:	f001 fa3e 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <ADC_select_CH3+0x3a>
	{
	  Error_Handler();
 8000ba2:	f000 fb5b 	bl	800125c <Error_Handler>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000480 	.word	0x20000480
 8000bb0:	2000008c 	.word	0x2000008c

08000bb4 <ADC_select_CH4>:

void ADC_select_CH4 (void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_4;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <ADC_select_CH4+0x44>)
 8000be0:	f001 fa1a 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <ADC_select_CH4+0x3a>
	{
	  Error_Handler();
 8000bea:	f000 fb37 	bl	800125c <Error_Handler>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000480 	.word	0x20000480
 8000bf8:	2000008c 	.word	0x2000008c

08000bfc <ADC_select_CH5>:

void ADC_select_CH5 (void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c02:	2205      	movs	r2, #5
 8000c04:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	4905      	ldr	r1, [pc, #20]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <ADC_select_CH5+0x44>)
 8000c28:	f001 f9f6 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <ADC_select_CH5+0x3a>
	{
	  Error_Handler();
 8000c32:	f000 fb13 	bl	800125c <Error_Handler>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000480 	.word	0x20000480
 8000c40:	2000008c 	.word	0x2000008c

08000c44 <ADC_select_CH6>:

void ADC_select_CH6 (void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c4a:	2206      	movs	r2, #6
 8000c4c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	4905      	ldr	r1, [pc, #20]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <ADC_select_CH6+0x44>)
 8000c70:	f001 f9d2 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <ADC_select_CH6+0x3a>
	{
	  Error_Handler();
 8000c7a:	f000 faef 	bl	800125c <Error_Handler>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000480 	.word	0x20000480
 8000c88:	2000008c 	.word	0x2000008c

08000c8c <ADC_select_CH7>:

void ADC_select_CH7 (void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_7;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c92:	2207      	movs	r2, #7
 8000c94:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <ADC_select_CH7+0x40>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <ADC_select_CH7+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <ADC_select_CH7+0x40>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb4:	4905      	ldr	r1, [pc, #20]	; (8000ccc <ADC_select_CH7+0x40>)
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <ADC_select_CH7+0x44>)
 8000cb8:	f001 f9ae 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <ADC_select_CH7+0x3a>
	{
	  Error_Handler();
 8000cc2:	f000 facb 	bl	800125c <Error_Handler>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000480 	.word	0x20000480
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <ADC_select_CH8>:

void ADC_select_CH8 (void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_8;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <ADC_select_CH8+0x40>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <ADC_select_CH8+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4905      	ldr	r1, [pc, #20]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <ADC_select_CH8+0x44>)
 8000d00:	f001 f98a 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <ADC_select_CH8+0x3a>
	{
	  Error_Handler();
 8000d0a:	f000 faa7 	bl	800125c <Error_Handler>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000480 	.word	0x20000480
 8000d18:	2000008c 	.word	0x2000008c

08000d1c <ADC_select_CH9>:

void ADC_select_CH9 (void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_9;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d22:	2209      	movs	r2, #9
 8000d24:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	4905      	ldr	r1, [pc, #20]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <ADC_select_CH9+0x44>)
 8000d48:	f001 f966 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <ADC_select_CH9+0x3a>
	{
	  Error_Handler();
 8000d52:	f000 fa83 	bl	800125c <Error_Handler>
	}
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000480 	.word	0x20000480
 8000d60:	2000008c 	.word	0x2000008c
 8000d64:	00000000 	.word	0x00000000

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	enable_clocks();
 8000d6e:	f7ff feb7 	bl	8000ae0 <enable_clocks>
	initialise_board();
 8000d72:	f7ff fec5 	bl	8000b00 <initialise_board>

	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d76:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <main+0x140>)
 8000d78:	66fb      	str	r3, [r7, #108]	; 0x6c
	*led_register = 0b10101010;
 8000d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d7c:	22aa      	movs	r2, #170	; 0xaa
 8000d7e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fc36 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f898 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f9ea 	bl	8001160 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8c:	f000 f948 	bl	8001020 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d90:	f000 f986 	bl	80010a0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d94:	f000 f9c2 	bl	800111c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d98:	f000 f8f2 	bl	8000f80 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // array of functions to select LDR channels
  void (*LDRChannels[8])() = {
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <main+0x144>)
 8000d9e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  &ADC_select_CH8,
		  &ADC_select_CH9
  };

  // Arrays to
  int LDRScales[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 ffe1 	bl	8004d80 <memset>
  int LDRs[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 ffdb 	bl	8004d80 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // calibrate ADC1
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4838      	ldr	r0, [pc, #224]	; (8000eb0 <main+0x148>)
 8000dce:	f001 f8b0 	bl	8001f32 <HAL_ADCEx_Calibration_Start>

  while (1)
  {
	for (int i = 0; i < 8; i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8000dd6:	e036      	b.n	8000e46 <main+0xde>
		LDRChannels[i]();
 8000dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	3378      	adds	r3, #120	; 0x78
 8000dde:	443b      	add	r3, r7
 8000de0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000de4:	4798      	blx	r3
		HAL_ADC_Start(&hadc1);
 8000de6:	4832      	ldr	r0, [pc, #200]	; (8000eb0 <main+0x148>)
 8000de8:	f000 fe48 	bl	8001a7c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000df0:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <main+0x148>)
 8000df2:	f000 ff8f 	bl	8001d14 <HAL_ADC_PollForConversion>
		int ADC_val = HAL_ADC_GetValue(&hadc1);
 8000df6:	482e      	ldr	r0, [pc, #184]	; (8000eb0 <main+0x148>)
 8000df8:	f001 f88e 	bl	8001f18 <HAL_ADC_GetValue>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	66bb      	str	r3, [r7, #104]	; 0x68
		HAL_ADC_Stop(&hadc1);
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <main+0x148>)
 8000e02:	f000 ff51 	bl	8001ca8 <HAL_ADC_Stop>
		// read the value from ADC1->DR, full range is 12 bits (0xFFF maximum)
		uint8_t scale = ADC_val / (0xfff / 8);  // divide the scale into 8 even partitions (for 8 leds)
 8000e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e08:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <main+0x14c>)
 8000e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0e:	441a      	add	r2, r3
 8000e10:	1212      	asrs	r2, r2, #8
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		// Mark LED to be read
		if (scale > 2) {
 8000e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d907      	bls.n	8000e32 <main+0xca>
			LDRs[i] = 1;
 8000e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	3378      	adds	r3, #120	; 0x78
 8000e28:	443b      	add	r3, r7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f843 2c74 	str.w	r2, [r3, #-116]
 8000e30:	e006      	b.n	8000e40 <main+0xd8>
		} else {
			LDRs[i] = 0;
 8000e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	3378      	adds	r3, #120	; 0x78
 8000e38:	443b      	add	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f843 2c74 	str.w	r2, [r3, #-116]
	for (int i = 0; i < 8; i++){
 8000e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e42:	3301      	adds	r3, #1
 8000e44:	677b      	str	r3, [r7, #116]	; 0x74
 8000e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	ddc5      	ble.n	8000dd8 <main+0x70>
		}
	}

	for (int i = 0; i < 8; i++){
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8000e50:	e01f      	b.n	8000e92 <main+0x12a>
		if (LDRs[i] == 1){
 8000e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	3378      	adds	r3, #120	; 0x78
 8000e58:	443b      	add	r3, r7
 8000e5a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d114      	bne.n	8000e8c <main+0x124>
			*led_register = pow(2, i);
 8000e62:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000e64:	f7ff fb02 	bl	800046c <__aeabi_i2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	ec43 2b11 	vmov	d1, r2, r3
 8000e70:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000ea0 <main+0x138>
 8000e74:	f003 ff8c 	bl	8004d90 <pow>
 8000e78:	ec53 2b10 	vmov	r2, r3, d0
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe0e 	bl	8000aa0 <__aeabi_d2uiz>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8000e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e8e:	3301      	adds	r3, #1
 8000e90:	673b      	str	r3, [r7, #112]	; 0x70
 8000e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	dddc      	ble.n	8000e52 <main+0xea>
	for (int i = 0; i < 8; i++){
 8000e98:	e79b      	b.n	8000dd2 <main+0x6a>
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40000000 	.word	0x40000000
 8000ea8:	48001015 	.word	0x48001015
 8000eac:	08005be0 	.word	0x08005be0
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	80402011 	.word	0x80402011

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09e      	sub	sp, #120	; 0x78
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 ff5a 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	223c      	movs	r2, #60	; 0x3c
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 ff4c 	bl	8004d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2310      	movs	r3, #16
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f0c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fa4e 	bl	80033b4 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f1e:	f000 f99d 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fa76 	bl	8004430 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f4a:	f000 f987 	bl	800125c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <SystemClock_Config+0xc4>)
 8000f50:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fc49 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f70:	f000 f974 	bl	800125c <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3778      	adds	r7, #120	; 0x78
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	000200a0 	.word	0x000200a0

08000f80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_ADC1_Init+0x9c>)
 8000f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_ADC1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_ADC1_Init+0x9c>)
 8000fec:	f000 fb66 	bl	80016bc <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000ff6:	f000 f931 	bl	800125c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_ADC1_Init+0x9c>)
 8001004:	f001 faf4 	bl	80025f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800100e:	f000 f925 	bl	800125c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000008c 	.word	0x2000008c

08001020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_I2C1_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_I2C1_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <MX_I2C1_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_I2C1_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_I2C1_Init+0x74>)
 800105c:	f001 ffb2 	bl	8002fc4 <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 f8f9 	bl	800125c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_I2C1_Init+0x74>)
 800106e:	f002 f838 	bl	80030e2 <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 f8f0 	bl	800125c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2C1_Init+0x74>)
 8001080:	f002 f87a 	bl	8003178 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f8e7 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000dc 	.word	0x200000dc
 8001098:	40005400 	.word	0x40005400
 800109c:	2000090e 	.word	0x2000090e

080010a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_SPI1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_SPI1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_SPI1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_SPI1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI1_Init+0x74>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ee:	2207      	movs	r2, #7
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_SPI1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x74>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_SPI1_Init+0x74>)
 8001100:	f003 fd2c 	bl	8004b5c <HAL_SPI_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8a7 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000130 	.word	0x20000130
 8001118:	40013000 	.word	0x40013000

0800111c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <MX_USB_PCD_Init+0x40>)
 8001124:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 8001128:	2208      	movs	r2, #8
 800112a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 800112e:	2202      	movs	r2, #2
 8001130:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 8001134:	2202      	movs	r2, #2
 8001136:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_USB_PCD_Init+0x3c>)
 8001146:	f002 f863 	bl	8003210 <HAL_PCD_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001150:	f000 f884 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000194 	.word	0x20000194
 800115c:	40005c00 	.word	0x40005c00

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <MX_GPIO_Init+0xf4>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <MX_GPIO_Init+0xf4>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <MX_GPIO_Init+0xf4>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <MX_GPIO_Init+0xf4>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a30      	ldr	r2, [pc, #192]	; (8001254 <MX_GPIO_Init+0xf4>)
 8001194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_GPIO_Init+0xf4>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a2a      	ldr	r2, [pc, #168]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_GPIO_Init+0xf4>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011ee:	2200      	movs	r2, #0
 80011f0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80011f4:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_GPIO_Init+0xf8>)
 80011f6:	f001 fecd 	bl	8002f94 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80011fa:	2337      	movs	r3, #55	; 0x37
 80011fc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <MX_GPIO_Init+0xf8>)
 8001210:	f001 fd46 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001214:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001218:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <MX_GPIO_Init+0xf8>)
 800122e:	f001 fd37 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001248:	f001 fd2a 	bl	8002ca0 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	48001000 	.word	0x48001000

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_MspInit+0x44>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_MspInit+0x44>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_MspInit+0x44>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x44>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x44>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x44>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129e:	2007      	movs	r0, #7
 80012a0:	f001 fcca 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d0:	d154      	bne.n	800137c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a2b      	ldr	r2, [pc, #172]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001332:	230f      	movs	r3, #15
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <HAL_ADC_MspInit+0xd8>)
 8001346:	f001 fcab 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800134a:	230e      	movs	r3, #14
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 fc9e 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001364:	2310      	movs	r3, #16
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_ADC_MspInit+0xdc>)
 8001378:	f001 fc92 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	48000800 	.word	0x48000800
 800138c:	48001400 	.word	0x48001400

08001390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_I2C_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d127      	bne.n	8001402 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_I2C_MspInit+0x84>)
 80013e6:	f001 fc5b 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005400 	.word	0x40005400
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d128      	bne.n	800148c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x80>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800146a:	23e0      	movs	r3, #224	; 0xe0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f001 fc0a 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013000 	.word	0x40013000
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_PCD_MspInit+0x80>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d129      	bne.n	8001512 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_PCD_MspInit+0x84>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_PCD_MspInit+0x84>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_PCD_MspInit+0x84>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80014d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80014e8:	230e      	movs	r3, #14
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f001 fbd3 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_PCD_MspInit+0x84>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_PCD_MspInit+0x84>)
 8001500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_PCD_MspInit+0x84>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005c00 	.word	0x40005c00
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f884 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f003 fbb5 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7ff fbcb 	bl	8000d68 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015e0:	08005c68 	.word	0x08005c68
  ldr r2, =_sbss
 80015e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015e8:	2000049c 	.word	0x2000049c

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_Init+0x28>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_Init+0x28>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f001 fb19 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fe2c 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000

0800161c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fb23 	bl	8002c86 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f001 faf9 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000000 	.word	0x20000000
 8001674:	20000008 	.word	0x20000008
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000498 	.word	0x20000498

080016a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000498 	.word	0x20000498

080016bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b09a      	sub	sp, #104	; 0x68
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e1c9      	b.n	8001a70 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d176      	bne.n	80017dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d152      	bne.n	800179c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fdcd 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d13b      	bne.n	800179c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f001 f8b9 	bl	800289c <ADC_Disable>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d12f      	bne.n	800179c <HAL_ADC_Init+0xe0>
 800173c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001740:	2b00      	cmp	r3, #0
 8001742:	d12b      	bne.n	800179c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001766:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001776:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001778:	4b86      	ldr	r3, [pc, #536]	; (8001994 <HAL_ADC_Init+0x2d8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a86      	ldr	r2, [pc, #536]	; (8001998 <HAL_ADC_Init+0x2dc>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9a      	lsrs	r2, r3, #18
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800178e:	e002      	b.n	8001796 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3b01      	subs	r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f9      	bne.n	8001790 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017b8:	d110      	bne.n	80017dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f023 0312 	bic.w	r3, r3, #18
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8136 	bne.w	8001a56 <HAL_ADC_Init+0x39a>
 80017ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8131 	bne.w	8001a56 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8129 	bne.w	8001a56 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181c:	d004      	beq.n	8001828 <HAL_ADC_Init+0x16c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_ADC_Init+0x2e0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_ADC_Init+0x170>
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_ADC_Init+0x2e4>)
 800182a:	e000      	b.n	800182e <HAL_ADC_Init+0x172>
 800182c:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_ADC_Init+0x2e8>)
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001838:	d102      	bne.n	8001840 <HAL_ADC_Init+0x184>
 800183a:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_ADC_Init+0x2e0>)
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e01a      	b.n	8001876 <HAL_ADC_Init+0x1ba>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_ADC_Init+0x2e0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d103      	bne.n	8001852 <HAL_ADC_Init+0x196>
 800184a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e011      	b.n	8001876 <HAL_ADC_Init+0x1ba>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_ADC_Init+0x2ec>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <HAL_ADC_Init+0x1a6>
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_ADC_Init+0x2f0>)
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e009      	b.n	8001876 <HAL_ADC_Init+0x1ba>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_ADC_Init+0x2f0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d102      	bne.n	8001872 <HAL_ADC_Init+0x1b6>
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <HAL_ADC_Init+0x2ec>)
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e001      	b.n	8001876 <HAL_ADC_Init+0x1ba>
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d108      	bne.n	8001896 <HAL_ADC_Init+0x1da>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x1da>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_ADC_Init+0x1dc>
 8001896:	2300      	movs	r3, #0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11c      	bne.n	80018d6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800189c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_ADC_Init+0x202>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x202>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_ADC_Init+0x204>
 80018be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e5b      	ldrb	r3, [r3, #25]
 80018da:	035b      	lsls	r3, r3, #13
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	d002      	beq.n	80018ea <HAL_ADC_Init+0x22e>
 80018e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e8:	e000      	b.n	80018ec <HAL_ADC_Init+0x230>
 80018ea:	2200      	movs	r2, #0
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fc:	4313      	orrs	r3, r2
 80018fe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11b      	bne.n	8001942 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7e5b      	ldrb	r3, [r3, #25]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	3b01      	subs	r3, #1
 8001918:	045a      	lsls	r2, r3, #17
 800191a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191c:	4313      	orrs	r3, r2
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	663b      	str	r3, [r7, #96]	; 0x60
 8001924:	e00d      	b.n	8001942 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	2b01      	cmp	r3, #1
 8001948:	d03a      	beq.n	80019c0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_ADC_Init+0x2ec>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_ADC_Init+0x2a2>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_ADC_Init+0x2f0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d128      	bne.n	80019b0 <HAL_ADC_Init+0x2f4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001966:	d012      	beq.n	800198e <HAL_ADC_Init+0x2d2>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001970:	d00a      	beq.n	8001988 <HAL_ADC_Init+0x2cc>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800197a:	d002      	beq.n	8001982 <HAL_ADC_Init+0x2c6>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	e018      	b.n	80019b4 <HAL_ADC_Init+0x2f8>
 8001982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001986:	e015      	b.n	80019b4 <HAL_ADC_Init+0x2f8>
 8001988:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800198c:	e012      	b.n	80019b4 <HAL_ADC_Init+0x2f8>
 800198e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001992:	e00f      	b.n	80019b4 <HAL_ADC_Init+0x2f8>
 8001994:	20000000 	.word	0x20000000
 8001998:	431bde83 	.word	0x431bde83
 800199c:	50000100 	.word	0x50000100
 80019a0:	50000300 	.word	0x50000300
 80019a4:	50000700 	.word	0x50000700
 80019a8:	50000400 	.word	0x50000400
 80019ac:	50000500 	.word	0x50000500
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019b8:	4313      	orrs	r3, r2
 80019ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019bc:	4313      	orrs	r3, r2
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d114      	bne.n	80019f8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019dc:	f023 0302 	bic.w	r3, r3, #2
 80019e0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
 80019e6:	039a      	lsls	r2, r3, #14
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4313      	orrs	r3, r2
 80019f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f4:	4313      	orrs	r3, r2
 80019f6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_ADC_Init+0x3bc>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10c      	bne.n	8001a2e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f023 010f 	bic.w	r1, r3, #15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	e007      	b.n	8001a3e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 020f 	bic.w	r2, r2, #15
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f023 0303 	bic.w	r3, r3, #3
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
 8001a54:	e00a      	b.n	8001a6c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f023 0312 	bic.w	r3, r3, #18
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3768      	adds	r7, #104	; 0x68
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	fff0c007 	.word	0xfff0c007

08001a7c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80f9 	bne.w	8001c8a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start+0x2a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e0f4      	b.n	8001c90 <HAL_ADC_Start+0x214>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fe90 	bl	80027d4 <ADC_Enable>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80e0 	bne.w	8001c80 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_Start+0x6c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6d      	ldr	r2, [pc, #436]	; (8001c98 <HAL_ADC_Start+0x21c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Start+0x7a>
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_ADC_Start+0x220>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_ADC_Start+0x9a>
 8001af4:	e005      	b.n	8001b02 <HAL_ADC_Start+0x86>
 8001af6:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_ADC_Start+0x224>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_ADC_Start+0x9a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_Start+0x9a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a64      	ldr	r2, [pc, #400]	; (8001ca4 <HAL_ADC_Start+0x228>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d115      	bne.n	8001b42 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d036      	beq.n	8001b9e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b40:	e02d      	b.n	8001b9e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b56:	d004      	beq.n	8001b62 <HAL_ADC_Start+0xe6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <HAL_ADC_Start+0x21c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10a      	bne.n	8001b78 <HAL_ADC_Start+0xfc>
 8001b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e008      	b.n	8001b8a <HAL_ADC_Start+0x10e>
 8001b78:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <HAL_ADC_Start+0x228>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001baa:	d106      	bne.n	8001bba <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f023 0206 	bic.w	r2, r3, #6
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	221c      	movs	r2, #28
 8001bce:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_Start+0x168>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_ADC_Start+0x21c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_Start+0x176>
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_ADC_Start+0x220>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03e      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001bf0:	e005      	b.n	8001bfe <HAL_ADC_Start+0x182>
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_ADC_Start+0x224>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d037      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c06:	d004      	beq.n	8001c12 <HAL_ADC_Start+0x196>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_ADC_Start+0x21c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d106      	bne.n	8001c20 <HAL_ADC_Start+0x1a4>
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_ADC_Start+0x220>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d027      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001c1e:	e005      	b.n	8001c2c <HAL_ADC_Start+0x1b0>
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_ADC_Start+0x224>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d020      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c34:	d004      	beq.n	8001c40 <HAL_ADC_Start+0x1c4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_ADC_Start+0x21c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_Start+0x1d2>
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_ADC_Start+0x220>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d010      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001c4c:	e005      	b.n	8001c5a <HAL_ADC_Start+0x1de>
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_ADC_Start+0x224>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d009      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Start+0x1f2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_ADC_Start+0x228>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10f      	bne.n	8001c8e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0204 	orr.w	r2, r2, #4
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e006      	b.n	8001c8e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c88:	e001      	b.n	8001c8e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	50000100 	.word	0x50000100
 8001c9c:	50000300 	.word	0x50000300
 8001ca0:	50000700 	.word	0x50000700
 8001ca4:	50000400 	.word	0x50000400

08001ca8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Stop+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e023      	b.n	8001d0a <HAL_ADC_Stop+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001cca:	216c      	movs	r1, #108	; 0x6c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fe4b 	bl	8002968 <ADC_ConversionStop>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fddd 	bl	800289c <ADC_Disable>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d102      	bne.n	8001d30 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e03a      	b.n	8001da6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d38:	d004      	beq.n	8001d44 <HAL_ADC_PollForConversion+0x30>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a72      	ldr	r2, [pc, #456]	; (8001f08 <HAL_ADC_PollForConversion+0x1f4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x34>
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <HAL_ADC_PollForConversion+0x1f8>)
 8001d46:	e000      	b.n	8001d4a <HAL_ADC_PollForConversion+0x36>
 8001d48:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <HAL_ADC_PollForConversion+0x1fc>)
 8001d4a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d112      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d11d      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0bf      	b.n	8001efe <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f043 0220 	orr.w	r2, r3, #32
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0ad      	b.n	8001efe <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dae:	d004      	beq.n	8001dba <HAL_ADC_PollForConversion+0xa6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a54      	ldr	r2, [pc, #336]	; (8001f08 <HAL_ADC_PollForConversion+0x1f4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0xb4>
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <HAL_ADC_PollForConversion+0x1f8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <HAL_ADC_PollForConversion+0xd4>
 8001dc6:	e005      	b.n	8001dd4 <HAL_ADC_PollForConversion+0xc0>
 8001dc8:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_ADC_PollForConversion+0x1fc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_ADC_PollForConversion+0xd4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_PollForConversion+0xd4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_ADC_PollForConversion+0x200>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d104      	bne.n	8001df2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e00f      	b.n	8001e12 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_PollForConversion+0xf2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a41      	ldr	r2, [pc, #260]	; (8001f08 <HAL_ADC_PollForConversion+0x1f4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d102      	bne.n	8001e0c <HAL_ADC_PollForConversion+0xf8>
 8001e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_PollForConversion+0xfa>
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_ADC_PollForConversion+0x200>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e12:	f7ff fc47 	bl	80016a4 <HAL_GetTick>
 8001e16:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e18:	e021      	b.n	8001e5e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d01d      	beq.n	8001e5e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_ADC_PollForConversion+0x124>
 8001e28:	f7ff fc3c 	bl	80016a4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d212      	bcs.n	8001e5e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04f      	b.n	8001efe <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0d6      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d131      	bne.n	8001eea <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d12c      	bne.n	8001eea <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d125      	bne.n	8001eea <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d112      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d112      	bne.n	8001eea <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed0:	e00b      	b.n	8001eea <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	50000300 	.word	0x50000300
 8001f10:	50000700 	.word	0x50000700
 8001f14:	50000400 	.word	0x50000400

08001f18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADCEx_Calibration_Start+0x1c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e05f      	b.n	800200e <HAL_ADCEx_Calibration_Start+0xdc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fca0 	bl	800289c <ADC_Disable>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d14e      	bne.n	8002004 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001f7a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f90:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fa0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001fa2:	f7ff fb7f 	bl	80016a4 <HAL_GetTick>
 8001fa6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fa8:	e01c      	b.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001faa:	f7ff fb7b 	bl	80016a4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b0a      	cmp	r3, #10
 8001fb6:	d915      	bls.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f023 0312 	bic.w	r3, r3, #18
 8001fd0:	f043 0210 	orr.w	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e014      	b.n	800200e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ff2:	d0da      	beq.n	8001faa <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002018:	b480      	push	{r7}
 800201a:	b09b      	sub	sp, #108	; 0x6c
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x22>
 8002036:	2302      	movs	r3, #2
 8002038:	e2ca      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5b8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 82ae 	bne.w	80025ae <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d81c      	bhi.n	8002094 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	461a      	mov	r2, r3
 800206e:	231f      	movs	r3, #31
 8002070:	4093      	lsls	r3, r2
 8002072:	43db      	mvns	r3, r3
 8002074:	4019      	ands	r1, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
 8002092:	e063      	b.n	800215c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b09      	cmp	r3, #9
 800209a:	d81e      	bhi.n	80020da <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	3b1e      	subs	r3, #30
 80020b0:	221f      	movs	r2, #31
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4019      	ands	r1, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	3b1e      	subs	r3, #30
 80020cc:	fa00 f203 	lsl.w	r2, r0, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
 80020d8:	e040      	b.n	800215c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b0e      	cmp	r3, #14
 80020e0:	d81e      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	3b3c      	subs	r3, #60	; 0x3c
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	3b3c      	subs	r3, #60	; 0x3c
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
 800211e:	e01d      	b.n	800215c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	3b5a      	subs	r3, #90	; 0x5a
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	4019      	ands	r1, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	3b5a      	subs	r3, #90	; 0x5a
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80e5 	bne.w	8002336 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b09      	cmp	r3, #9
 8002172:	d91c      	bls.n	80021ae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3b1e      	subs	r3, #30
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	4019      	ands	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6898      	ldr	r0, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	3b1e      	subs	r3, #30
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	619a      	str	r2, [r3, #24]
 80021ac:	e019      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6959      	ldr	r1, [r3, #20]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	2207      	movs	r2, #7
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4019      	ands	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	3b01      	subs	r3, #1
 8002200:	2b03      	cmp	r3, #3
 8002202:	d84f      	bhi.n	80022a4 <HAL_ADC_ConfigChannel+0x28c>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_ADC_ConfigChannel+0x1f4>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800223f 	.word	0x0800223f
 8002214:	08002261 	.word	0x08002261
 8002218:	08002283 	.word	0x08002283
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002222:	4b9a      	ldr	r3, [pc, #616]	; (800248c <HAL_ADC_ConfigChannel+0x474>)
 8002224:	4013      	ands	r3, r2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	0691      	lsls	r1, r2, #26
 800222c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800222e:	430a      	orrs	r2, r1
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800223a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800223c:	e07e      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_ADC_ConfigChannel+0x474>)
 8002246:	4013      	ands	r3, r2
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	0691      	lsls	r1, r2, #26
 800224e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002250:	430a      	orrs	r2, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800225c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800225e:	e06d      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_ADC_ConfigChannel+0x474>)
 8002268:	4013      	ands	r3, r2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	0691      	lsls	r1, r2, #26
 8002270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002272:	430a      	orrs	r2, r1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800227e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002280:	e05c      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <HAL_ADC_ConfigChannel+0x474>)
 800228a:	4013      	ands	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	0691      	lsls	r1, r2, #26
 8002292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002294:	430a      	orrs	r2, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022a0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022a2:	e04b      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	069b      	lsls	r3, r3, #26
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d107      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800230e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	429a      	cmp	r2, r3
 8002322:	d10a      	bne.n	800233a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002332:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002334:	e001      	b.n	800233a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002336:	bf00      	nop
 8002338:	e000      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
      break;
 800233a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_ADC_ConfigChannel+0x344>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x344>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_ADC_ConfigChannel+0x346>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8130 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d00f      	beq.n	800238c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800238a:	e049      	b.n	8002420 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	d91c      	bls.n	80023e8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6999      	ldr	r1, [r3, #24]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3b1b      	subs	r3, #27
 80023c0:	2207      	movs	r2, #7
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4019      	ands	r1, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6898      	ldr	r0, [r3, #8]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1b      	subs	r3, #27
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	e01b      	b.n	8002420 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6959      	ldr	r1, [r3, #20]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	4019      	ands	r1, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6898      	ldr	r0, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002428:	d004      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x41c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_ADC_ConfigChannel+0x478>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x420>
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_ADC_ConfigChannel+0x47c>)
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x422>
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_ADC_ConfigChannel+0x480>)
 800243a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b10      	cmp	r3, #16
 8002442:	d105      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d015      	beq.n	800247c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002454:	2b11      	cmp	r3, #17
 8002456:	d105      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002468:	2b12      	cmp	r3, #18
 800246a:	f040 80ab 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80a4 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x484>
 8002486:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_ADC_ConfigChannel+0x478>)
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e022      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x4ba>
 800248c:	83fff000 	.word	0x83fff000
 8002490:	50000100 	.word	0x50000100
 8002494:	50000300 	.word	0x50000300
 8002498:	50000700 	.word	0x50000700
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a4e      	ldr	r2, [pc, #312]	; (80025dc <HAL_ADC_ConfigChannel+0x5c4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d103      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x496>
 80024a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e011      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x4ba>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d102      	bne.n	80024be <HAL_ADC_ConfigChannel+0x4a6>
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_ADC_ConfigChannel+0x5cc>)
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e009      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x4ba>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <HAL_ADC_ConfigChannel+0x5cc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d102      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x4b6>
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e001      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x4ba>
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x4da>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x4da>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x4dc>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d150      	bne.n	800259a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_ADC_ConfigChannel+0x502>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x502>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_ADC_ConfigChannel+0x504>
 800251a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800251c:	2b00      	cmp	r3, #0
 800251e:	d13c      	bne.n	800259a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d11d      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x54c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002530:	d118      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <HAL_ADC_ConfigChannel+0x5d4>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	0c9a      	lsrs	r2, r3, #18
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002554:	e002      	b.n	800255c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002562:	e02e      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b11      	cmp	r3, #17
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x56c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002574:	d106      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800257e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002580:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002582:	e01e      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b12      	cmp	r3, #18
 800258a:	d11a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002596:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002598:	e013      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025ac:	e00a      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025c0:	e000      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	376c      	adds	r7, #108	; 0x6c
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	50000100 	.word	0x50000100
 80025e0:	50000400 	.word	0x50000400
 80025e4:	50000500 	.word	0x50000500
 80025e8:	20000000 	.word	0x20000000
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b099      	sub	sp, #100	; 0x64
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002608:	d102      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	e01a      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d103      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800261a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	e011      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d102      	bne.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	e009      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800263c:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	e001      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b0      	b.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800265a:	2302      	movs	r3, #2
 800265c:	e0a9      	b.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 808d 	bne.w	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 8086 	bne.w	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268c:	d004      	beq.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800269a:	e000      	b.n	800269e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800269e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d040      	beq.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ba:	035b      	lsls	r3, r3, #13
 80026bc:	430b      	orrs	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d15c      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002706:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d14b      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800270c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6811      	ldr	r1, [r2, #0]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	430a      	orrs	r2, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002726:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002728:	e03c      	b.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800272a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d123      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002778:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d112      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002786:	f023 030f 	bic.w	r3, r3, #15
 800278a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800278c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800278e:	e009      	b.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027a2:	e000      	b.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80027b2:	4618      	mov	r0, r3
 80027b4:	3764      	adds	r7, #100	; 0x64
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	50000100 	.word	0x50000100
 80027c4:	50000400 	.word	0x50000400
 80027c8:	50000500 	.word	0x50000500
 80027cc:	50000300 	.word	0x50000300
 80027d0:	50000700 	.word	0x50000700

080027d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <ADC_Enable+0x2c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <ADC_Enable+0x2c>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <ADC_Enable+0x2e>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d143      	bne.n	800288e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <ADC_Enable+0xc4>)
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02f      	b.n	8002890 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002840:	f7fe ff30 	bl	80016a4 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002846:	e01b      	b.n	8002880 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002848:	f7fe ff2c 	bl	80016a4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d914      	bls.n	8002880 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d00d      	beq.n	8002880 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d1dc      	bne.n	8002848 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	8000003f 	.word	0x8000003f

0800289c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <ADC_Disable+0x2c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <ADC_Disable+0x2c>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <ADC_Disable+0x2e>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d047      	beq.n	800295e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030d 	and.w	r3, r3, #13
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10f      	bne.n	80028fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0202 	orr.w	r2, r2, #2
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2203      	movs	r2, #3
 80028f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fed6 	bl	80016a4 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028fa:	e029      	b.n	8002950 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e023      	b.n	8002960 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002918:	f7fe fec4 	bl	80016a4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d914      	bls.n	8002950 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10d      	bne.n	8002950 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0210 	orr.w	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d0dc      	beq.n	8002918 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 809b 	beq.w	8002ac4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800299c:	d12a      	bne.n	80029f4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d126      	bne.n	80029f4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d122      	bne.n	80029f4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80029ae:	230c      	movs	r3, #12
 80029b0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029b2:	e014      	b.n	80029de <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4a46      	ldr	r2, [pc, #280]	; (8002ad0 <ADC_ConversionStop+0x168>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d90d      	bls.n	80029d8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e076      	b.n	8002ac6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3301      	adds	r3, #1
 80029dc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d1e3      	bne.n	80029b4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2240      	movs	r2, #64	; 0x40
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b60      	cmp	r3, #96	; 0x60
 80029f8:	d015      	beq.n	8002a26 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d10e      	bne.n	8002a26 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d015      	beq.n	8002a58 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d10e      	bne.n	8002a58 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0220 	orr.w	r2, r2, #32
 8002a56:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b60      	cmp	r3, #96	; 0x60
 8002a5c:	d005      	beq.n	8002a6a <ADC_ConversionStop+0x102>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b6c      	cmp	r3, #108	; 0x6c
 8002a62:	d105      	bne.n	8002a70 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a64:	230c      	movs	r3, #12
 8002a66:	617b      	str	r3, [r7, #20]
        break;
 8002a68:	e005      	b.n	8002a76 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	617b      	str	r3, [r7, #20]
        break;
 8002a6e:	e002      	b.n	8002a76 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a70:	2304      	movs	r3, #4
 8002a72:	617b      	str	r3, [r7, #20]
        break;
 8002a74:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fe15 	bl	80016a4 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a7c:	e01b      	b.n	8002ab6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a7e:	f7fe fe11 	bl	80016a4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b0b      	cmp	r3, #11
 8002a8a:	d914      	bls.n	8002ab6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1dc      	bne.n	8002a7e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	000993ff 	.word	0x000993ff

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f7ff ff8e 	bl	8002b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff47 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff5c 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff8e 	bl	8002b8c <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5d 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffb0 	bl	8002bf4 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cae:	e154      	b.n	8002f5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8146 	beq.w	8002f54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d005      	beq.n	8002ce0 <HAL_GPIO_Init+0x40>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d130      	bne.n	8002d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d16:	2201      	movs	r2, #1
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 0201 	and.w	r2, r3, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d017      	beq.n	8002d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d123      	bne.n	8002dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	6939      	ldr	r1, [r7, #16]
 8002dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0203 	and.w	r2, r3, #3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a0 	beq.w	8002f54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6193      	str	r3, [r2, #24]
 8002e20:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e2c:	4a53      	ldr	r2, [pc, #332]	; (8002f7c <HAL_GPIO_Init+0x2dc>)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e56:	d019      	beq.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_GPIO_Init+0x2e0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_Init+0x1e8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_Init+0x1e4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_GPIO_Init+0x2e8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x1e0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a46      	ldr	r2, [pc, #280]	; (8002f8c <HAL_GPIO_Init+0x2ec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e008      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	e006      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9e:	4937      	ldr	r1, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x2dc>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eac:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ed0:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f aea3 	bne.w	8002cb0 <HAL_GPIO_Init+0x10>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e081      	b.n	80030da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe f9d0 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e006      	b.n	800304c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800304a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d104      	bne.n	800305e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1a      	ldr	r2, [r3, #32]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d138      	bne.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003102:	2302      	movs	r3, #2
 8003104:	e032      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003134:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	d139      	bne.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003198:	2302      	movs	r3, #2
 800319a:	e033      	b.n	8003204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	b08b      	sub	sp, #44	; 0x2c
 8003214:	af06      	add	r7, sp, #24
 8003216:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0c4      	b.n	80033ac <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe f930 	bl	800149c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f001 fd32 	bl	8004cb2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
 8003252:	e040      	b.n	80032d6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3301      	adds	r3, #1
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	3303      	adds	r3, #3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	3338      	adds	r3, #56	; 0x38
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	333c      	adds	r3, #60	; 0x3c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3340      	adds	r3, #64	; 0x40
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	3301      	adds	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3b9      	bcc.n	8003254 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e044      	b.n	8003370 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3301      	adds	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b5      	bcc.n	80032e6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	687e      	ldr	r6, [r7, #4]
 8003382:	466d      	mov	r5, sp
 8003384:	f106 0410 	add.w	r4, r6, #16
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	1d33      	adds	r3, r6, #4
 8003392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f001 fca7 	bl	8004ce8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f001 b823 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 817d 	beq.w	80036ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033f0:	4bbc      	ldr	r3, [pc, #752]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d00c      	beq.n	8003416 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033fc:	4bb9      	ldr	r3, [pc, #740]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d15c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x10e>
 8003408:	4bb6      	ldr	r3, [pc, #728]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d155      	bne.n	80034c2 <HAL_RCC_OscConfig+0x10e>
 8003416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800342a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_RCC_OscConfig+0x94>
 8003442:	4ba8      	ldr	r3, [pc, #672]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e015      	b.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800345c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003460:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003464:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003470:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003478:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800347c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003480:	fa92 f2a2 	rbit	r2, r2
 8003484:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003488:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800348c:	fab2 f282 	clz	r2, r2
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f042 0220 	orr.w	r2, r2, #32
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f002 021f 	and.w	r2, r2, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 811f 	beq.w	80036e8 <HAL_RCC_OscConfig+0x334>
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 8116 	bne.w	80036e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f000 bfaf 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12e>
 80034d4:	4b83      	ldr	r3, [pc, #524]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a82      	ldr	r2, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e036      	b.n	8003550 <HAL_RCC_OscConfig+0x19c>
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x158>
 80034f2:	4b7c      	ldr	r3, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7b      	ldr	r2, [pc, #492]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b79      	ldr	r3, [pc, #484]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a78      	ldr	r2, [pc, #480]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e021      	b.n	8003550 <HAL_RCC_OscConfig+0x19c>
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x184>
 800351e:	4b71      	ldr	r3, [pc, #452]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a70      	ldr	r2, [pc, #448]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b6e      	ldr	r3, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6d      	ldr	r2, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x19c>
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003550:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f023 020f 	bic.w	r2, r3, #15
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	495f      	ldr	r1, [pc, #380]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 8003566:	4313      	orrs	r3, r2
 8003568:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d059      	beq.n	800362e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe f893 	bl	80016a4 <HAL_GetTick>
 800357e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe f88e 	bl	80016a4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d902      	bls.n	800359a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	f000 bf43 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 800359a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_RCC_OscConfig+0x218>
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	e015      	b.n	80035f8 <HAL_RCC_OscConfig+0x244>
 80035cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035f4:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003600:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003604:	fa92 f2a2 	rbit	r2, r2
 8003608:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800360c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f042 0220 	orr.w	r2, r2, #32
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ab      	beq.n	8003584 <HAL_RCC_OscConfig+0x1d0>
 800362c:	e05d      	b.n	80036ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe f839 	bl	80016a4 <HAL_GetTick>
 8003632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f834 	bl	80016a4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d902      	bls.n	800364e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	f000 bee9 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 800364e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003652:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003662:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x2cc>
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	e015      	b.n	80036ac <HAL_RCC_OscConfig+0x2f8>
 8003680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003684:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003698:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800369c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RCC_OscConfig+0x330>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036b8:	fa92 f2a2 	rbit	r2, r2
 80036bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036c4:	fab2 f282 	clz	r2, r2
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f002 021f 	and.w	r2, r2, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ab      	bne.n	8003638 <HAL_RCC_OscConfig+0x284>
 80036e0:	e003      	b.n	80036ea <HAL_RCC_OscConfig+0x336>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 817d 	beq.w	80039fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003700:	4ba6      	ldr	r3, [pc, #664]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800370c:	4ba3      	ldr	r3, [pc, #652]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d172      	bne.n	80037fe <HAL_RCC_OscConfig+0x44a>
 8003718:	4ba0      	ldr	r3, [pc, #640]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d16c      	bne.n	80037fe <HAL_RCC_OscConfig+0x44a>
 8003724:	2302      	movs	r3, #2
 8003726:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003736:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d102      	bne.n	8003754 <HAL_RCC_OscConfig+0x3a0>
 800374e:	4b93      	ldr	r3, [pc, #588]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	e013      	b.n	800377c <HAL_RCC_OscConfig+0x3c8>
 8003754:	2302      	movs	r3, #2
 8003756:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003766:	2302      	movs	r3, #2
 8003768:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800376c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003778:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2202      	movs	r2, #2
 800377e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003782:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003786:	fa92 f2a2 	rbit	r2, r2
 800378a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800378e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003792:	fab2 f282 	clz	r2, r2
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f042 0220 	orr.w	r2, r2, #32
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCC_OscConfig+0x410>
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f000 be2e 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b75      	ldr	r3, [pc, #468]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	21f8      	movs	r1, #248	; 0xf8
 80037da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037e2:	fa91 f1a1 	rbit	r1, r1
 80037e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037ee:	fab1 f181 	clz	r1, r1
 80037f2:	b2c9      	uxtb	r1, r1
 80037f4:	408b      	lsls	r3, r1
 80037f6:	4969      	ldr	r1, [pc, #420]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fc:	e0fd      	b.n	80039fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8088 	beq.w	8003920 <HAL_RCC_OscConfig+0x56c>
 8003810:	2301      	movs	r3, #1
 8003812:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003822:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	461a      	mov	r2, r3
 8003838:	2301      	movs	r3, #1
 800383a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fd ff32 	bl	80016a4 <HAL_GetTick>
 8003840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003846:	f7fd ff2d 	bl	80016a4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d902      	bls.n	800385c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	f000 bde2 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 800385c:	2302      	movs	r3, #2
 800385e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800386e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d102      	bne.n	800388c <HAL_RCC_OscConfig+0x4d8>
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	e013      	b.n	80038b4 <HAL_RCC_OscConfig+0x500>
 800388c:	2302      	movs	r3, #2
 800388e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800389e:	2302      	movs	r3, #2
 80038a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2202      	movs	r2, #2
 80038b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038be:	fa92 f2a2 	rbit	r2, r2
 80038c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038ca:	fab2 f282 	clz	r2, r2
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f042 0220 	orr.w	r2, r2, #32
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	f002 021f 	and.w	r2, r2, #31
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0af      	beq.n	8003846 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	21f8      	movs	r1, #248	; 0xf8
 80038fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003904:	fa91 f1a1 	rbit	r1, r1
 8003908:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800390c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003910:	fab1 f181 	clz	r1, r1
 8003914:	b2c9      	uxtb	r1, r1
 8003916:	408b      	lsls	r3, r1
 8003918:	4920      	ldr	r1, [pc, #128]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
 800391e:	e06c      	b.n	80039fa <HAL_RCC_OscConfig+0x646>
 8003920:	2301      	movs	r3, #1
 8003922:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003932:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd feaa 	bl	80016a4 <HAL_GetTick>
 8003950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fd fea5 	bl	80016a4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d902      	bls.n	800396c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f000 bd5a 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 800396c:	2302      	movs	r3, #2
 800396e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800397e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d104      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5ec>
 8003996:	4b01      	ldr	r3, [pc, #4]	; (800399c <HAL_RCC_OscConfig+0x5e8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	e015      	b.n	80039c8 <HAL_RCC_OscConfig+0x614>
 800399c:	40021000 	.word	0x40021000
 80039a0:	2302      	movs	r3, #2
 80039a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039b2:	2302      	movs	r3, #2
 80039b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039c4:	4bc8      	ldr	r3, [pc, #800]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2202      	movs	r2, #2
 80039ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039de:	fab2 f282 	clz	r2, r2
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f042 0220 	orr.w	r2, r2, #32
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f002 021f 	and.w	r2, r2, #31
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ad      	bne.n	8003956 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8110 	beq.w	8003c30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d079      	beq.n	8003b14 <HAL_RCC_OscConfig+0x760>
 8003a20:	2301      	movs	r3, #1
 8003a22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4bab      	ldr	r3, [pc, #684]	; (8003cec <HAL_RCC_OscConfig+0x938>)
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	461a      	mov	r2, r3
 8003a46:	2301      	movs	r3, #1
 8003a48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fe2b 	bl	80016a4 <HAL_GetTick>
 8003a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fd fe26 	bl	80016a4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d902      	bls.n	8003a6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	f000 bcdb 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a84:	2202      	movs	r2, #2
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	fa93 f2a3 	rbit	r2, r3
 8003a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ac2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac4:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	6019      	str	r1, [r3, #0]
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f1a3 	rbit	r1, r3
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003aea:	6019      	str	r1, [r3, #0]
  return result;
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0a0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x6a0>
 8003b12:	e08d      	b.n	8003c30 <HAL_RCC_OscConfig+0x87c>
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f2a3 	rbit	r2, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b36:	601a      	str	r2, [r3, #0]
  return result;
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b68      	ldr	r3, [pc, #416]	; (8003cec <HAL_RCC_OscConfig+0x938>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fd fda5 	bl	80016a4 <HAL_GetTick>
 8003b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd fda0 	bl	80016a4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d902      	bls.n	8003b76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f000 bc55 	b.w	8004420 <HAL_RCC_OscConfig+0x106c>
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b7e:	2202      	movs	r2, #2
 8003b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	fa93 f2a3 	rbit	r2, r3
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f2a3 	rbit	r2, r3
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f2a3 	rbit	r2, r3
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003be0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bee:	2102      	movs	r1, #2
 8003bf0:	6019      	str	r1, [r3, #0]
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f1a3 	rbit	r1, r3
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c08:	6019      	str	r1, [r3, #0]
  return result;
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fab3 f383 	clz	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d197      	bne.n	8003b60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 81a1 	beq.w	8003f88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4c:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d116      	bne.n	8003c86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c62:	61d3      	str	r3, [r2, #28]
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x93c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11a      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_RCC_OscConfig+0x93c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_RCC_OscConfig+0x93c>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd fd01 	bl	80016a4 <HAL_GetTick>
 8003ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	e009      	b.n	8003cbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fd fcfc 	bl	80016a4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e3b1      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x93c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ef      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x940>
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4a02      	ldr	r2, [pc, #8]	; (8003ce8 <HAL_RCC_OscConfig+0x934>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6213      	str	r3, [r2, #32]
 8003ce4:	e03c      	b.n	8003d60 <HAL_RCC_OscConfig+0x9ac>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	10908120 	.word	0x10908120
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCC_OscConfig+0x96a>
 8003d04:	4bc1      	ldr	r3, [pc, #772]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4ac0      	ldr	r2, [pc, #768]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6213      	str	r3, [r2, #32]
 8003d10:	4bbe      	ldr	r3, [pc, #760]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4abd      	ldr	r2, [pc, #756]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d16:	f023 0304 	bic.w	r3, r3, #4
 8003d1a:	6213      	str	r3, [r2, #32]
 8003d1c:	e020      	b.n	8003d60 <HAL_RCC_OscConfig+0x9ac>
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x994>
 8003d2e:	4bb7      	ldr	r3, [pc, #732]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4ab6      	ldr	r2, [pc, #728]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	4bb4      	ldr	r3, [pc, #720]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4ab3      	ldr	r2, [pc, #716]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6213      	str	r3, [r2, #32]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0x9ac>
 8003d48:	4bb0      	ldr	r3, [pc, #704]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4aaf      	ldr	r2, [pc, #700]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6213      	str	r3, [r2, #32]
 8003d54:	4bad      	ldr	r3, [pc, #692]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4aac      	ldr	r2, [pc, #688]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003d5a:	f023 0304 	bic.w	r3, r3, #4
 8003d5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8081 	beq.w	8003e74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fd fc97 	bl	80016a4 <HAL_GetTick>
 8003d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fd fc92 	bl	80016a4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e345      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	fa93 f2a3 	rbit	r2, r3
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f2a3 	rbit	r2, r3
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003dda:	601a      	str	r2, [r3, #0]
  return result;
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003de4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d102      	bne.n	8003e00 <HAL_RCC_OscConfig+0xa4c>
 8003dfa:	4b84      	ldr	r3, [pc, #528]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	e013      	b.n	8003e28 <HAL_RCC_OscConfig+0xa74>
 8003e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e08:	2202      	movs	r2, #2
 8003e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4b79      	ldr	r3, [pc, #484]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e30:	2102      	movs	r1, #2
 8003e32:	6011      	str	r1, [r2, #0]
 8003e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	fa92 f1a2 	rbit	r1, r2
 8003e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e4a:	6011      	str	r1, [r2, #0]
  return result;
 8003e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f002 021f 	and.w	r2, r2, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d084      	beq.n	8003d7c <HAL_RCC_OscConfig+0x9c8>
 8003e72:	e07f      	b.n	8003f74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fc16 	bl	80016a4 <HAL_GetTick>
 8003e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fd fc11 	bl	80016a4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e2c4      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f2a3 	rbit	r2, r3
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003edc:	601a      	str	r2, [r3, #0]
  return result;
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_OscConfig+0xb4e>
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	e013      	b.n	8003f2a <HAL_RCC_OscConfig+0xb76>
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f32:	2102      	movs	r1, #2
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	fa92 f1a2 	rbit	r1, r2
 8003f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f4c:	6011      	str	r1, [r2, #0]
  return result;
 8003f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f52:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	fab2 f282 	clz	r2, r2
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f002 021f 	and.w	r2, r2, #31
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d184      	bne.n	8003e7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8242 	beq.w	800441e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_RCC_OscConfig+0xc58>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	f000 8213 	beq.w	80043ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	f040 8162 	bne.w	800427e <HAL_RCC_OscConfig+0xeca>
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fde:	601a      	str	r2, [r3, #0]
  return result;
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fe8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd fb50 	bl	80016a4 <HAL_GetTick>
 8004004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	e00c      	b.n	8004024 <HAL_RCC_OscConfig+0xc70>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fb48 	bl	80016a4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e1fd      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800402c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fa93 f2a3 	rbit	r2, r3
 8004040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004044:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004048:	601a      	str	r2, [r3, #0]
  return result;
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0xcba>
 8004068:	4bb0      	ldr	r3, [pc, #704]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e027      	b.n	80040be <HAL_RCC_OscConfig+0xd0a>
 800406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004072:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004080:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800409c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4b9c      	ldr	r3, [pc, #624]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	fa92 f1a2 	rbit	r1, r2
 80040da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040e2:	6011      	str	r1, [r2, #0]
  return result;
 80040e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	fab2 f282 	clz	r2, r2
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f042 0220 	orr.w	r2, r2, #32
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f002 021f 	and.w	r2, r2, #31
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d182      	bne.n	8004010 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	430b      	orrs	r3, r1
 800412c:	497f      	ldr	r1, [pc, #508]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800413a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004160:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800416c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	2301      	movs	r3, #1
 8004176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fa94 	bl	80016a4 <HAL_GetTick>
 800417c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd fa8f 	bl	80016a4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e144      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800419e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	fa93 f2a3 	rbit	r2, r3
 80041b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041ba:	601a      	str	r2, [r3, #0]
  return result;
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_OscConfig+0xe2c>
 80041da:	4b54      	ldr	r3, [pc, #336]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e027      	b.n	8004230 <HAL_RCC_OscConfig+0xe7c>
 80041e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004200:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800420e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004218:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004234:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004242:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	fa92 f1a2 	rbit	r1, r2
 800424c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004250:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004254:	6011      	str	r1, [r2, #0]
  return result;
 8004256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800425a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f042 0220 	orr.w	r2, r2, #32
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f002 021f 	and.w	r2, r2, #31
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d082      	beq.n	8004182 <HAL_RCC_OscConfig+0xdce>
 800427c:	e0cf      	b.n	800441e <HAL_RCC_OscConfig+0x106a>
 800427e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004282:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800428a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042a2:	601a      	str	r2, [r3, #0]
  return result;
 80042a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80042ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd f9ee 	bl	80016a4 <HAL_GetTick>
 80042c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd f9e9 	bl	80016a4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e09e      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
 80042e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	fa93 f2a3 	rbit	r2, r3
 80042fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004302:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004306:	601a      	str	r2, [r3, #0]
  return result;
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004310:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d104      	bne.n	8004330 <HAL_RCC_OscConfig+0xf7c>
 8004326:	4b01      	ldr	r3, [pc, #4]	; (800432c <HAL_RCC_OscConfig+0xf78>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e029      	b.n	8004380 <HAL_RCC_OscConfig+0xfcc>
 800432c:	40021000 	.word	0x40021000
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004342:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	fa93 f2a3 	rbit	r2, r3
 800434c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004350:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800435e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004368:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f2a3 	rbit	r2, r3
 8004372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004376:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCC_OscConfig+0x1078>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004384:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004392:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	fa92 f1a2 	rbit	r1, r2
 800439c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043a4:	6011      	str	r1, [r2, #0]
  return result;
 80043a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	fab2 f282 	clz	r2, r2
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	f042 0220 	orr.w	r2, r2, #32
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f002 021f 	and.w	r2, r2, #31
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d180      	bne.n	80042ce <HAL_RCC_OscConfig+0xf1a>
 80043cc:	e027      	b.n	800441e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e01e      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_OscConfig+0x1078>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d10b      	bne.n	800441a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004402:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800440a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b09e      	sub	sp, #120	; 0x78
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e162      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b90      	ldr	r3, [pc, #576]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b8d      	ldr	r3, [pc, #564]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	498b      	ldr	r1, [pc, #556]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b89      	ldr	r3, [pc, #548]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e14a      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004484:	4b82      	ldr	r3, [pc, #520]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	497f      	ldr	r1, [pc, #508]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80dc 	beq.w	800465c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d13c      	bne.n	8004526 <HAL_RCC_ClockConfig+0xf6>
 80044ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xa6>
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e00f      	b.n	80044f6 <HAL_RCC_ClockConfig+0xc6>
 80044d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	667b      	str	r3, [r7, #100]	; 0x64
 80044e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044f2:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80044fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fe:	fa92 f2a2 	rbit	r2, r2
 8004502:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004506:	fab2 f282 	clz	r2, r2
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	f042 0220 	orr.w	r2, r2, #32
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	f002 021f 	and.w	r2, r2, #31
 8004516:	2101      	movs	r1, #1
 8004518:	fa01 f202 	lsl.w	r2, r1, r2
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d17b      	bne.n	800461a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0f3      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d13c      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x178>
 800452e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d102      	bne.n	8004558 <HAL_RCC_ClockConfig+0x128>
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	e00f      	b.n	8004578 <HAL_RCC_ClockConfig+0x148>
 8004558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	647b      	str	r3, [r7, #68]	; 0x44
 8004566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800456a:	643b      	str	r3, [r7, #64]	; 0x40
 800456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800457c:	63ba      	str	r2, [r7, #56]	; 0x38
 800457e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004580:	fa92 f2a2 	rbit	r2, r2
 8004584:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004588:	fab2 f282 	clz	r2, r2
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	f042 0220 	orr.w	r2, r2, #32
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	f002 021f 	and.w	r2, r2, #31
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f202 	lsl.w	r2, r1, r2
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d13a      	bne.n	800461a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b2      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
 80045a8:	2302      	movs	r3, #2
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x1a0>
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	e00d      	b.n	80045ec <HAL_RCC_ClockConfig+0x1bc>
 80045d0:	2302      	movs	r3, #2
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	2302      	movs	r3, #2
 80045de:	623b      	str	r3, [r7, #32]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2202      	movs	r2, #2
 80045ee:	61ba      	str	r2, [r7, #24]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	fa92 f2a2 	rbit	r2, r2
 80045f6:	617a      	str	r2, [r7, #20]
  return result;
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	fab2 f282 	clz	r2, r2
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f042 0220 	orr.w	r2, r2, #32
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	f002 021f 	and.w	r2, r2, #31
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f202 	lsl.w	r2, r1, r2
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e079      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	491a      	ldr	r1, [pc, #104]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800462c:	f7fd f83a 	bl	80016a4 <HAL_GetTick>
 8004630:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	e00a      	b.n	800464a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fd f836 	bl	80016a4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e061      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 020c 	and.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	429a      	cmp	r2, r3
 800465a:	d1eb      	bne.n	8004634 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d214      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	4906      	ldr	r1, [pc, #24]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_RCC_ClockConfig+0x25c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e040      	b.n	800470e <HAL_RCC_ClockConfig+0x2de>
 800468c:	40022000 	.word	0x40022000
 8004690:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <HAL_RCC_ClockConfig+0x2e8>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	491a      	ldr	r1, [pc, #104]	; (8004718 <HAL_RCC_ClockConfig+0x2e8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046be:	4b16      	ldr	r3, [pc, #88]	; (8004718 <HAL_RCC_ClockConfig+0x2e8>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4912      	ldr	r1, [pc, #72]	; (8004718 <HAL_RCC_ClockConfig+0x2e8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d2:	f000 f829 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046d6:	4601      	mov	r1, r0
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <HAL_RCC_ClockConfig+0x2e8>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	22f0      	movs	r2, #240	; 0xf0
 80046e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	fa92 f2a2 	rbit	r2, r2
 80046ea:	60fa      	str	r2, [r7, #12]
  return result;
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	fab2 f282 	clz	r2, r2
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	40d3      	lsrs	r3, r2
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x2ec>)
 80046f8:	5cd3      	ldrb	r3, [r2, r3]
 80046fa:	fa21 f303 	lsr.w	r3, r1, r3
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <HAL_RCC_ClockConfig+0x2f0>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <HAL_RCC_ClockConfig+0x2f4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc ff88 	bl	800161c <HAL_InitTick>
  
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3778      	adds	r7, #120	; 0x78
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	08005c00 	.word	0x08005c00
 8004720:	20000000 	.word	0x20000000
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b08b      	sub	sp, #44	; 0x2c
 800472c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x30>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x36>
 8004756:	e03c      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800475a:	623b      	str	r3, [r7, #32]
      break;
 800475c:	e03c      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004764:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004768:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	fa92 f2a2 	rbit	r2, r2
 8004770:	607a      	str	r2, [r7, #4]
  return result;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	fab2 f282 	clz	r2, r2
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	40d3      	lsrs	r3, r2
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	220f      	movs	r2, #15
 800478c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	fa92 f2a2 	rbit	r2, r2
 8004794:	60fa      	str	r2, [r7, #12]
  return result;
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	fab2 f282 	clz	r2, r2
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	40d3      	lsrs	r3, r2
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047b0:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	e004      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	623b      	str	r3, [r7, #32]
      break;
 80047d0:	e002      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80047d4:	623b      	str	r3, [r7, #32]
      break;
 80047d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	372c      	adds	r7, #44	; 0x2c
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	007a1200 	.word	0x007a1200
 80047f0:	08005c10 	.word	0x08005c10
 80047f4:	08005c20 	.word	0x08005c20
 80047f8:	003d0900 	.word	0x003d0900

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b092      	sub	sp, #72	; 0x48
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80d4 	beq.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004820:	4b4e      	ldr	r3, [pc, #312]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10e      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b4b      	ldr	r3, [pc, #300]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4a4a      	ldr	r2, [pc, #296]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	61d3      	str	r3, [r2, #28]
 8004838:	4b48      	ldr	r3, [pc, #288]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b45      	ldr	r3, [pc, #276]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a41      	ldr	r2, [pc, #260]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fc ff1f 	bl	80016a4 <HAL_GetTick>
 8004866:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fc ff1b 	bl	80016a4 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b64      	cmp	r3, #100	; 0x64
 8004876:	d901      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e169      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004888:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8084 	beq.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d07c      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	2301      	movs	r3, #1
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d04b      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7fc fecb 	bl	80016a4 <HAL_GetTick>
 800490e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fc fec7 	bl	80016a4 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e113      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004928:	2302      	movs	r3, #2
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	2302      	movs	r3, #2
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	61fb      	str	r3, [r7, #28]
  return result;
 8004940:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d108      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004956:	4b01      	ldr	r3, [pc, #4]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	e00d      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800495c:	40021000 	.word	0x40021000
 8004960:	40007000 	.word	0x40007000
 8004964:	10908100 	.word	0x10908100
 8004968:	2302      	movs	r3, #2
 800496a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	4b78      	ldr	r3, [pc, #480]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	2202      	movs	r2, #2
 800497a:	613a      	str	r2, [r7, #16]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	fa92 f2a2 	rbit	r2, r2
 8004982:	60fa      	str	r2, [r7, #12]
  return result;
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	fab2 f282 	clz	r2, r2
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	f002 021f 	and.w	r2, r2, #31
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f202 	lsl.w	r2, r1, r2
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0b7      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	496a      	ldr	r1, [pc, #424]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b66      	ldr	r3, [pc, #408]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4a65      	ldr	r2, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d4:	4b60      	ldr	r3, [pc, #384]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f023 0203 	bic.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	495d      	ldr	r1, [pc, #372]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f2:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4956      	ldr	r1, [pc, #344]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a10:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	494e      	ldr	r1, [pc, #312]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f023 0210 	bic.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	4947      	ldr	r1, [pc, #284]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	493f      	ldr	r1, [pc, #252]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f023 0220 	bic.w	r2, r3, #32
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a88:	4b33      	ldr	r3, [pc, #204]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	4930      	ldr	r1, [pc, #192]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	4929      	ldr	r1, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4921      	ldr	r1, [pc, #132]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	491a      	ldr	r1, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	4912      	ldr	r1, [pc, #72]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	490b      	ldr	r1, [pc, #44]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	4903      	ldr	r1, [pc, #12]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3748      	adds	r7, #72	; 0x48
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e09d      	b.n	8004caa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d108      	bne.n	8004b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d009      	beq.n	8004b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
 8004b86:	e005      	b.n	8004b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc fc32 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd4:	d902      	bls.n	8004bdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e002      	b.n	8004be2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bea:	d007      	beq.n	8004bfc <HAL_SPI_Init+0xa0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	ea42 0103 	orr.w	r1, r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	f003 0204 	and.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c78:	ea42 0103 	orr.w	r1, r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cba:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ce8:	b084      	sub	sp, #16
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	f107 0014 	add.w	r0, r7, #20
 8004cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	b004      	add	sp, #16
 8004d28:	4770      	bx	lr
	...

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	4d0d      	ldr	r5, [pc, #52]	; (8004d70 <__libc_init_array+0x38>)
 8004d3c:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d3e:	1b64      	subs	r4, r4, r5
 8004d40:	10a4      	asrs	r4, r4, #2
 8004d42:	2600      	movs	r6, #0
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	4d0b      	ldr	r5, [pc, #44]	; (8004d78 <__libc_init_array+0x40>)
 8004d4a:	4c0c      	ldr	r4, [pc, #48]	; (8004d7c <__libc_init_array+0x44>)
 8004d4c:	f000 ff3a 	bl	8005bc4 <_init>
 8004d50:	1b64      	subs	r4, r4, r5
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	2600      	movs	r6, #0
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08005c60 	.word	0x08005c60
 8004d74:	08005c60 	.word	0x08005c60
 8004d78:	08005c60 	.word	0x08005c60
 8004d7c:	08005c64 	.word	0x08005c64

08004d80 <memset>:
 8004d80:	4402      	add	r2, r0
 8004d82:	4603      	mov	r3, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <pow>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	ed2d 8b02 	vpush	{d8}
 8004d96:	eeb0 8a40 	vmov.f32	s16, s0
 8004d9a:	eef0 8a60 	vmov.f32	s17, s1
 8004d9e:	ec55 4b11 	vmov	r4, r5, d1
 8004da2:	f000 f865 	bl	8004e70 <__ieee754_pow>
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	4629      	mov	r1, r5
 8004dae:	ec57 6b10 	vmov	r6, r7, d0
 8004db2:	f7fb fe5f 	bl	8000a74 <__aeabi_dcmpun>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d13b      	bne.n	8004e32 <pow+0xa2>
 8004dba:	ec51 0b18 	vmov	r0, r1, d8
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f7fb fe25 	bl	8000a10 <__aeabi_dcmpeq>
 8004dc6:	b1b8      	cbz	r0, 8004df8 <pow+0x68>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb fe1e 	bl	8000a10 <__aeabi_dcmpeq>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d146      	bne.n	8004e66 <pow+0xd6>
 8004dd8:	ec45 4b10 	vmov	d0, r4, r5
 8004ddc:	f000 fe61 	bl	8005aa2 <finite>
 8004de0:	b338      	cbz	r0, 8004e32 <pow+0xa2>
 8004de2:	2200      	movs	r2, #0
 8004de4:	2300      	movs	r3, #0
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb fe1b 	bl	8000a24 <__aeabi_dcmplt>
 8004dee:	b300      	cbz	r0, 8004e32 <pow+0xa2>
 8004df0:	f7ff ff9c 	bl	8004d2c <__errno>
 8004df4:	2322      	movs	r3, #34	; 0x22
 8004df6:	e01b      	b.n	8004e30 <pow+0xa0>
 8004df8:	ec47 6b10 	vmov	d0, r6, r7
 8004dfc:	f000 fe51 	bl	8005aa2 <finite>
 8004e00:	b9e0      	cbnz	r0, 8004e3c <pow+0xac>
 8004e02:	eeb0 0a48 	vmov.f32	s0, s16
 8004e06:	eef0 0a68 	vmov.f32	s1, s17
 8004e0a:	f000 fe4a 	bl	8005aa2 <finite>
 8004e0e:	b1a8      	cbz	r0, 8004e3c <pow+0xac>
 8004e10:	ec45 4b10 	vmov	d0, r4, r5
 8004e14:	f000 fe45 	bl	8005aa2 <finite>
 8004e18:	b180      	cbz	r0, 8004e3c <pow+0xac>
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	4630      	mov	r0, r6
 8004e20:	4639      	mov	r1, r7
 8004e22:	f7fb fe27 	bl	8000a74 <__aeabi_dcmpun>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0e2      	beq.n	8004df0 <pow+0x60>
 8004e2a:	f7ff ff7f 	bl	8004d2c <__errno>
 8004e2e:	2321      	movs	r3, #33	; 0x21
 8004e30:	6003      	str	r3, [r0, #0]
 8004e32:	ecbd 8b02 	vpop	{d8}
 8004e36:	ec47 6b10 	vmov	d0, r6, r7
 8004e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	f7fb fde4 	bl	8000a10 <__aeabi_dcmpeq>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0f2      	beq.n	8004e32 <pow+0xa2>
 8004e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8004e50:	eef0 0a68 	vmov.f32	s1, s17
 8004e54:	f000 fe25 	bl	8005aa2 <finite>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d0ea      	beq.n	8004e32 <pow+0xa2>
 8004e5c:	ec45 4b10 	vmov	d0, r4, r5
 8004e60:	f000 fe1f 	bl	8005aa2 <finite>
 8004e64:	e7c3      	b.n	8004dee <pow+0x5e>
 8004e66:	4f01      	ldr	r7, [pc, #4]	; (8004e6c <pow+0xdc>)
 8004e68:	2600      	movs	r6, #0
 8004e6a:	e7e2      	b.n	8004e32 <pow+0xa2>
 8004e6c:	3ff00000 	.word	0x3ff00000

08004e70 <__ieee754_pow>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	ed2d 8b06 	vpush	{d8-d10}
 8004e78:	b089      	sub	sp, #36	; 0x24
 8004e7a:	ed8d 1b00 	vstr	d1, [sp]
 8004e7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004e82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004e86:	ea58 0102 	orrs.w	r1, r8, r2
 8004e8a:	ec57 6b10 	vmov	r6, r7, d0
 8004e8e:	d115      	bne.n	8004ebc <__ieee754_pow+0x4c>
 8004e90:	19b3      	adds	r3, r6, r6
 8004e92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004e96:	4152      	adcs	r2, r2
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	4b89      	ldr	r3, [pc, #548]	; (80050c0 <__ieee754_pow+0x250>)
 8004e9c:	4193      	sbcs	r3, r2
 8004e9e:	f080 84d2 	bcs.w	8005846 <__ieee754_pow+0x9d6>
 8004ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	f7fb f993 	bl	80001d4 <__adddf3>
 8004eae:	ec41 0b10 	vmov	d0, r0, r1
 8004eb2:	b009      	add	sp, #36	; 0x24
 8004eb4:	ecbd 8b06 	vpop	{d8-d10}
 8004eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebc:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <__ieee754_pow+0x254>)
 8004ebe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	ee10 aa10 	vmov	sl, s0
 8004ec8:	463d      	mov	r5, r7
 8004eca:	dc06      	bgt.n	8004eda <__ieee754_pow+0x6a>
 8004ecc:	d101      	bne.n	8004ed2 <__ieee754_pow+0x62>
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d1e7      	bne.n	8004ea2 <__ieee754_pow+0x32>
 8004ed2:	4598      	cmp	r8, r3
 8004ed4:	dc01      	bgt.n	8004eda <__ieee754_pow+0x6a>
 8004ed6:	d10f      	bne.n	8004ef8 <__ieee754_pow+0x88>
 8004ed8:	b172      	cbz	r2, 8004ef8 <__ieee754_pow+0x88>
 8004eda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004ede:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004ee2:	ea55 050a 	orrs.w	r5, r5, sl
 8004ee6:	d1dc      	bne.n	8004ea2 <__ieee754_pow+0x32>
 8004ee8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004eec:	18db      	adds	r3, r3, r3
 8004eee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004ef2:	4152      	adcs	r2, r2
 8004ef4:	429d      	cmp	r5, r3
 8004ef6:	e7d0      	b.n	8004e9a <__ieee754_pow+0x2a>
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	da3b      	bge.n	8004f74 <__ieee754_pow+0x104>
 8004efc:	4b72      	ldr	r3, [pc, #456]	; (80050c8 <__ieee754_pow+0x258>)
 8004efe:	4598      	cmp	r8, r3
 8004f00:	dc51      	bgt.n	8004fa6 <__ieee754_pow+0x136>
 8004f02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004f06:	4598      	cmp	r8, r3
 8004f08:	f340 84ac 	ble.w	8005864 <__ieee754_pow+0x9f4>
 8004f0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f14:	2b14      	cmp	r3, #20
 8004f16:	dd0f      	ble.n	8004f38 <__ieee754_pow+0xc8>
 8004f18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f1c:	fa22 f103 	lsr.w	r1, r2, r3
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f040 849d 	bne.w	8005864 <__ieee754_pow+0x9f4>
 8004f2a:	f001 0101 	and.w	r1, r1, #1
 8004f2e:	f1c1 0302 	rsb	r3, r1, #2
 8004f32:	9304      	str	r3, [sp, #16]
 8004f34:	b182      	cbz	r2, 8004f58 <__ieee754_pow+0xe8>
 8004f36:	e05f      	b.n	8004ff8 <__ieee754_pow+0x188>
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	d15b      	bne.n	8004ff4 <__ieee754_pow+0x184>
 8004f3c:	f1c3 0314 	rsb	r3, r3, #20
 8004f40:	fa48 f103 	asr.w	r1, r8, r3
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	4543      	cmp	r3, r8
 8004f4a:	f040 8488 	bne.w	800585e <__ieee754_pow+0x9ee>
 8004f4e:	f001 0101 	and.w	r1, r1, #1
 8004f52:	f1c1 0302 	rsb	r3, r1, #2
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <__ieee754_pow+0x25c>)
 8004f5a:	4598      	cmp	r8, r3
 8004f5c:	d132      	bne.n	8004fc4 <__ieee754_pow+0x154>
 8004f5e:	f1b9 0f00 	cmp.w	r9, #0
 8004f62:	f280 8478 	bge.w	8005856 <__ieee754_pow+0x9e6>
 8004f66:	4959      	ldr	r1, [pc, #356]	; (80050cc <__ieee754_pow+0x25c>)
 8004f68:	4632      	mov	r2, r6
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fb fc11 	bl	8000794 <__aeabi_ddiv>
 8004f72:	e79c      	b.n	8004eae <__ieee754_pow+0x3e>
 8004f74:	2300      	movs	r3, #0
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	d13d      	bne.n	8004ff8 <__ieee754_pow+0x188>
 8004f7c:	4b51      	ldr	r3, [pc, #324]	; (80050c4 <__ieee754_pow+0x254>)
 8004f7e:	4598      	cmp	r8, r3
 8004f80:	d1ea      	bne.n	8004f58 <__ieee754_pow+0xe8>
 8004f82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004f86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8004f8e:	f000 845a 	beq.w	8005846 <__ieee754_pow+0x9d6>
 8004f92:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <__ieee754_pow+0x260>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	dd08      	ble.n	8004faa <__ieee754_pow+0x13a>
 8004f98:	f1b9 0f00 	cmp.w	r9, #0
 8004f9c:	f2c0 8457 	blt.w	800584e <__ieee754_pow+0x9de>
 8004fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa4:	e783      	b.n	8004eae <__ieee754_pow+0x3e>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e7e5      	b.n	8004f76 <__ieee754_pow+0x106>
 8004faa:	f1b9 0f00 	cmp.w	r9, #0
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	f6bf af7a 	bge.w	8004eae <__ieee754_pow+0x3e>
 8004fba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004fbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004fc2:	e774      	b.n	8004eae <__ieee754_pow+0x3e>
 8004fc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004fc8:	d106      	bne.n	8004fd8 <__ieee754_pow+0x168>
 8004fca:	4632      	mov	r2, r6
 8004fcc:	463b      	mov	r3, r7
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	f7fb fab5 	bl	8000540 <__aeabi_dmul>
 8004fd6:	e76a      	b.n	8004eae <__ieee754_pow+0x3e>
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <__ieee754_pow+0x264>)
 8004fda:	4599      	cmp	r9, r3
 8004fdc:	d10c      	bne.n	8004ff8 <__ieee754_pow+0x188>
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	db0a      	blt.n	8004ff8 <__ieee754_pow+0x188>
 8004fe2:	ec47 6b10 	vmov	d0, r6, r7
 8004fe6:	b009      	add	sp, #36	; 0x24
 8004fe8:	ecbd 8b06 	vpop	{d8-d10}
 8004fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	f000 bc6c 	b.w	80058cc <__ieee754_sqrt>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	ec47 6b10 	vmov	d0, r6, r7
 8004ffc:	f000 fd48 	bl	8005a90 <fabs>
 8005000:	ec51 0b10 	vmov	r0, r1, d0
 8005004:	f1ba 0f00 	cmp.w	sl, #0
 8005008:	d129      	bne.n	800505e <__ieee754_pow+0x1ee>
 800500a:	b124      	cbz	r4, 8005016 <__ieee754_pow+0x1a6>
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <__ieee754_pow+0x25c>)
 800500e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005012:	429a      	cmp	r2, r3
 8005014:	d123      	bne.n	800505e <__ieee754_pow+0x1ee>
 8005016:	f1b9 0f00 	cmp.w	r9, #0
 800501a:	da05      	bge.n	8005028 <__ieee754_pow+0x1b8>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	2000      	movs	r0, #0
 8005022:	492a      	ldr	r1, [pc, #168]	; (80050cc <__ieee754_pow+0x25c>)
 8005024:	f7fb fbb6 	bl	8000794 <__aeabi_ddiv>
 8005028:	2d00      	cmp	r5, #0
 800502a:	f6bf af40 	bge.w	8004eae <__ieee754_pow+0x3e>
 800502e:	9b04      	ldr	r3, [sp, #16]
 8005030:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005034:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005038:	4323      	orrs	r3, r4
 800503a:	d108      	bne.n	800504e <__ieee754_pow+0x1de>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	f7fb f8c4 	bl	80001d0 <__aeabi_dsub>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e78f      	b.n	8004f6e <__ieee754_pow+0xfe>
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	2b01      	cmp	r3, #1
 8005052:	f47f af2c 	bne.w	8004eae <__ieee754_pow+0x3e>
 8005056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800505a:	4619      	mov	r1, r3
 800505c:	e727      	b.n	8004eae <__ieee754_pow+0x3e>
 800505e:	0feb      	lsrs	r3, r5, #31
 8005060:	3b01      	subs	r3, #1
 8005062:	9306      	str	r3, [sp, #24]
 8005064:	9a06      	ldr	r2, [sp, #24]
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	d102      	bne.n	8005072 <__ieee754_pow+0x202>
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	e7e6      	b.n	8005040 <__ieee754_pow+0x1d0>
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <__ieee754_pow+0x268>)
 8005074:	4598      	cmp	r8, r3
 8005076:	f340 80fb 	ble.w	8005270 <__ieee754_pow+0x400>
 800507a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800507e:	4598      	cmp	r8, r3
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <__ieee754_pow+0x260>)
 8005082:	dd0c      	ble.n	800509e <__ieee754_pow+0x22e>
 8005084:	429c      	cmp	r4, r3
 8005086:	dc0f      	bgt.n	80050a8 <__ieee754_pow+0x238>
 8005088:	f1b9 0f00 	cmp.w	r9, #0
 800508c:	da0f      	bge.n	80050ae <__ieee754_pow+0x23e>
 800508e:	2000      	movs	r0, #0
 8005090:	b009      	add	sp, #36	; 0x24
 8005092:	ecbd 8b06 	vpop	{d8-d10}
 8005096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f000 bcf0 	b.w	8005a7e <__math_oflow>
 800509e:	429c      	cmp	r4, r3
 80050a0:	dbf2      	blt.n	8005088 <__ieee754_pow+0x218>
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <__ieee754_pow+0x25c>)
 80050a4:	429c      	cmp	r4, r3
 80050a6:	dd19      	ble.n	80050dc <__ieee754_pow+0x26c>
 80050a8:	f1b9 0f00 	cmp.w	r9, #0
 80050ac:	dcef      	bgt.n	800508e <__ieee754_pow+0x21e>
 80050ae:	2000      	movs	r0, #0
 80050b0:	b009      	add	sp, #36	; 0x24
 80050b2:	ecbd 8b06 	vpop	{d8-d10}
 80050b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ba:	f000 bcd7 	b.w	8005a6c <__math_uflow>
 80050be:	bf00      	nop
 80050c0:	fff00000 	.word	0xfff00000
 80050c4:	7ff00000 	.word	0x7ff00000
 80050c8:	433fffff 	.word	0x433fffff
 80050cc:	3ff00000 	.word	0x3ff00000
 80050d0:	3fefffff 	.word	0x3fefffff
 80050d4:	3fe00000 	.word	0x3fe00000
 80050d8:	41e00000 	.word	0x41e00000
 80050dc:	4b60      	ldr	r3, [pc, #384]	; (8005260 <__ieee754_pow+0x3f0>)
 80050de:	2200      	movs	r2, #0
 80050e0:	f7fb f876 	bl	80001d0 <__aeabi_dsub>
 80050e4:	a354      	add	r3, pc, #336	; (adr r3, 8005238 <__ieee754_pow+0x3c8>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	4604      	mov	r4, r0
 80050ec:	460d      	mov	r5, r1
 80050ee:	f7fb fa27 	bl	8000540 <__aeabi_dmul>
 80050f2:	a353      	add	r3, pc, #332	; (adr r3, 8005240 <__ieee754_pow+0x3d0>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	4606      	mov	r6, r0
 80050fa:	460f      	mov	r7, r1
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb fa1e 	bl	8000540 <__aeabi_dmul>
 8005104:	4b57      	ldr	r3, [pc, #348]	; (8005264 <__ieee754_pow+0x3f4>)
 8005106:	4682      	mov	sl, r0
 8005108:	468b      	mov	fp, r1
 800510a:	2200      	movs	r2, #0
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fa16 	bl	8000540 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	a14b      	add	r1, pc, #300	; (adr r1, 8005248 <__ieee754_pow+0x3d8>)
 800511a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800511e:	f7fb f857 	bl	80001d0 <__aeabi_dsub>
 8005122:	4622      	mov	r2, r4
 8005124:	462b      	mov	r3, r5
 8005126:	f7fb fa0b 	bl	8000540 <__aeabi_dmul>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	2000      	movs	r0, #0
 8005130:	494d      	ldr	r1, [pc, #308]	; (8005268 <__ieee754_pow+0x3f8>)
 8005132:	f7fb f84d 	bl	80001d0 <__aeabi_dsub>
 8005136:	4622      	mov	r2, r4
 8005138:	4680      	mov	r8, r0
 800513a:	4689      	mov	r9, r1
 800513c:	462b      	mov	r3, r5
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb f9fd 	bl	8000540 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4640      	mov	r0, r8
 800514c:	4649      	mov	r1, r9
 800514e:	f7fb f9f7 	bl	8000540 <__aeabi_dmul>
 8005152:	a33f      	add	r3, pc, #252	; (adr r3, 8005250 <__ieee754_pow+0x3e0>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f7fb f9f2 	bl	8000540 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4650      	mov	r0, sl
 8005162:	4659      	mov	r1, fp
 8005164:	f7fb f834 	bl	80001d0 <__aeabi_dsub>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4680      	mov	r8, r0
 800516e:	4689      	mov	r9, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb f82e 	bl	80001d4 <__adddf3>
 8005178:	2000      	movs	r0, #0
 800517a:	4632      	mov	r2, r6
 800517c:	463b      	mov	r3, r7
 800517e:	4604      	mov	r4, r0
 8005180:	460d      	mov	r5, r1
 8005182:	f7fb f825 	bl	80001d0 <__aeabi_dsub>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f7fb f81f 	bl	80001d0 <__aeabi_dsub>
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	9a06      	ldr	r2, [sp, #24]
 8005196:	3b01      	subs	r3, #1
 8005198:	4313      	orrs	r3, r2
 800519a:	4682      	mov	sl, r0
 800519c:	468b      	mov	fp, r1
 800519e:	f040 81e7 	bne.w	8005570 <__ieee754_pow+0x700>
 80051a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005258 <__ieee754_pow+0x3e8>
 80051a6:	eeb0 8a47 	vmov.f32	s16, s14
 80051aa:	eef0 8a67 	vmov.f32	s17, s15
 80051ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051b2:	2600      	movs	r6, #0
 80051b4:	4632      	mov	r2, r6
 80051b6:	463b      	mov	r3, r7
 80051b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051bc:	f7fb f808 	bl	80001d0 <__aeabi_dsub>
 80051c0:	4622      	mov	r2, r4
 80051c2:	462b      	mov	r3, r5
 80051c4:	f7fb f9bc 	bl	8000540 <__aeabi_dmul>
 80051c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051cc:	4680      	mov	r8, r0
 80051ce:	4689      	mov	r9, r1
 80051d0:	4650      	mov	r0, sl
 80051d2:	4659      	mov	r1, fp
 80051d4:	f7fb f9b4 	bl	8000540 <__aeabi_dmul>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4640      	mov	r0, r8
 80051de:	4649      	mov	r1, r9
 80051e0:	f7fa fff8 	bl	80001d4 <__adddf3>
 80051e4:	4632      	mov	r2, r6
 80051e6:	463b      	mov	r3, r7
 80051e8:	4680      	mov	r8, r0
 80051ea:	4689      	mov	r9, r1
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb f9a6 	bl	8000540 <__aeabi_dmul>
 80051f4:	460b      	mov	r3, r1
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	4602      	mov	r2, r0
 80051fc:	4649      	mov	r1, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	f7fa ffe8 	bl	80001d4 <__adddf3>
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <__ieee754_pow+0x3fc>)
 8005206:	4299      	cmp	r1, r3
 8005208:	ec45 4b19 	vmov	d9, r4, r5
 800520c:	4606      	mov	r6, r0
 800520e:	460f      	mov	r7, r1
 8005210:	468b      	mov	fp, r1
 8005212:	f340 82f1 	ble.w	80057f8 <__ieee754_pow+0x988>
 8005216:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800521a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800521e:	4303      	orrs	r3, r0
 8005220:	f000 81e4 	beq.w	80055ec <__ieee754_pow+0x77c>
 8005224:	ec51 0b18 	vmov	r0, r1, d8
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fbfa 	bl	8000a24 <__aeabi_dcmplt>
 8005230:	3800      	subs	r0, #0
 8005232:	bf18      	it	ne
 8005234:	2001      	movne	r0, #1
 8005236:	e72b      	b.n	8005090 <__ieee754_pow+0x220>
 8005238:	60000000 	.word	0x60000000
 800523c:	3ff71547 	.word	0x3ff71547
 8005240:	f85ddf44 	.word	0xf85ddf44
 8005244:	3e54ae0b 	.word	0x3e54ae0b
 8005248:	55555555 	.word	0x55555555
 800524c:	3fd55555 	.word	0x3fd55555
 8005250:	652b82fe 	.word	0x652b82fe
 8005254:	3ff71547 	.word	0x3ff71547
 8005258:	00000000 	.word	0x00000000
 800525c:	bff00000 	.word	0xbff00000
 8005260:	3ff00000 	.word	0x3ff00000
 8005264:	3fd00000 	.word	0x3fd00000
 8005268:	3fe00000 	.word	0x3fe00000
 800526c:	408fffff 	.word	0x408fffff
 8005270:	4bd5      	ldr	r3, [pc, #852]	; (80055c8 <__ieee754_pow+0x758>)
 8005272:	402b      	ands	r3, r5
 8005274:	2200      	movs	r2, #0
 8005276:	b92b      	cbnz	r3, 8005284 <__ieee754_pow+0x414>
 8005278:	4bd4      	ldr	r3, [pc, #848]	; (80055cc <__ieee754_pow+0x75c>)
 800527a:	f7fb f961 	bl	8000540 <__aeabi_dmul>
 800527e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005282:	460c      	mov	r4, r1
 8005284:	1523      	asrs	r3, r4, #20
 8005286:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800528a:	4413      	add	r3, r2
 800528c:	9305      	str	r3, [sp, #20]
 800528e:	4bd0      	ldr	r3, [pc, #832]	; (80055d0 <__ieee754_pow+0x760>)
 8005290:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005294:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005298:	429c      	cmp	r4, r3
 800529a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800529e:	dd08      	ble.n	80052b2 <__ieee754_pow+0x442>
 80052a0:	4bcc      	ldr	r3, [pc, #816]	; (80055d4 <__ieee754_pow+0x764>)
 80052a2:	429c      	cmp	r4, r3
 80052a4:	f340 8162 	ble.w	800556c <__ieee754_pow+0x6fc>
 80052a8:	9b05      	ldr	r3, [sp, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80052b2:	2400      	movs	r4, #0
 80052b4:	00e3      	lsls	r3, r4, #3
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	4bc7      	ldr	r3, [pc, #796]	; (80055d8 <__ieee754_pow+0x768>)
 80052ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052be:	ed93 7b00 	vldr	d7, [r3]
 80052c2:	4629      	mov	r1, r5
 80052c4:	ec53 2b17 	vmov	r2, r3, d7
 80052c8:	eeb0 9a47 	vmov.f32	s18, s14
 80052cc:	eef0 9a67 	vmov.f32	s19, s15
 80052d0:	4682      	mov	sl, r0
 80052d2:	f7fa ff7d 	bl	80001d0 <__aeabi_dsub>
 80052d6:	4652      	mov	r2, sl
 80052d8:	4606      	mov	r6, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	462b      	mov	r3, r5
 80052de:	ec51 0b19 	vmov	r0, r1, d9
 80052e2:	f7fa ff77 	bl	80001d4 <__adddf3>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	2000      	movs	r0, #0
 80052ec:	49bb      	ldr	r1, [pc, #748]	; (80055dc <__ieee754_pow+0x76c>)
 80052ee:	f7fb fa51 	bl	8000794 <__aeabi_ddiv>
 80052f2:	ec41 0b1a 	vmov	d10, r0, r1
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4630      	mov	r0, r6
 80052fc:	4639      	mov	r1, r7
 80052fe:	f7fb f91f 	bl	8000540 <__aeabi_dmul>
 8005302:	2300      	movs	r3, #0
 8005304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800530e:	46ab      	mov	fp, r5
 8005310:	106d      	asrs	r5, r5, #1
 8005312:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005316:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800531a:	ec41 0b18 	vmov	d8, r0, r1
 800531e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005322:	2200      	movs	r2, #0
 8005324:	4640      	mov	r0, r8
 8005326:	4649      	mov	r1, r9
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	f7fb f908 	bl	8000540 <__aeabi_dmul>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4630      	mov	r0, r6
 8005336:	4639      	mov	r1, r7
 8005338:	f7fa ff4a 	bl	80001d0 <__aeabi_dsub>
 800533c:	ec53 2b19 	vmov	r2, r3, d9
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fa ff42 	bl	80001d0 <__aeabi_dsub>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4650      	mov	r0, sl
 8005352:	4659      	mov	r1, fp
 8005354:	f7fa ff3c 	bl	80001d0 <__aeabi_dsub>
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	f7fb f8f0 	bl	8000540 <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	f7fa ff32 	bl	80001d0 <__aeabi_dsub>
 800536c:	ec53 2b1a 	vmov	r2, r3, d10
 8005370:	f7fb f8e6 	bl	8000540 <__aeabi_dmul>
 8005374:	ec53 2b18 	vmov	r2, r3, d8
 8005378:	ec41 0b19 	vmov	d9, r0, r1
 800537c:	ec51 0b18 	vmov	r0, r1, d8
 8005380:	f7fb f8de 	bl	8000540 <__aeabi_dmul>
 8005384:	a37c      	add	r3, pc, #496	; (adr r3, 8005578 <__ieee754_pow+0x708>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	f7fb f8d7 	bl	8000540 <__aeabi_dmul>
 8005392:	a37b      	add	r3, pc, #492	; (adr r3, 8005580 <__ieee754_pow+0x710>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa ff1c 	bl	80001d4 <__adddf3>
 800539c:	4622      	mov	r2, r4
 800539e:	462b      	mov	r3, r5
 80053a0:	f7fb f8ce 	bl	8000540 <__aeabi_dmul>
 80053a4:	a378      	add	r3, pc, #480	; (adr r3, 8005588 <__ieee754_pow+0x718>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa ff13 	bl	80001d4 <__adddf3>
 80053ae:	4622      	mov	r2, r4
 80053b0:	462b      	mov	r3, r5
 80053b2:	f7fb f8c5 	bl	8000540 <__aeabi_dmul>
 80053b6:	a376      	add	r3, pc, #472	; (adr r3, 8005590 <__ieee754_pow+0x720>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f7fa ff0a 	bl	80001d4 <__adddf3>
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	f7fb f8bc 	bl	8000540 <__aeabi_dmul>
 80053c8:	a373      	add	r3, pc, #460	; (adr r3, 8005598 <__ieee754_pow+0x728>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fa ff01 	bl	80001d4 <__adddf3>
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	f7fb f8b3 	bl	8000540 <__aeabi_dmul>
 80053da:	a371      	add	r3, pc, #452	; (adr r3, 80055a0 <__ieee754_pow+0x730>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f7fa fef8 	bl	80001d4 <__adddf3>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	462b      	mov	r3, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7fb f8a6 	bl	8000540 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4630      	mov	r0, r6
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fb f8a0 	bl	8000540 <__aeabi_dmul>
 8005400:	4642      	mov	r2, r8
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	464b      	mov	r3, r9
 8005408:	ec51 0b18 	vmov	r0, r1, d8
 800540c:	f7fa fee2 	bl	80001d4 <__adddf3>
 8005410:	ec53 2b19 	vmov	r2, r3, d9
 8005414:	f7fb f894 	bl	8000540 <__aeabi_dmul>
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	f7fa feda 	bl	80001d4 <__adddf3>
 8005420:	4642      	mov	r2, r8
 8005422:	4682      	mov	sl, r0
 8005424:	468b      	mov	fp, r1
 8005426:	464b      	mov	r3, r9
 8005428:	4640      	mov	r0, r8
 800542a:	4649      	mov	r1, r9
 800542c:	f7fb f888 	bl	8000540 <__aeabi_dmul>
 8005430:	4b6b      	ldr	r3, [pc, #428]	; (80055e0 <__ieee754_pow+0x770>)
 8005432:	2200      	movs	r2, #0
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	f7fa fecc 	bl	80001d4 <__adddf3>
 800543c:	4652      	mov	r2, sl
 800543e:	465b      	mov	r3, fp
 8005440:	f7fa fec8 	bl	80001d4 <__adddf3>
 8005444:	2000      	movs	r0, #0
 8005446:	4604      	mov	r4, r0
 8005448:	460d      	mov	r5, r1
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f7fb f875 	bl	8000540 <__aeabi_dmul>
 8005456:	4b62      	ldr	r3, [pc, #392]	; (80055e0 <__ieee754_pow+0x770>)
 8005458:	4680      	mov	r8, r0
 800545a:	4689      	mov	r9, r1
 800545c:	2200      	movs	r2, #0
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fa feb5 	bl	80001d0 <__aeabi_dsub>
 8005466:	4632      	mov	r2, r6
 8005468:	463b      	mov	r3, r7
 800546a:	f7fa feb1 	bl	80001d0 <__aeabi_dsub>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	f7fa feab 	bl	80001d0 <__aeabi_dsub>
 800547a:	ec53 2b18 	vmov	r2, r3, d8
 800547e:	f7fb f85f 	bl	8000540 <__aeabi_dmul>
 8005482:	4622      	mov	r2, r4
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	462b      	mov	r3, r5
 800548a:	ec51 0b19 	vmov	r0, r1, d9
 800548e:	f7fb f857 	bl	8000540 <__aeabi_dmul>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	f7fa fe9b 	bl	80001d4 <__adddf3>
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4640      	mov	r0, r8
 80054a8:	4649      	mov	r1, r9
 80054aa:	f7fa fe93 	bl	80001d4 <__adddf3>
 80054ae:	a33e      	add	r3, pc, #248	; (adr r3, 80055a8 <__ieee754_pow+0x738>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	2000      	movs	r0, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	460d      	mov	r5, r1
 80054ba:	f7fb f841 	bl	8000540 <__aeabi_dmul>
 80054be:	4642      	mov	r2, r8
 80054c0:	ec41 0b18 	vmov	d8, r0, r1
 80054c4:	464b      	mov	r3, r9
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	f7fa fe81 	bl	80001d0 <__aeabi_dsub>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4630      	mov	r0, r6
 80054d4:	4639      	mov	r1, r7
 80054d6:	f7fa fe7b 	bl	80001d0 <__aeabi_dsub>
 80054da:	a335      	add	r3, pc, #212	; (adr r3, 80055b0 <__ieee754_pow+0x740>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fb f82e 	bl	8000540 <__aeabi_dmul>
 80054e4:	a334      	add	r3, pc, #208	; (adr r3, 80055b8 <__ieee754_pow+0x748>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb f825 	bl	8000540 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4630      	mov	r0, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	f7fa fe69 	bl	80001d4 <__adddf3>
 8005502:	9a07      	ldr	r2, [sp, #28]
 8005504:	4b37      	ldr	r3, [pc, #220]	; (80055e4 <__ieee754_pow+0x774>)
 8005506:	4413      	add	r3, r2
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f7fa fe62 	bl	80001d4 <__adddf3>
 8005510:	4682      	mov	sl, r0
 8005512:	9805      	ldr	r0, [sp, #20]
 8005514:	468b      	mov	fp, r1
 8005516:	f7fa ffa9 	bl	800046c <__aeabi_i2d>
 800551a:	9a07      	ldr	r2, [sp, #28]
 800551c:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <__ieee754_pow+0x778>)
 800551e:	4413      	add	r3, r2
 8005520:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005524:	4606      	mov	r6, r0
 8005526:	460f      	mov	r7, r1
 8005528:	4652      	mov	r2, sl
 800552a:	465b      	mov	r3, fp
 800552c:	ec51 0b18 	vmov	r0, r1, d8
 8005530:	f7fa fe50 	bl	80001d4 <__adddf3>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f7fa fe4c 	bl	80001d4 <__adddf3>
 800553c:	4632      	mov	r2, r6
 800553e:	463b      	mov	r3, r7
 8005540:	f7fa fe48 	bl	80001d4 <__adddf3>
 8005544:	2000      	movs	r0, #0
 8005546:	4632      	mov	r2, r6
 8005548:	463b      	mov	r3, r7
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	f7fa fe3f 	bl	80001d0 <__aeabi_dsub>
 8005552:	4642      	mov	r2, r8
 8005554:	464b      	mov	r3, r9
 8005556:	f7fa fe3b 	bl	80001d0 <__aeabi_dsub>
 800555a:	ec53 2b18 	vmov	r2, r3, d8
 800555e:	f7fa fe37 	bl	80001d0 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4650      	mov	r0, sl
 8005568:	4659      	mov	r1, fp
 800556a:	e610      	b.n	800518e <__ieee754_pow+0x31e>
 800556c:	2401      	movs	r4, #1
 800556e:	e6a1      	b.n	80052b4 <__ieee754_pow+0x444>
 8005570:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80055c0 <__ieee754_pow+0x750>
 8005574:	e617      	b.n	80051a6 <__ieee754_pow+0x336>
 8005576:	bf00      	nop
 8005578:	4a454eef 	.word	0x4a454eef
 800557c:	3fca7e28 	.word	0x3fca7e28
 8005580:	93c9db65 	.word	0x93c9db65
 8005584:	3fcd864a 	.word	0x3fcd864a
 8005588:	a91d4101 	.word	0xa91d4101
 800558c:	3fd17460 	.word	0x3fd17460
 8005590:	518f264d 	.word	0x518f264d
 8005594:	3fd55555 	.word	0x3fd55555
 8005598:	db6fabff 	.word	0xdb6fabff
 800559c:	3fdb6db6 	.word	0x3fdb6db6
 80055a0:	33333303 	.word	0x33333303
 80055a4:	3fe33333 	.word	0x3fe33333
 80055a8:	e0000000 	.word	0xe0000000
 80055ac:	3feec709 	.word	0x3feec709
 80055b0:	dc3a03fd 	.word	0xdc3a03fd
 80055b4:	3feec709 	.word	0x3feec709
 80055b8:	145b01f5 	.word	0x145b01f5
 80055bc:	be3e2fe0 	.word	0xbe3e2fe0
 80055c0:	00000000 	.word	0x00000000
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	7ff00000 	.word	0x7ff00000
 80055cc:	43400000 	.word	0x43400000
 80055d0:	0003988e 	.word	0x0003988e
 80055d4:	000bb679 	.word	0x000bb679
 80055d8:	08005c30 	.word	0x08005c30
 80055dc:	3ff00000 	.word	0x3ff00000
 80055e0:	40080000 	.word	0x40080000
 80055e4:	08005c50 	.word	0x08005c50
 80055e8:	08005c40 	.word	0x08005c40
 80055ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80058c4 <__ieee754_pow+0xa54>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	4640      	mov	r0, r8
 80055f4:	4649      	mov	r1, r9
 80055f6:	f7fa fded 	bl	80001d4 <__adddf3>
 80055fa:	4622      	mov	r2, r4
 80055fc:	ec41 0b1a 	vmov	d10, r0, r1
 8005600:	462b      	mov	r3, r5
 8005602:	4630      	mov	r0, r6
 8005604:	4639      	mov	r1, r7
 8005606:	f7fa fde3 	bl	80001d0 <__aeabi_dsub>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	ec51 0b1a 	vmov	r0, r1, d10
 8005612:	f7fb fa25 	bl	8000a60 <__aeabi_dcmpgt>
 8005616:	2800      	cmp	r0, #0
 8005618:	f47f ae04 	bne.w	8005224 <__ieee754_pow+0x3b4>
 800561c:	4aa4      	ldr	r2, [pc, #656]	; (80058b0 <__ieee754_pow+0xa40>)
 800561e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005622:	4293      	cmp	r3, r2
 8005624:	f340 8108 	ble.w	8005838 <__ieee754_pow+0x9c8>
 8005628:	151b      	asrs	r3, r3, #20
 800562a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800562e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005632:	fa4a f303 	asr.w	r3, sl, r3
 8005636:	445b      	add	r3, fp
 8005638:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800563c:	4e9d      	ldr	r6, [pc, #628]	; (80058b4 <__ieee754_pow+0xa44>)
 800563e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005642:	4116      	asrs	r6, r2
 8005644:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005648:	2000      	movs	r0, #0
 800564a:	ea23 0106 	bic.w	r1, r3, r6
 800564e:	f1c2 0214 	rsb	r2, r2, #20
 8005652:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005656:	fa4a fa02 	asr.w	sl, sl, r2
 800565a:	f1bb 0f00 	cmp.w	fp, #0
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4620      	mov	r0, r4
 8005664:	4629      	mov	r1, r5
 8005666:	bfb8      	it	lt
 8005668:	f1ca 0a00 	rsblt	sl, sl, #0
 800566c:	f7fa fdb0 	bl	80001d0 <__aeabi_dsub>
 8005670:	ec41 0b19 	vmov	d9, r0, r1
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	ec51 0b19 	vmov	r0, r1, d9
 800567c:	f7fa fdaa 	bl	80001d4 <__adddf3>
 8005680:	a37b      	add	r3, pc, #492	; (adr r3, 8005870 <__ieee754_pow+0xa00>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	2000      	movs	r0, #0
 8005688:	4604      	mov	r4, r0
 800568a:	460d      	mov	r5, r1
 800568c:	f7fa ff58 	bl	8000540 <__aeabi_dmul>
 8005690:	ec53 2b19 	vmov	r2, r3, d9
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fd98 	bl	80001d0 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fd92 	bl	80001d0 <__aeabi_dsub>
 80056ac:	a372      	add	r3, pc, #456	; (adr r3, 8005878 <__ieee754_pow+0xa08>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa ff45 	bl	8000540 <__aeabi_dmul>
 80056b6:	a372      	add	r3, pc, #456	; (adr r3, 8005880 <__ieee754_pow+0xa10>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4680      	mov	r8, r0
 80056be:	4689      	mov	r9, r1
 80056c0:	4620      	mov	r0, r4
 80056c2:	4629      	mov	r1, r5
 80056c4:	f7fa ff3c 	bl	8000540 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fa fd80 	bl	80001d4 <__adddf3>
 80056d4:	4604      	mov	r4, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4630      	mov	r0, r6
 80056de:	4639      	mov	r1, r7
 80056e0:	f7fa fd78 	bl	80001d4 <__adddf3>
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	4680      	mov	r8, r0
 80056ea:	4689      	mov	r9, r1
 80056ec:	f7fa fd70 	bl	80001d0 <__aeabi_dsub>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa fd6a 	bl	80001d0 <__aeabi_dsub>
 80056fc:	4642      	mov	r2, r8
 80056fe:	4606      	mov	r6, r0
 8005700:	460f      	mov	r7, r1
 8005702:	464b      	mov	r3, r9
 8005704:	4640      	mov	r0, r8
 8005706:	4649      	mov	r1, r9
 8005708:	f7fa ff1a 	bl	8000540 <__aeabi_dmul>
 800570c:	a35e      	add	r3, pc, #376	; (adr r3, 8005888 <__ieee754_pow+0xa18>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	4604      	mov	r4, r0
 8005714:	460d      	mov	r5, r1
 8005716:	f7fa ff13 	bl	8000540 <__aeabi_dmul>
 800571a:	a35d      	add	r3, pc, #372	; (adr r3, 8005890 <__ieee754_pow+0xa20>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa fd56 	bl	80001d0 <__aeabi_dsub>
 8005724:	4622      	mov	r2, r4
 8005726:	462b      	mov	r3, r5
 8005728:	f7fa ff0a 	bl	8000540 <__aeabi_dmul>
 800572c:	a35a      	add	r3, pc, #360	; (adr r3, 8005898 <__ieee754_pow+0xa28>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fa fd4f 	bl	80001d4 <__adddf3>
 8005736:	4622      	mov	r2, r4
 8005738:	462b      	mov	r3, r5
 800573a:	f7fa ff01 	bl	8000540 <__aeabi_dmul>
 800573e:	a358      	add	r3, pc, #352	; (adr r3, 80058a0 <__ieee754_pow+0xa30>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fd44 	bl	80001d0 <__aeabi_dsub>
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	f7fa fef8 	bl	8000540 <__aeabi_dmul>
 8005750:	a355      	add	r3, pc, #340	; (adr r3, 80058a8 <__ieee754_pow+0xa38>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa fd3d 	bl	80001d4 <__adddf3>
 800575a:	4622      	mov	r2, r4
 800575c:	462b      	mov	r3, r5
 800575e:	f7fa feef 	bl	8000540 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4640      	mov	r0, r8
 8005768:	4649      	mov	r1, r9
 800576a:	f7fa fd31 	bl	80001d0 <__aeabi_dsub>
 800576e:	4604      	mov	r4, r0
 8005770:	460d      	mov	r5, r1
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fee1 	bl	8000540 <__aeabi_dmul>
 800577e:	2200      	movs	r2, #0
 8005780:	ec41 0b19 	vmov	d9, r0, r1
 8005784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005788:	4620      	mov	r0, r4
 800578a:	4629      	mov	r1, r5
 800578c:	f7fa fd20 	bl	80001d0 <__aeabi_dsub>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	ec51 0b19 	vmov	r0, r1, d9
 8005798:	f7fa fffc 	bl	8000794 <__aeabi_ddiv>
 800579c:	4632      	mov	r2, r6
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	463b      	mov	r3, r7
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fa feca 	bl	8000540 <__aeabi_dmul>
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	f7fa fd10 	bl	80001d4 <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fd08 	bl	80001d0 <__aeabi_dsub>
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	f7fa fd04 	bl	80001d0 <__aeabi_dsub>
 80057c8:	460b      	mov	r3, r1
 80057ca:	4602      	mov	r2, r0
 80057cc:	493a      	ldr	r1, [pc, #232]	; (80058b8 <__ieee754_pow+0xa48>)
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7fa fcfe 	bl	80001d0 <__aeabi_dsub>
 80057d4:	ec41 0b10 	vmov	d0, r0, r1
 80057d8:	ee10 3a90 	vmov	r3, s1
 80057dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80057e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e4:	da2b      	bge.n	800583e <__ieee754_pow+0x9ce>
 80057e6:	4650      	mov	r0, sl
 80057e8:	f000 f966 	bl	8005ab8 <scalbn>
 80057ec:	ec51 0b10 	vmov	r0, r1, d0
 80057f0:	ec53 2b18 	vmov	r2, r3, d8
 80057f4:	f7ff bbed 	b.w	8004fd2 <__ieee754_pow+0x162>
 80057f8:	4b30      	ldr	r3, [pc, #192]	; (80058bc <__ieee754_pow+0xa4c>)
 80057fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80057fe:	429e      	cmp	r6, r3
 8005800:	f77f af0c 	ble.w	800561c <__ieee754_pow+0x7ac>
 8005804:	4b2e      	ldr	r3, [pc, #184]	; (80058c0 <__ieee754_pow+0xa50>)
 8005806:	440b      	add	r3, r1
 8005808:	4303      	orrs	r3, r0
 800580a:	d009      	beq.n	8005820 <__ieee754_pow+0x9b0>
 800580c:	ec51 0b18 	vmov	r0, r1, d8
 8005810:	2200      	movs	r2, #0
 8005812:	2300      	movs	r3, #0
 8005814:	f7fb f906 	bl	8000a24 <__aeabi_dcmplt>
 8005818:	3800      	subs	r0, #0
 800581a:	bf18      	it	ne
 800581c:	2001      	movne	r0, #1
 800581e:	e447      	b.n	80050b0 <__ieee754_pow+0x240>
 8005820:	4622      	mov	r2, r4
 8005822:	462b      	mov	r3, r5
 8005824:	f7fa fcd4 	bl	80001d0 <__aeabi_dsub>
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	f7fb f90e 	bl	8000a4c <__aeabi_dcmpge>
 8005830:	2800      	cmp	r0, #0
 8005832:	f43f aef3 	beq.w	800561c <__ieee754_pow+0x7ac>
 8005836:	e7e9      	b.n	800580c <__ieee754_pow+0x99c>
 8005838:	f04f 0a00 	mov.w	sl, #0
 800583c:	e71a      	b.n	8005674 <__ieee754_pow+0x804>
 800583e:	ec51 0b10 	vmov	r0, r1, d0
 8005842:	4619      	mov	r1, r3
 8005844:	e7d4      	b.n	80057f0 <__ieee754_pow+0x980>
 8005846:	491c      	ldr	r1, [pc, #112]	; (80058b8 <__ieee754_pow+0xa48>)
 8005848:	2000      	movs	r0, #0
 800584a:	f7ff bb30 	b.w	8004eae <__ieee754_pow+0x3e>
 800584e:	2000      	movs	r0, #0
 8005850:	2100      	movs	r1, #0
 8005852:	f7ff bb2c 	b.w	8004eae <__ieee754_pow+0x3e>
 8005856:	4630      	mov	r0, r6
 8005858:	4639      	mov	r1, r7
 800585a:	f7ff bb28 	b.w	8004eae <__ieee754_pow+0x3e>
 800585e:	9204      	str	r2, [sp, #16]
 8005860:	f7ff bb7a 	b.w	8004f58 <__ieee754_pow+0xe8>
 8005864:	2300      	movs	r3, #0
 8005866:	f7ff bb64 	b.w	8004f32 <__ieee754_pow+0xc2>
 800586a:	bf00      	nop
 800586c:	f3af 8000 	nop.w
 8005870:	00000000 	.word	0x00000000
 8005874:	3fe62e43 	.word	0x3fe62e43
 8005878:	fefa39ef 	.word	0xfefa39ef
 800587c:	3fe62e42 	.word	0x3fe62e42
 8005880:	0ca86c39 	.word	0x0ca86c39
 8005884:	be205c61 	.word	0xbe205c61
 8005888:	72bea4d0 	.word	0x72bea4d0
 800588c:	3e663769 	.word	0x3e663769
 8005890:	c5d26bf1 	.word	0xc5d26bf1
 8005894:	3ebbbd41 	.word	0x3ebbbd41
 8005898:	af25de2c 	.word	0xaf25de2c
 800589c:	3f11566a 	.word	0x3f11566a
 80058a0:	16bebd93 	.word	0x16bebd93
 80058a4:	3f66c16c 	.word	0x3f66c16c
 80058a8:	5555553e 	.word	0x5555553e
 80058ac:	3fc55555 	.word	0x3fc55555
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	000fffff 	.word	0x000fffff
 80058b8:	3ff00000 	.word	0x3ff00000
 80058bc:	4090cbff 	.word	0x4090cbff
 80058c0:	3f6f3400 	.word	0x3f6f3400
 80058c4:	652b82fe 	.word	0x652b82fe
 80058c8:	3c971547 	.word	0x3c971547

080058cc <__ieee754_sqrt>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	ec55 4b10 	vmov	r4, r5, d0
 80058d4:	4e55      	ldr	r6, [pc, #340]	; (8005a2c <__ieee754_sqrt+0x160>)
 80058d6:	43ae      	bics	r6, r5
 80058d8:	ee10 0a10 	vmov	r0, s0
 80058dc:	ee10 3a10 	vmov	r3, s0
 80058e0:	462a      	mov	r2, r5
 80058e2:	4629      	mov	r1, r5
 80058e4:	d110      	bne.n	8005908 <__ieee754_sqrt+0x3c>
 80058e6:	ee10 2a10 	vmov	r2, s0
 80058ea:	462b      	mov	r3, r5
 80058ec:	f7fa fe28 	bl	8000540 <__aeabi_dmul>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fc6c 	bl	80001d4 <__adddf3>
 80058fc:	4604      	mov	r4, r0
 80058fe:	460d      	mov	r5, r1
 8005900:	ec45 4b10 	vmov	d0, r4, r5
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	2d00      	cmp	r5, #0
 800590a:	dc10      	bgt.n	800592e <__ieee754_sqrt+0x62>
 800590c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005910:	4330      	orrs	r0, r6
 8005912:	d0f5      	beq.n	8005900 <__ieee754_sqrt+0x34>
 8005914:	b15d      	cbz	r5, 800592e <__ieee754_sqrt+0x62>
 8005916:	ee10 2a10 	vmov	r2, s0
 800591a:	462b      	mov	r3, r5
 800591c:	ee10 0a10 	vmov	r0, s0
 8005920:	f7fa fc56 	bl	80001d0 <__aeabi_dsub>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	f7fa ff34 	bl	8000794 <__aeabi_ddiv>
 800592c:	e7e6      	b.n	80058fc <__ieee754_sqrt+0x30>
 800592e:	1512      	asrs	r2, r2, #20
 8005930:	d074      	beq.n	8005a1c <__ieee754_sqrt+0x150>
 8005932:	07d4      	lsls	r4, r2, #31
 8005934:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005938:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800593c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005940:	bf5e      	ittt	pl
 8005942:	0fda      	lsrpl	r2, r3, #31
 8005944:	005b      	lslpl	r3, r3, #1
 8005946:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800594a:	2400      	movs	r4, #0
 800594c:	0fda      	lsrs	r2, r3, #31
 800594e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005952:	107f      	asrs	r7, r7, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2516      	movs	r5, #22
 8005958:	4620      	mov	r0, r4
 800595a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800595e:	1886      	adds	r6, r0, r2
 8005960:	428e      	cmp	r6, r1
 8005962:	bfde      	ittt	le
 8005964:	1b89      	suble	r1, r1, r6
 8005966:	18b0      	addle	r0, r6, r2
 8005968:	18a4      	addle	r4, r4, r2
 800596a:	0049      	lsls	r1, r1, #1
 800596c:	3d01      	subs	r5, #1
 800596e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005972:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005976:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800597a:	d1f0      	bne.n	800595e <__ieee754_sqrt+0x92>
 800597c:	462a      	mov	r2, r5
 800597e:	f04f 0e20 	mov.w	lr, #32
 8005982:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005986:	4281      	cmp	r1, r0
 8005988:	eb06 0c05 	add.w	ip, r6, r5
 800598c:	dc02      	bgt.n	8005994 <__ieee754_sqrt+0xc8>
 800598e:	d113      	bne.n	80059b8 <__ieee754_sqrt+0xec>
 8005990:	459c      	cmp	ip, r3
 8005992:	d811      	bhi.n	80059b8 <__ieee754_sqrt+0xec>
 8005994:	f1bc 0f00 	cmp.w	ip, #0
 8005998:	eb0c 0506 	add.w	r5, ip, r6
 800599c:	da43      	bge.n	8005a26 <__ieee754_sqrt+0x15a>
 800599e:	2d00      	cmp	r5, #0
 80059a0:	db41      	blt.n	8005a26 <__ieee754_sqrt+0x15a>
 80059a2:	f100 0801 	add.w	r8, r0, #1
 80059a6:	1a09      	subs	r1, r1, r0
 80059a8:	459c      	cmp	ip, r3
 80059aa:	bf88      	it	hi
 80059ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80059b0:	eba3 030c 	sub.w	r3, r3, ip
 80059b4:	4432      	add	r2, r6
 80059b6:	4640      	mov	r0, r8
 80059b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80059bc:	f1be 0e01 	subs.w	lr, lr, #1
 80059c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80059c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059cc:	d1db      	bne.n	8005986 <__ieee754_sqrt+0xba>
 80059ce:	430b      	orrs	r3, r1
 80059d0:	d006      	beq.n	80059e0 <__ieee754_sqrt+0x114>
 80059d2:	1c50      	adds	r0, r2, #1
 80059d4:	bf13      	iteet	ne
 80059d6:	3201      	addne	r2, #1
 80059d8:	3401      	addeq	r4, #1
 80059da:	4672      	moveq	r2, lr
 80059dc:	f022 0201 	bicne.w	r2, r2, #1
 80059e0:	1063      	asrs	r3, r4, #1
 80059e2:	0852      	lsrs	r2, r2, #1
 80059e4:	07e1      	lsls	r1, r4, #31
 80059e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80059ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80059ee:	bf48      	it	mi
 80059f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80059f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80059f8:	4614      	mov	r4, r2
 80059fa:	e781      	b.n	8005900 <__ieee754_sqrt+0x34>
 80059fc:	0ad9      	lsrs	r1, r3, #11
 80059fe:	3815      	subs	r0, #21
 8005a00:	055b      	lsls	r3, r3, #21
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d0fa      	beq.n	80059fc <__ieee754_sqrt+0x130>
 8005a06:	02cd      	lsls	r5, r1, #11
 8005a08:	d50a      	bpl.n	8005a20 <__ieee754_sqrt+0x154>
 8005a0a:	f1c2 0420 	rsb	r4, r2, #32
 8005a0e:	fa23 f404 	lsr.w	r4, r3, r4
 8005a12:	1e55      	subs	r5, r2, #1
 8005a14:	4093      	lsls	r3, r2
 8005a16:	4321      	orrs	r1, r4
 8005a18:	1b42      	subs	r2, r0, r5
 8005a1a:	e78a      	b.n	8005932 <__ieee754_sqrt+0x66>
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	e7f0      	b.n	8005a02 <__ieee754_sqrt+0x136>
 8005a20:	0049      	lsls	r1, r1, #1
 8005a22:	3201      	adds	r2, #1
 8005a24:	e7ef      	b.n	8005a06 <__ieee754_sqrt+0x13a>
 8005a26:	4680      	mov	r8, r0
 8005a28:	e7bd      	b.n	80059a6 <__ieee754_sqrt+0xda>
 8005a2a:	bf00      	nop
 8005a2c:	7ff00000 	.word	0x7ff00000

08005a30 <with_errno>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	4616      	mov	r6, r2
 8005a38:	f7ff f978 	bl	8004d2c <__errno>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	6006      	str	r6, [r0, #0]
 8005a40:	4620      	mov	r0, r4
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <xflow>:
 8005a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a46:	4614      	mov	r4, r2
 8005a48:	461d      	mov	r5, r3
 8005a4a:	b108      	cbz	r0, 8005a50 <xflow+0xc>
 8005a4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	e9cd 2300 	strd	r2, r3, [sp]
 8005a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fd70 	bl	8000540 <__aeabi_dmul>
 8005a60:	2222      	movs	r2, #34	; 0x22
 8005a62:	b003      	add	sp, #12
 8005a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a68:	f7ff bfe2 	b.w	8005a30 <with_errno>

08005a6c <__math_uflow>:
 8005a6c:	b508      	push	{r3, lr}
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a74:	f7ff ffe6 	bl	8005a44 <xflow>
 8005a78:	ec41 0b10 	vmov	d0, r0, r1
 8005a7c:	bd08      	pop	{r3, pc}

08005a7e <__math_oflow>:
 8005a7e:	b508      	push	{r3, lr}
 8005a80:	2200      	movs	r2, #0
 8005a82:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a86:	f7ff ffdd 	bl	8005a44 <xflow>
 8005a8a:	ec41 0b10 	vmov	d0, r0, r1
 8005a8e:	bd08      	pop	{r3, pc}

08005a90 <fabs>:
 8005a90:	ec51 0b10 	vmov	r0, r1, d0
 8005a94:	ee10 2a10 	vmov	r2, s0
 8005a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a9c:	ec43 2b10 	vmov	d0, r2, r3
 8005aa0:	4770      	bx	lr

08005aa2 <finite>:
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	ed8d 0b00 	vstr	d0, [sp]
 8005aa8:	9801      	ldr	r0, [sp, #4]
 8005aaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005aae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005ab2:	0fc0      	lsrs	r0, r0, #31
 8005ab4:	b002      	add	sp, #8
 8005ab6:	4770      	bx	lr

08005ab8 <scalbn>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	ec55 4b10 	vmov	r4, r5, d0
 8005abe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	b99a      	cbnz	r2, 8005af0 <scalbn+0x38>
 8005ac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005acc:	4323      	orrs	r3, r4
 8005ace:	d036      	beq.n	8005b3e <scalbn+0x86>
 8005ad0:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <scalbn+0x100>)
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	ee10 0a10 	vmov	r0, s0
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f7fa fd31 	bl	8000540 <__aeabi_dmul>
 8005ade:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <scalbn+0x104>)
 8005ae0:	429e      	cmp	r6, r3
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	da10      	bge.n	8005b0a <scalbn+0x52>
 8005ae8:	a32b      	add	r3, pc, #172	; (adr r3, 8005b98 <scalbn+0xe0>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	e03a      	b.n	8005b66 <scalbn+0xae>
 8005af0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005af4:	428a      	cmp	r2, r1
 8005af6:	d10c      	bne.n	8005b12 <scalbn+0x5a>
 8005af8:	ee10 2a10 	vmov	r2, s0
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f7fa fb68 	bl	80001d4 <__adddf3>
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
 8005b08:	e019      	b.n	8005b3e <scalbn+0x86>
 8005b0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b0e:	460b      	mov	r3, r1
 8005b10:	3a36      	subs	r2, #54	; 0x36
 8005b12:	4432      	add	r2, r6
 8005b14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b18:	428a      	cmp	r2, r1
 8005b1a:	dd08      	ble.n	8005b2e <scalbn+0x76>
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	a120      	add	r1, pc, #128	; (adr r1, 8005ba0 <scalbn+0xe8>)
 8005b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b24:	da1c      	bge.n	8005b60 <scalbn+0xa8>
 8005b26:	a120      	add	r1, pc, #128	; (adr r1, 8005ba8 <scalbn+0xf0>)
 8005b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2c:	e018      	b.n	8005b60 <scalbn+0xa8>
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	dd08      	ble.n	8005b44 <scalbn+0x8c>
 8005b32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b3e:	ec45 4b10 	vmov	d0, r4, r5
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b48:	da19      	bge.n	8005b7e <scalbn+0xc6>
 8005b4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b4e:	429e      	cmp	r6, r3
 8005b50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005b54:	dd0a      	ble.n	8005b6c <scalbn+0xb4>
 8005b56:	a112      	add	r1, pc, #72	; (adr r1, 8005ba0 <scalbn+0xe8>)
 8005b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e2      	bne.n	8005b26 <scalbn+0x6e>
 8005b60:	a30f      	add	r3, pc, #60	; (adr r3, 8005ba0 <scalbn+0xe8>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fceb 	bl	8000540 <__aeabi_dmul>
 8005b6a:	e7cb      	b.n	8005b04 <scalbn+0x4c>
 8005b6c:	a10a      	add	r1, pc, #40	; (adr r1, 8005b98 <scalbn+0xe0>)
 8005b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0b8      	beq.n	8005ae8 <scalbn+0x30>
 8005b76:	a10e      	add	r1, pc, #56	; (adr r1, 8005bb0 <scalbn+0xf8>)
 8005b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7c:	e7b4      	b.n	8005ae8 <scalbn+0x30>
 8005b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b82:	3236      	adds	r2, #54	; 0x36
 8005b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <scalbn+0x108>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	e7e8      	b.n	8005b66 <scalbn+0xae>
 8005b94:	f3af 8000 	nop.w
 8005b98:	c2f8f359 	.word	0xc2f8f359
 8005b9c:	01a56e1f 	.word	0x01a56e1f
 8005ba0:	8800759c 	.word	0x8800759c
 8005ba4:	7e37e43c 	.word	0x7e37e43c
 8005ba8:	8800759c 	.word	0x8800759c
 8005bac:	fe37e43c 	.word	0xfe37e43c
 8005bb0:	c2f8f359 	.word	0xc2f8f359
 8005bb4:	81a56e1f 	.word	0x81a56e1f
 8005bb8:	43500000 	.word	0x43500000
 8005bbc:	ffff3cb0 	.word	0xffff3cb0
 8005bc0:	3c900000 	.word	0x3c900000

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
