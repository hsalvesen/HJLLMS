
EX3_RADIO_INETERFERE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009ef8  08009ef8  00019ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3b8  0800a3b8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3b8  0800a3b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000004a8  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000688  20000688  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015238  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da6  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207be  00000000  00000000  00039ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017197  00000000  00000000  0005a696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc6cd  00000000  00000000  0007182d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012defa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f10  00000000  00000000  0012df4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009edc 	.word	0x08009edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009edc 	.word	0x08009edc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <poll_ADC>:
#include "main.h"

void poll_ADC(void (**array)(), int LDRs[]){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	for (int i = 0; i <= 7; i++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e031      	b.n	8000cbc <poll_ADC+0x74>
		(*array[i])();
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4798      	blx	r3
		HAL_ADC_Start(&hadc1);
 8000c64:	4819      	ldr	r0, [pc, #100]	; (8000ccc <poll_ADC+0x84>)
 8000c66:	f001 fdd3 	bl	8002810 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <poll_ADC+0x84>)
 8000c70:	f001 ff1a 	bl	8002aa8 <HAL_ADC_PollForConversion>
		int ADC_val = HAL_ADC_GetValue(&hadc1);
 8000c74:	4815      	ldr	r0, [pc, #84]	; (8000ccc <poll_ADC+0x84>)
 8000c76:	f002 f819 	bl	8002cac <HAL_ADC_GetValue>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc1);
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <poll_ADC+0x84>)
 8000c80:	f001 fedc 	bl	8002a3c <HAL_ADC_Stop>

		// read the value from ADC, full range is 12 bits
		uint8_t scale = ADC_val / (0xfff / 8);  // divide the scale into 8 even partitions (for 8 leds)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <poll_ADC+0x88>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	441a      	add	r2, r3
 8000c8e:	1212      	asrs	r2, r2, #8
 8000c90:	17db      	asrs	r3, r3, #31
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	73fb      	strb	r3, [r7, #15]

		// Mark LED to be triggered
		if (scale > 3) {
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d906      	bls.n	8000caa <poll_ADC+0x62>
			LDRs[i] = 1;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e005      	b.n	8000cb6 <poll_ADC+0x6e>
		} else {
			LDRs[i] = 0;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= 7; i++){
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	ddca      	ble.n	8000c58 <poll_ADC+0x10>
		}
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000258 	.word	0x20000258
 8000cd0:	80402011 	.word	0x80402011

08000cd4 <ADC_select_CH2>:

ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH2 (void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_2;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <ADC_select_CH2+0x40>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <ADC_select_CH2+0x40>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <ADC_select_CH2+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <ADC_select_CH2+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <ADC_select_CH2+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <ADC_select_CH2+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4905      	ldr	r1, [pc, #20]	; (8000d14 <ADC_select_CH2+0x40>)
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <ADC_select_CH2+0x44>)
 8000d00:	f002 f854 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <ADC_select_CH2+0x3a>
{
  Error_Handler();
 8000d0a:	f000 fed3 	bl	8001ab4 <Error_Handler>
}
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001fc 	.word	0x200001fc
 8000d18:	20000258 	.word	0x20000258

08000d1c <ADC_select_CH3>:

void ADC_select_CH3 (void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_3;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	4905      	ldr	r1, [pc, #20]	; (8000d5c <ADC_select_CH3+0x40>)
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <ADC_select_CH3+0x44>)
 8000d48:	f002 f830 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <ADC_select_CH3+0x3a>
{
  Error_Handler();
 8000d52:	f000 feaf 	bl	8001ab4 <Error_Handler>
}
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001fc 	.word	0x200001fc
 8000d60:	20000258 	.word	0x20000258

08000d64 <ADC_select_CH4>:

void ADC_select_CH4 (void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_4;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	4905      	ldr	r1, [pc, #20]	; (8000da4 <ADC_select_CH4+0x40>)
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <ADC_select_CH4+0x44>)
 8000d90:	f002 f80c 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <ADC_select_CH4+0x3a>
{
  Error_Handler();
 8000d9a:	f000 fe8b 	bl	8001ab4 <Error_Handler>
}
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001fc 	.word	0x200001fc
 8000da8:	20000258 	.word	0x20000258

08000dac <ADC_select_CH5>:

void ADC_select_CH5 (void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_5;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <ADC_select_CH5+0x40>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <ADC_select_CH5+0x40>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <ADC_select_CH5+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <ADC_select_CH5+0x40>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <ADC_select_CH5+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <ADC_select_CH5+0x40>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	4905      	ldr	r1, [pc, #20]	; (8000dec <ADC_select_CH5+0x40>)
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <ADC_select_CH5+0x44>)
 8000dd8:	f001 ffe8 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <ADC_select_CH5+0x3a>
{
  Error_Handler();
 8000de2:	f000 fe67 	bl	8001ab4 <Error_Handler>
}
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001fc 	.word	0x200001fc
 8000df0:	20000258 	.word	0x20000258

08000df4 <ADC_select_CH6>:

void ADC_select_CH6 (void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_6;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <ADC_select_CH6+0x40>)
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	4905      	ldr	r1, [pc, #20]	; (8000e34 <ADC_select_CH6+0x40>)
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <ADC_select_CH6+0x44>)
 8000e20:	f001 ffc4 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <ADC_select_CH6+0x3a>
{
  Error_Handler();
 8000e2a:	f000 fe43 	bl	8001ab4 <Error_Handler>
}
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001fc 	.word	0x200001fc
 8000e38:	20000258 	.word	0x20000258

08000e3c <ADC_select_CH7>:

void ADC_select_CH7 (void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_7;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	4905      	ldr	r1, [pc, #20]	; (8000e7c <ADC_select_CH7+0x40>)
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <ADC_select_CH7+0x44>)
 8000e68:	f001 ffa0 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <ADC_select_CH7+0x3a>
{
  Error_Handler();
 8000e72:	f000 fe1f 	bl	8001ab4 <Error_Handler>
}
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001fc 	.word	0x200001fc
 8000e80:	20000258 	.word	0x20000258

08000e84 <ADC_select_CH8>:

void ADC_select_CH8 (void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_8;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <ADC_select_CH8+0x40>)
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <ADC_select_CH8+0x44>)
 8000eb0:	f001 ff7c 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <ADC_select_CH8+0x3a>
{
  Error_Handler();
 8000eba:	f000 fdfb 	bl	8001ab4 <Error_Handler>
}
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001fc 	.word	0x200001fc
 8000ec8:	20000258 	.word	0x20000258

08000ecc <ADC_select_CH9>:

void ADC_select_CH9 (void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
sConfig.Channel = ADC_CHANNEL_9;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <ADC_select_CH9+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
sConfig.Offset = 0;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	4905      	ldr	r1, [pc, #20]	; (8000f0c <ADC_select_CH9+0x40>)
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <ADC_select_CH9+0x44>)
 8000ef8:	f001 ff58 	bl	8002dac <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <ADC_select_CH9+0x3a>
{
  Error_Handler();
 8000f02:	f000 fdd7 	bl	8001ab4 <Error_Handler>
}
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	20000258 	.word	0x20000258

08000f14 <check_match>:


int check_match(int ADC_Solutions[], int LDRs[]){
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i <= 8; i++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e013      	b.n	8000f4c <check_match+0x38>
		if(i == 8){
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d101      	bne.n	8000f2e <check_match+0x1a>
			return 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e014      	b.n	8000f58 <check_match+0x44>
		}
		else if(LDRs[i] == ADC_Solutions[i]){
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	440b      	add	r3, r1
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d106      	bne.n	8000f54 <check_match+0x40>
	for (int i = 0; i <= 8; i++){
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	dde8      	ble.n	8000f24 <check_match+0x10>
 8000f52:	e000      	b.n	8000f56 <check_match+0x42>
			continue;
		} else{
			break;
 8000f54:	bf00      	nop
		}
	}
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <enable_clocks>:

volatile int LED_POS = 0;
volatile uint8_t* led_output_display = ((uint8_t*)&(GPIOE->ODR)) + 1;
volatile uint32_t systickValue = 0;

void enable_clocks() {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <enable_clocks+0x1c>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <enable_clocks+0x1c>)
 8000f6e:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000f72:	6153      	str	r3, [r2, #20]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <turnOnLED>:

	//set LED pins to output
	*portReg = LED_FOUR;
}

void turnOnLED(int pos){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	LED_POS = pos;
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <turnOnLED+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
	*led_output_display = 1UL << LED_POS;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <turnOnLED+0x2c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <turnOnLED+0x30>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000214 	.word	0x20000214
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <turnOnAll>:

void turnOnAll(){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	*led_output_display = LED_ALL;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <turnOnAll+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <turnOnFour>:

void turnOnFour(){
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	*led_output_display = LED_FOUR;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <turnOnFour+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2255      	movs	r2, #85	; 0x55
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <shuffle_array>:

#define ARRAY_SIZE 10

char string1[64];

void shuffle_array(float array[], float degrees){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	ed87 0a00 	vstr	s0, [r7]
	for(int i = 1; i < ARRAY_SIZE; i ++){
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e00f      	b.n	8001022 <shuffle_array+0x32>
		array[i - 1] = array[i];
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	441a      	add	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001010:	3b01      	subs	r3, #1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	440b      	add	r3, r1
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < ARRAY_SIZE; i ++){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b09      	cmp	r3, #9
 8001026:	ddec      	ble.n	8001002 <shuffle_array+0x12>
	}
	array[ARRAY_SIZE - 1] = degrees;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3324      	adds	r3, #36	; 0x24
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
	return array;
 8001030:	bf00      	nop
}
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	0000      	movs	r0, r0
	...

08001040 <calculate_degrees>:

float calculate_degrees(float x_data, float y_data){
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
 800104a:	edc7 0a00 	vstr	s1, [r7]
	double degrees, y_on_x;
	double pi = 3.14159;
 800104e:	a3d1      	add	r3, pc, #836	; (adr r3, 8001394 <calculate_degrees+0x354>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(x_data != 0 && y_data != 0){
 8001058:	edd7 7a01 	vldr	s15, [r7, #4]
 800105c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	f000 814e 	beq.w	8001304 <calculate_degrees+0x2c4>
 8001068:	edd7 7a00 	vldr	s15, [r7]
 800106c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	f000 8146 	beq.w	8001304 <calculate_degrees+0x2c4>
			//determining which quadrant the mag is facing
			if(x_data > 0 && y_data > 0){
 8001078:	edd7 7a01 	vldr	s15, [r7, #4]
 800107c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	dd42      	ble.n	800110c <calculate_degrees+0xcc>
 8001086:	edd7 7a00 	vldr	s15, [r7]
 800108a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd3b      	ble.n	800110c <calculate_degrees+0xcc>
				y_on_x = (y_data/x_data);
 8001094:	ed97 7a00 	vldr	s14, [r7]
 8001098:	edd7 7a01 	vldr	s15, [r7, #4]
 800109c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010a0:	ee16 0a90 	vmov	r0, s13
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
				degrees = atan(y_on_x)*(180/pi);
 80010b0:	ed97 0b02 	vldr	d0, [r7, #8]
 80010b4:	f008 fd68 	bl	8009b88 <atan>
 80010b8:	ec55 4b10 	vmov	r4, r5, d0
 80010bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010c0:	f04f 0000 	mov.w	r0, #0
 80010c4:	49b0      	ldr	r1, [pc, #704]	; (8001388 <calculate_degrees+0x348>)
 80010c6:	f7ff fbc1 	bl	800084c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 80010de:	e00a      	b.n	80010f6 <calculate_degrees+0xb6>
					degrees = degrees - 360;
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4ba9      	ldr	r3, [pc, #676]	; (800138c <calculate_degrees+0x34c>)
 80010e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ea:	f7ff f8cd 	bl	8000288 <__aeabi_dsub>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4ba4      	ldr	r3, [pc, #656]	; (800138c <calculate_degrees+0x34c>)
 80010fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001100:	f7ff fd00 	bl	8000b04 <__aeabi_dcmpge>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1ea      	bne.n	80010e0 <calculate_degrees+0xa0>
			if(x_data > 0 && y_data > 0){
 800110a:	e15a      	b.n	80013c2 <calculate_degrees+0x382>
				}
			}
			else if (x_data < 0 && y_data > 0){
 800110c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d54b      	bpl.n	80011b2 <calculate_degrees+0x172>
 800111a:	edd7 7a00 	vldr	s15, [r7]
 800111e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd44      	ble.n	80011b2 <calculate_degrees+0x172>
				y_on_x = (y_data/x_data);
 8001128:	ed97 7a00 	vldr	s14, [r7]
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001134:	ee16 0a90 	vmov	r0, s13
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2302 	strd	r2, r3, [r7, #8]
				degrees = atan(y_on_x)*(180/pi) + 180;
 8001144:	ed97 0b02 	vldr	d0, [r7, #8]
 8001148:	f008 fd1e 	bl	8009b88 <atan>
 800114c:	ec55 4b10 	vmov	r4, r5, d0
 8001150:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	498b      	ldr	r1, [pc, #556]	; (8001388 <calculate_degrees+0x348>)
 800115a:	f7ff fb77 	bl	800084c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b84      	ldr	r3, [pc, #528]	; (8001388 <calculate_degrees+0x348>)
 8001178:	f7ff f888 	bl	800028c <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 8001184:	e00a      	b.n	800119c <calculate_degrees+0x15c>
					degrees = degrees - 360;
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b80      	ldr	r3, [pc, #512]	; (800138c <calculate_degrees+0x34c>)
 800118c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001190:	f7ff f87a 	bl	8000288 <__aeabi_dsub>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b7a      	ldr	r3, [pc, #488]	; (800138c <calculate_degrees+0x34c>)
 80011a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011a6:	f7ff fcad 	bl	8000b04 <__aeabi_dcmpge>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ea      	bne.n	8001186 <calculate_degrees+0x146>
			else if (x_data < 0 && y_data > 0){
 80011b0:	e0a7      	b.n	8001302 <calculate_degrees+0x2c2>
				}
			}
			else if (x_data < 0 && y_data < 0){
 80011b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d54b      	bpl.n	8001258 <calculate_degrees+0x218>
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d544      	bpl.n	8001258 <calculate_degrees+0x218>
				y_on_x = (y_data/x_data);
 80011ce:	ed97 7a00 	vldr	s14, [r7]
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011da:	ee16 0a90 	vmov	r0, s13
 80011de:	f7ff f9b3 	bl	8000548 <__aeabi_f2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
				degrees = atan(y_on_x)*(180/pi) + 180;
 80011ea:	ed97 0b02 	vldr	d0, [r7, #8]
 80011ee:	f008 fccb 	bl	8009b88 <atan>
 80011f2:	ec55 4b10 	vmov	r4, r5, d0
 80011f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4962      	ldr	r1, [pc, #392]	; (8001388 <calculate_degrees+0x348>)
 8001200:	f7ff fb24 	bl	800084c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f9f4 	bl	80005f8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <calculate_degrees+0x348>)
 800121e:	f7ff f835 	bl	800028c <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 800122a:	e00a      	b.n	8001242 <calculate_degrees+0x202>
					degrees = degrees - 360;
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b56      	ldr	r3, [pc, #344]	; (800138c <calculate_degrees+0x34c>)
 8001232:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001236:	f7ff f827 	bl	8000288 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <calculate_degrees+0x34c>)
 8001248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124c:	f7ff fc5a 	bl	8000b04 <__aeabi_dcmpge>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ea      	bne.n	800122c <calculate_degrees+0x1ec>
			else if (x_data < 0 && y_data < 0){
 8001256:	e054      	b.n	8001302 <calculate_degrees+0x2c2>
				}
			}
			else if (x_data > 0 && y_data < 0){
 8001258:	edd7 7a01 	vldr	s15, [r7, #4]
 800125c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	dc00      	bgt.n	8001268 <calculate_degrees+0x228>
			if(x_data > 0 && y_data > 0){
 8001266:	e0ac      	b.n	80013c2 <calculate_degrees+0x382>
			else if (x_data > 0 && y_data < 0){
 8001268:	edd7 7a00 	vldr	s15, [r7]
 800126c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	d400      	bmi.n	8001278 <calculate_degrees+0x238>
			if(x_data > 0 && y_data > 0){
 8001276:	e0a4      	b.n	80013c2 <calculate_degrees+0x382>
				y_on_x = (y_data/x_data);
 8001278:	ed97 7a00 	vldr	s14, [r7]
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001284:	ee16 0a90 	vmov	r0, s13
 8001288:	f7ff f95e 	bl	8000548 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	e9c7 2302 	strd	r2, r3, [r7, #8]
				degrees = atan(y_on_x)*(180/pi) + 360;
 8001294:	ed97 0b02 	vldr	d0, [r7, #8]
 8001298:	f008 fc76 	bl	8009b88 <atan>
 800129c:	ec55 4b10 	vmov	r4, r5, d0
 80012a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a4:	f04f 0000 	mov.w	r0, #0
 80012a8:	4937      	ldr	r1, [pc, #220]	; (8001388 <calculate_degrees+0x348>)
 80012aa:	f7ff facf 	bl	800084c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4620      	mov	r0, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	f7ff f99f 	bl	80005f8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <calculate_degrees+0x34c>)
 80012c8:	f7fe ffe0 	bl	800028c <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 80012d4:	e00a      	b.n	80012ec <calculate_degrees+0x2ac>
					degrees = degrees - 360;
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <calculate_degrees+0x34c>)
 80012dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012e0:	f7fe ffd2 	bl	8000288 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
				while(degrees >= 360){
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <calculate_degrees+0x34c>)
 80012f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012f6:	f7ff fc05 	bl	8000b04 <__aeabi_dcmpge>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ea      	bne.n	80012d6 <calculate_degrees+0x296>
			if(x_data > 0 && y_data > 0){
 8001300:	e05f      	b.n	80013c2 <calculate_degrees+0x382>
 8001302:	e05e      	b.n	80013c2 <calculate_degrees+0x382>
			else{

			}

		}
		else if(x_data == 0 && y_data > 0){
 8001304:	edd7 7a01 	vldr	s15, [r7, #4]
 8001308:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	d10c      	bne.n	800132c <calculate_degrees+0x2ec>
 8001312:	edd7 7a00 	vldr	s15, [r7]
 8001316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	dd05      	ble.n	800132c <calculate_degrees+0x2ec>
			degrees = 90;
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <calculate_degrees+0x350>)
 8001326:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800132a:	e04a      	b.n	80013c2 <calculate_degrees+0x382>
		}
		else if(x_data == 0 && y_data < 0){
 800132c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001330:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d10c      	bne.n	8001354 <calculate_degrees+0x314>
 800133a:	edd7 7a00 	vldr	s15, [r7]
 800133e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	d505      	bpl.n	8001354 <calculate_degrees+0x314>
			degrees = 270;
 8001348:	a30d      	add	r3, pc, #52	; (adr r3, 8001380 <calculate_degrees+0x340>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001352:	e036      	b.n	80013c2 <calculate_degrees+0x382>
		}
		else if(y_data == 0 && x_data > 0){
 8001354:	edd7 7a00 	vldr	s15, [r7]
 8001358:	eef5 7a40 	vcmp.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d11c      	bne.n	800139c <calculate_degrees+0x35c>
 8001362:	edd7 7a01 	vldr	s15, [r7, #4]
 8001366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	dd15      	ble.n	800139c <calculate_degrees+0x35c>
			degrees = 0;
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800137c:	e021      	b.n	80013c2 <calculate_degrees+0x382>
 800137e:	bf00      	nop
 8001380:	00000000 	.word	0x00000000
 8001384:	4070e000 	.word	0x4070e000
 8001388:	40668000 	.word	0x40668000
 800138c:	40768000 	.word	0x40768000
 8001390:	40568000 	.word	0x40568000
 8001394:	f01b866e 	.word	0xf01b866e
 8001398:	400921f9 	.word	0x400921f9
		}
		else if (y_data == 0 && x_data < 0){
 800139c:	edd7 7a00 	vldr	s15, [r7]
 80013a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	d10b      	bne.n	80013c2 <calculate_degrees+0x382>
 80013aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	d504      	bpl.n	80013c2 <calculate_degrees+0x382>
			degrees = 180;
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <calculate_degrees+0x39c>)
 80013be:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}

	return degrees;
 80013c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c6:	f7ff fbef 	bl	8000ba8 <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	ee07 3a90 	vmov	s15, r3
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	bf00      	nop
 80013dc:	40668000 	.word	0x40668000

080013e0 <calculate_average>:

float calculate_average(float array[], float degrees, int count){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80013ec:	6079      	str	r1, [r7, #4]
	float average;

	sprintf(string1, "INSIDE FUNCTION\r\n");
 80013ee:	4926      	ldr	r1, [pc, #152]	; (8001488 <calculate_average+0xa8>)
 80013f0:	4826      	ldr	r0, [pc, #152]	; (800148c <calculate_average+0xac>)
 80013f2:	f006 f94f 	bl	8007694 <siprintf>
	HAL_UART_Transmit(&huart1, string1, strlen(string1), HAL_MAX_DELAY);
 80013f6:	4825      	ldr	r0, [pc, #148]	; (800148c <calculate_average+0xac>)
 80013f8:	f7fe feea 	bl	80001d0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	4921      	ldr	r1, [pc, #132]	; (800148c <calculate_average+0xac>)
 8001406:	4822      	ldr	r0, [pc, #136]	; (8001490 <calculate_average+0xb0>)
 8001408:	f004 fff8 	bl	80063fc <HAL_UART_Transmit>

	if (array[ARRAY_SIZE - 1] == 0){
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3324      	adds	r3, #36	; 0x24
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d107      	bne.n	800142e <calculate_average+0x4e>
		array[count] = degrees;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	601a      	str	r2, [r3, #0]
		return (-1);
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <calculate_average+0xb4>)
 800142c:	e025      	b.n	800147a <calculate_average+0x9a>
	}
	else{
		//shuffle the array
		shuffle_array(array, degrees);
 800142e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff fddc 	bl	8000ff0 <shuffle_array>
		float sum = 0;
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < ARRAY_SIZE; i ++){
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e00e      	b.n	8001462 <calculate_average+0x82>
			sum += array[i];
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ed97 7a07 	vldr	s14, [r7, #28]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	edc7 7a07 	vstr	s15, [r7, #28]
		for(int i = 0; i < ARRAY_SIZE; i ++){
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b09      	cmp	r3, #9
 8001466:	dded      	ble.n	8001444 <calculate_average+0x64>
		}
		average = (sum/ARRAY_SIZE);
 8001468:	ed97 7a07 	vldr	s14, [r7, #28]
 800146c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	edc7 7a05 	vstr	s15, [r7, #20]
		return average;
 8001478:	697b      	ldr	r3, [r7, #20]
	}
}
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	08009ef8 	.word	0x08009ef8
 800148c:	20000218 	.word	0x20000218
 8001490:	200002fc 	.word	0x200002fc
 8001494:	bf800000 	.word	0xbf800000

08001498 <check_solution>:

int check_solution(float average, int solution, float degrees){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	ed87 0a03 	vstr	s0, [r7, #12]
 80014a2:	60b8      	str	r0, [r7, #8]
 80014a4:	edc7 0a01 	vstr	s1, [r7, #4]
	sprintf(string1, "solution: %d\r\n", solution);
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	4982      	ldr	r1, [pc, #520]	; (80016b4 <check_solution+0x21c>)
 80014ac:	4882      	ldr	r0, [pc, #520]	; (80016b8 <check_solution+0x220>)
 80014ae:	f006 f8f1 	bl	8007694 <siprintf>
	HAL_UART_Transmit(&huart1, string1, strlen(string1), HAL_MAX_DELAY);
 80014b2:	4881      	ldr	r0, [pc, #516]	; (80016b8 <check_solution+0x220>)
 80014b4:	f7fe fe8c 	bl	80001d0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	497d      	ldr	r1, [pc, #500]	; (80016b8 <check_solution+0x220>)
 80014c2:	487e      	ldr	r0, [pc, #504]	; (80016bc <check_solution+0x224>)
 80014c4:	f004 ff9a 	bl	80063fc <HAL_UART_Transmit>
	if(average > 67.5 && average < 112.5 && solution == 1){
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80016c0 <check_solution+0x228>
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	dd10      	ble.n	80014fc <check_solution+0x64>
 80014da:	edd7 7a03 	vldr	s15, [r7, #12]
 80014de:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80016c4 <check_solution+0x22c>
 80014e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d507      	bpl.n	80014fc <check_solution+0x64>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d104      	bne.n	80014fc <check_solution+0x64>
		turnOnLED(2);
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff fd46 	bl	8000f84 <turnOnLED>
		return 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0d7      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 22.5 && average < 67.5 && solution == 2){
 80014fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001500:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80016c8 <check_solution+0x230>
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	dd10      	ble.n	8001530 <check_solution+0x98>
 800150e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001512:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80016c0 <check_solution+0x228>
 8001516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	d507      	bpl.n	8001530 <check_solution+0x98>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d104      	bne.n	8001530 <check_solution+0x98>
		turnOnLED(3);
 8001526:	2003      	movs	r0, #3
 8001528:	f7ff fd2c 	bl	8000f84 <turnOnLED>
		return 1;
 800152c:	2301      	movs	r3, #1
 800152e:	e0bd      	b.n	80016ac <check_solution+0x214>
	}
	else if (((degrees < 360 && degrees > 337.5) || (degrees > 0 && degrees < 22.5)) && solution == 3){ //something weird for 0 - 360
 8001530:	edd7 7a01 	vldr	s15, [r7, #4]
 8001534:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80016cc <check_solution+0x234>
 8001538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	d508      	bpl.n	8001554 <check_solution+0xbc>
 8001542:	edd7 7a01 	vldr	s15, [r7, #4]
 8001546:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80016d0 <check_solution+0x238>
 800154a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	dc0f      	bgt.n	8001574 <check_solution+0xdc>
 8001554:	edd7 7a01 	vldr	s15, [r7, #4]
 8001558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	dd10      	ble.n	8001584 <check_solution+0xec>
 8001562:	edd7 7a01 	vldr	s15, [r7, #4]
 8001566:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80016c8 <check_solution+0x230>
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d507      	bpl.n	8001584 <check_solution+0xec>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d104      	bne.n	8001584 <check_solution+0xec>
		turnOnLED(4);
 800157a:	2004      	movs	r0, #4
 800157c:	f7ff fd02 	bl	8000f84 <turnOnLED>
		return 1;
 8001580:	2301      	movs	r3, #1
 8001582:	e093      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 292.5 && average < 337.5 && solution == 4){
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80016d4 <check_solution+0x23c>
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	dd10      	ble.n	80015b8 <check_solution+0x120>
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80016d0 <check_solution+0x238>
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d507      	bpl.n	80015b8 <check_solution+0x120>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d104      	bne.n	80015b8 <check_solution+0x120>
		turnOnLED(5);
 80015ae:	2005      	movs	r0, #5
 80015b0:	f7ff fce8 	bl	8000f84 <turnOnLED>
		return 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e079      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 247.5 && average < 292.5 && solution == 5){
 80015b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015bc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80016d8 <check_solution+0x240>
 80015c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	dd10      	ble.n	80015ec <check_solution+0x154>
 80015ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80016d4 <check_solution+0x23c>
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d507      	bpl.n	80015ec <check_solution+0x154>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d104      	bne.n	80015ec <check_solution+0x154>
		turnOnLED(6);
 80015e2:	2006      	movs	r0, #6
 80015e4:	f7ff fcce 	bl	8000f84 <turnOnLED>
		return 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e05f      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 202.5 && average < 247.5 && solution == 6){
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80016dc <check_solution+0x244>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd10      	ble.n	8001620 <check_solution+0x188>
 80015fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001602:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80016d8 <check_solution+0x240>
 8001606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	d507      	bpl.n	8001620 <check_solution+0x188>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d104      	bne.n	8001620 <check_solution+0x188>
		turnOnLED(7);
 8001616:	2007      	movs	r0, #7
 8001618:	f7ff fcb4 	bl	8000f84 <turnOnLED>
		return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e045      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 157.5 && average < 202.5 && solution == 7){
 8001620:	edd7 7a03 	vldr	s15, [r7, #12]
 8001624:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80016e0 <check_solution+0x248>
 8001628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	dd10      	ble.n	8001654 <check_solution+0x1bc>
 8001632:	edd7 7a03 	vldr	s15, [r7, #12]
 8001636:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80016dc <check_solution+0x244>
 800163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d507      	bpl.n	8001654 <check_solution+0x1bc>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b07      	cmp	r3, #7
 8001648:	d104      	bne.n	8001654 <check_solution+0x1bc>
		turnOnLED(0);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff fc9a 	bl	8000f84 <turnOnLED>
		return 1;
 8001650:	2301      	movs	r3, #1
 8001652:	e02b      	b.n	80016ac <check_solution+0x214>
	}
	else if (average > 112.5 && average < 157.5 && solution == 0){
 8001654:	edd7 7a03 	vldr	s15, [r7, #12]
 8001658:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80016c4 <check_solution+0x22c>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd10      	ble.n	8001688 <check_solution+0x1f0>
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80016e0 <check_solution+0x248>
 800166e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d507      	bpl.n	8001688 <check_solution+0x1f0>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <check_solution+0x1f0>
		turnOnLED(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fc80 	bl	8000f84 <turnOnLED>
		return 1;
 8001684:	2301      	movs	r3, #1
 8001686:	e011      	b.n	80016ac <check_solution+0x214>
	}
	else{
		//turn on four LED's
		turnOnFour();
 8001688:	f7ff fca4 	bl	8000fd4 <turnOnFour>
		sprintf(string1, "CORRECT SOLUTION NOT FOUND\r\n");
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <check_solution+0x24c>)
 800168e:	480a      	ldr	r0, [pc, #40]	; (80016b8 <check_solution+0x220>)
 8001690:	f006 f800 	bl	8007694 <siprintf>
		HAL_UART_Transmit(&huart1, string1, strlen(string1), HAL_MAX_DELAY);
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <check_solution+0x220>)
 8001696:	f7fe fd9b 	bl	80001d0 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	4905      	ldr	r1, [pc, #20]	; (80016b8 <check_solution+0x220>)
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <check_solution+0x224>)
 80016a6:	f004 fea9 	bl	80063fc <HAL_UART_Transmit>
		return 0;
 80016aa:	2300      	movs	r3, #0
	}

}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08009f0c 	.word	0x08009f0c
 80016b8:	20000218 	.word	0x20000218
 80016bc:	200002fc 	.word	0x200002fc
 80016c0:	42870000 	.word	0x42870000
 80016c4:	42e10000 	.word	0x42e10000
 80016c8:	41b40000 	.word	0x41b40000
 80016cc:	43b40000 	.word	0x43b40000
 80016d0:	43a8c000 	.word	0x43a8c000
 80016d4:	43924000 	.word	0x43924000
 80016d8:	43778000 	.word	0x43778000
 80016dc:	434a8000 	.word	0x434a8000
 80016e0:	431d8000 	.word	0x431d8000
 80016e4:	08009f1c 	.word	0x08009f1c

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09e      	sub	sp, #120	; 0x78
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 fb5a 	bl	8006db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	223c      	movs	r2, #60	; 0x3c
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fb4c 	bl	8006db0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001718:	2303      	movs	r3, #3
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800171c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001720:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172a:	2310      	movs	r3, #16
 800172c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001736:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800173c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f9e8 	bl	8004b18 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800174e:	f000 f9b1 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001768:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fa10 	bl	8005b94 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800177a:	f000 f99b 	bl	8001ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <SystemClock_Config+0xc8>)
 8001780:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fc31 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017a4:	f000 f986 	bl	8001ab4 <Error_Handler>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3778      	adds	r7, #120	; 0x78
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	000200a1 	.word	0x000200a1

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_ADC1_Init+0xdc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001806:	2201      	movs	r2, #1
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_ADC1_Init+0xdc>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001812:	2201      	movs	r2, #1
 8001814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001820:	2204      	movs	r2, #4
 8001822:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001826:	2200      	movs	r2, #0
 8001828:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_ADC1_Init+0xdc>)
 800182c:	2200      	movs	r2, #0
 800182e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001830:	4817      	ldr	r0, [pc, #92]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001832:	f000 fe0d 	bl	8002450 <HAL_ADC_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800183c:	f000 f93a 	bl	8001ab4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <MX_ADC1_Init+0xdc>)
 800184c:	f001 fd9a 	bl	8003384 <HAL_ADCEx_MultiModeConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001856:	f000 f92d 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800185a:	2302      	movs	r3, #2
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185e:	2301      	movs	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_ADC1_Init+0xdc>)
 8001878:	f001 fa98 	bl	8002dac <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001882:	f000 f917 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000258 	.word	0x20000258

08001894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <MX_I2C1_Init+0x74>)
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <MX_I2C1_Init+0x78>)
 800189c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_I2C1_Init+0x74>)
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <MX_I2C1_Init+0x7c>)
 80018a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_I2C1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_I2C1_Init+0x74>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_I2C1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_I2C1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_I2C1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_I2C1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_I2C1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <MX_I2C1_Init+0x74>)
 80018d0:	f002 fa42 	bl	8003d58 <HAL_I2C_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018da:	f000 f8eb 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018de:	2100      	movs	r1, #0
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <MX_I2C1_Init+0x74>)
 80018e2:	f002 ffaf 	bl	8004844 <HAL_I2CEx_ConfigAnalogFilter>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018ec:	f000 f8e2 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018f0:	2100      	movs	r1, #0
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_I2C1_Init+0x74>)
 80018f4:	f002 fff1 	bl	80048da <HAL_I2CEx_ConfigDigitalFilter>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018fe:	f000 f8d9 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002a8 	.word	0x200002a8
 800190c:	40005400 	.word	0x40005400
 8001910:	2000090e 	.word	0x2000090e

08001914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_USART1_UART_Init+0x58>)
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <MX_USART1_UART_Init+0x5c>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_USART1_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_USART1_UART_Init+0x58>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_USART1_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART1_UART_Init+0x58>)
 8001958:	f004 fd02 	bl	8006360 <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001962:	f000 f8a7 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200002fc 	.word	0x200002fc
 8001970:	40013800 	.word	0x40013800

08001974 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <MX_USB_PCD_Init+0x40>)
 800197c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 8001980:	2208      	movs	r2, #8
 8001982:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 8001986:	2202      	movs	r2, #2
 8001988:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 800198c:	2202      	movs	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_USB_PCD_Init+0x3c>)
 800199e:	f002 ffe8 	bl	8004972 <HAL_PCD_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80019a8:	f000 f884 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000384 	.word	0x20000384
 80019b4:	40005c00 	.word	0x40005c00

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a36      	ldr	r2, [pc, #216]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d8:	6153      	str	r3, [r2, #20]
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f0:	6153      	str	r3, [r2, #20]
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MX_GPIO_Init+0xf4>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a08:	6153      	str	r3, [r2, #20]
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6153      	str	r3, [r2, #20]
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_GPIO_Init+0xf4>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001a46:	2200      	movs	r2, #0
 8001a48:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <MX_GPIO_Init+0xf8>)
 8001a4e:	f002 f96b 	bl	8003d28 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001a52:	2337      	movs	r3, #55	; 0x37
 8001a54:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <MX_GPIO_Init+0xf8>)
 8001a68:	f001 ffe4 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001a6c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001a70:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <MX_GPIO_Init+0xf8>)
 8001a86:	f001 ffd5 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f001 ffc8 	bl	8003a34 <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48001000 	.word	0x48001000

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <mag_config>:
#define LSM303AGR_ODR_220_HZ ((uint8_t) 0x1C)  /*!< Output Data Rate = 220 Hz */


float string[64];

void mag_config(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
	uint8_t configValue = LSM303AGR_ODR_220_HZ;
 8001ac6:	231c      	movs	r3, #28
 8001ac8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAG_WRITE, LSM303AGR_CFG_REG_A_M, 1, &configValue, 1, 10);
 8001aca:	230a      	movs	r3, #10
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	2260      	movs	r2, #96	; 0x60
 8001ada:	213d      	movs	r1, #61	; 0x3d
 8001adc:	4811      	ldr	r0, [pc, #68]	; (8001b24 <mag_config+0x64>)
 8001ade:	f002 f9cb 	bl	8003e78 <HAL_I2C_Mem_Write>

	uint8_t mode = LSM303AGR_BlockUpdate_Continuous;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MAG_WRITE, 0x22, 1, &mode, 1, 10);
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2222      	movs	r2, #34	; 0x22
 8001af6:	213d      	movs	r1, #61	; 0x3d
 8001af8:	480a      	ldr	r0, [pc, #40]	; (8001b24 <mag_config+0x64>)
 8001afa:	f002 f9bd 	bl	8003e78 <HAL_I2C_Mem_Write>

	uint8_t magregValue = 0x57;
 8001afe:	2357      	movs	r3, #87	; 0x57
 8001b00:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, MAG_WRITE, 0x20, 1, &magregValue, 1, 10);
 8001b02:	230a      	movs	r3, #10
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	1d7b      	adds	r3, r7, #5
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2220      	movs	r2, #32
 8001b12:	213d      	movs	r1, #61	; 0x3d
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <mag_config+0x64>)
 8001b16:	f002 f9af 	bl	8003e78 <HAL_I2C_Mem_Write>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200002a8 	.word	0x200002a8

08001b28 <read_x_data>:

float read_x_data(){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16

	float x_data;
	uint8_t magXm;
	HAL_I2C_Mem_Read(&hi2c1, MAG_READ, 0x69, 1, &magXm, 1, 1000);
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2269      	movs	r2, #105	; 0x69
 8001b40:	213c      	movs	r1, #60	; 0x3c
 8001b42:	4813      	ldr	r0, [pc, #76]	; (8001b90 <read_x_data+0x68>)
 8001b44:	f002 faac 	bl	80040a0 <HAL_I2C_Mem_Read>
	uint8_t magXl;
	HAL_I2C_Mem_Read(&hi2c1,MAG_READ, 0x68, 1, &magXl, 1, 1000);
 8001b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	2268      	movs	r2, #104	; 0x68
 8001b5a:	213c      	movs	r1, #60	; 0x3c
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <read_x_data+0x68>)
 8001b5e:	f002 fa9f 	bl	80040a0 <HAL_I2C_Mem_Read>
	int16_t magX = (((magXm << 8) | magXl));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	81fb      	strh	r3, [r7, #14]
	x_data = magX;
 8001b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7c:	edc7 7a02 	vstr	s15, [r7, #8]

	return x_data;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200002a8 	.word	0x200002a8

08001b94 <read_y_data>:

float read_y_data(){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af04      	add	r7, sp, #16
	float y_data;
	uint8_t magYm;
	HAL_I2C_Mem_Read(&hi2c1,MAG_READ, 0x6B, 1, &magYm, 1, 1000);
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	226b      	movs	r2, #107	; 0x6b
 8001bac:	213c      	movs	r1, #60	; 0x3c
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <read_y_data+0x68>)
 8001bb0:	f002 fa76 	bl	80040a0 <HAL_I2C_Mem_Read>
	uint8_t magYl;
	HAL_I2C_Mem_Read(&hi2c1,MAG_READ, 0x6A, 1, &magYl, 1, 1000);
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	226a      	movs	r2, #106	; 0x6a
 8001bc6:	213c      	movs	r1, #60	; 0x3c
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <read_y_data+0x68>)
 8001bca:	f002 fa69 	bl	80040a0 <HAL_I2C_Mem_Read>
	int16_t magY = (((magYm << 8) | magYl));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	81fb      	strh	r3, [r7, #14]
	return y_data = magY;
 8001bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	edc7 7a02 	vstr	s15, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	ee07 3a90 	vmov	s15, r3
}
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200002a8 	.word	0x200002a8

08001c00 <read_z_data>:

float read_z_data(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af04      	add	r7, sp, #16
	float z_data;
	uint8_t magZm;
	HAL_I2C_Mem_Read(&hi2c1,MAG_READ, 0x6D, 1, &magZm, 1, 1000);
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	226d      	movs	r2, #109	; 0x6d
 8001c18:	213c      	movs	r1, #60	; 0x3c
 8001c1a:	4813      	ldr	r0, [pc, #76]	; (8001c68 <read_z_data+0x68>)
 8001c1c:	f002 fa40 	bl	80040a0 <HAL_I2C_Mem_Read>
	uint8_t magZl;
	HAL_I2C_Mem_Read(&hi2c1,MAG_READ, 0x6C, 1, &magZl, 1, 1000);
 8001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	1dbb      	adds	r3, r7, #6
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	226c      	movs	r2, #108	; 0x6c
 8001c32:	213c      	movs	r1, #60	; 0x3c
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <read_z_data+0x68>)
 8001c36:	f002 fa33 	bl	80040a0 <HAL_I2C_Mem_Read>
	int16_t magZ = (((magZm << 8) | magZl));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	81fb      	strh	r3, [r7, #14]
	return z_data = magZ;
 8001c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	edc7 7a02 	vstr	s15, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	ee07 3a90 	vmov	s15, r3
}
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200002a8 	.word	0x200002a8

08001c6c <main>:
#include "main.h"

int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	init_peripherals();
 8001c70:	f000 f810 	bl	8001c94 <init_peripherals>

	radio_interfere();
 8001c74:	f000 f822 	bl	8001cbc <radio_interfere>

	HAL_UART_Transmit(&huart1, (uint8_t*) "]", strlen("]"), HAL_MAX_DELAY);
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4903      	ldr	r1, [pc, #12]	; (8001c8c <main+0x20>)
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <main+0x24>)
 8001c82:	f004 fbbb 	bl	80063fc <HAL_UART_Transmit>

	turnOnAll();
 8001c86:	f7ff f997 	bl	8000fb8 <turnOnAll>

	while (1){}
 8001c8a:	e7fe      	b.n	8001c8a <main+0x1e>
 8001c8c:	08009f3c 	.word	0x08009f3c
 8001c90:	200002fc 	.word	0x200002fc

08001c94 <init_peripherals>:
#include "peripherals.h"

void init_peripherals(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	enable_clocks();
 8001c98:	f7ff f964 	bl	8000f64 <enable_clocks>
	  HAL_Init();
 8001c9c:	f000 fb4e 	bl	800233c <HAL_Init>
	  SystemClock_Config();
 8001ca0:	f7ff fd22 	bl	80016e8 <SystemClock_Config>
	  MX_GPIO_Init();
 8001ca4:	f7ff fe88 	bl	80019b8 <MX_GPIO_Init>
	  MX_I2C1_Init();
 8001ca8:	f7ff fdf4 	bl	8001894 <MX_I2C1_Init>
	  MX_USB_PCD_Init();
 8001cac:	f7ff fe62 	bl	8001974 <MX_USB_PCD_Init>
	  MX_ADC1_Init();
 8001cb0:	f7ff fd80 	bl	80017b4 <MX_ADC1_Init>
	  MX_USART1_UART_Init();
 8001cb4:	f7ff fe2e 	bl	8001914 <MX_USART1_UART_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <radio_interfere>:
#include "main.h"

void radio_interfere(){
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b0ce      	sub	sp, #312	; 0x138
 8001cc0:	af00      	add	r7, sp, #0
	void (*LDRChannels[8])() = {
 8001cc2:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <radio_interfere+0x15c>)
 8001cc4:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8001cc8:	461d      	mov	r5, r3
 8001cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//MAGNETOMETER VARIABLES
	int solution;
	float x_data, y_data, z_data;
	uint8_t test[64];
	HAL_StatusTypeDef returnValue, stat, check, odr;
	float array[ARRAY_SIZE] = {0};
 8001cd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001cda:	2228      	movs	r2, #40	; 0x28
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 f866 	bl	8006db0 <memset>

	//AVERAGING VARIABLES
	float degrees, average;
	int count = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float sum = 0;
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	int completed_magnetometer = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	//ADC VARIABLES
	int LDRs[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001cf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 f855 	bl	8006db0 <memset>
	int ADC_Solutions[8] = {0,0,0,0,0,0,0,0};
 8001d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 f84e 	bl	8006db0 <memset>
	int completed_ADC = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	for(int cycle = 0; cycle < 5; cycle++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001d20:	e06f      	b.n	8001e02 <radio_interfere+0x146>
			solution =(SysTick->VAL % 8);
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <radio_interfere+0x160>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			//MAGNETOMETER MODULE
		mag_config();
 8001d2e:	f7ff fec7 	bl	8001ac0 <mag_config>
	   while (1){

		   x_data = read_x_data();
 8001d32:	f7ff fef9 	bl	8001b28 <read_x_data>
 8001d36:	ed87 0a47 	vstr	s0, [r7, #284]	; 0x11c
		   y_data = read_y_data();
 8001d3a:	f7ff ff2b 	bl	8001b94 <read_y_data>
 8001d3e:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
		   z_data = read_z_data();
 8001d42:	f7ff ff5d 	bl	8001c00 <read_z_data>
 8001d46:	ed87 0a45 	vstr	s0, [r7, #276]	; 0x114

		   degrees = calculate_degrees(x_data, y_data);
 8001d4a:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 8001d4e:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 8001d52:	f7ff f975 	bl	8001040 <calculate_degrees>
 8001d56:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110

		   average = calculate_average(array, degrees, count);
 8001d5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d5e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001d62:	ed97 0a44 	vldr	s0, [r7, #272]	; 0x110
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb3a 	bl	80013e0 <calculate_average>
 8001d6c:	ed87 0a43 	vstr	s0, [r7, #268]	; 0x10c
		   count++;
 8001d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d74:	3301      	adds	r3, #1
 8001d76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		   completed_magnetometer = check_solution(average, solution, degrees);
 8001d7a:	edd7 0a44 	vldr	s1, [r7, #272]	; 0x110
 8001d7e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d82:	ed97 0a43 	vldr	s0, [r7, #268]	; 0x10c
 8001d86:	f7ff fb87 	bl	8001498 <check_solution>
 8001d8a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

		   if (completed_magnetometer == 1){
 8001d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d003      	beq.n	8001d9e <radio_interfere+0xe2>
			   break;
		   }

				HAL_Delay(100);
 8001d96:	2064      	movs	r0, #100	; 0x64
 8001d98:	f000 fb36 	bl	8002408 <HAL_Delay>
		   x_data = read_x_data();
 8001d9c:	e7c9      	b.n	8001d32 <radio_interfere+0x76>
			   break;
 8001d9e:	bf00      	nop
	   	   }
		   //ADC MODULE
			   HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001da0:	2100      	movs	r1, #0
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <radio_interfere+0x164>)
 8001da4:	f000 ff8f 	bl	8002cc6 <HAL_ADCEx_Calibration_Start>
			   ADC_Solutions[solution] = 1;
 8001da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001db2:	443b      	add	r3, r7
 8001db4:	2201      	movs	r2, #1
 8001db6:	f843 2cf4 	str.w	r2, [r3, #-244]

			   while (1){

				   poll_ADC(LDRChannels, LDRs);
 8001dba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff3f 	bl	8000c48 <poll_ADC>
				   completed_ADC = check_match(ADC_Solutions, LDRs);
 8001dca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f89d 	bl	8000f14 <check_match>
 8001dda:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
				   char test[64];

				   if(completed_ADC == 1){
 8001dde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d1e9      	bne.n	8001dba <radio_interfere+0xfe>
					   ADC_Solutions[solution] = 0;
 8001de6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001df0:	443b      	add	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	f843 2cf4 	str.w	r2, [r3, #-244]
	for(int cycle = 0; cycle < 5; cycle++){
 8001df8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	dd8b      	ble.n	8001d22 <radio_interfere+0x66>
					   break;
				   }
			   }
		  }
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdb0      	pop	{r4, r5, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08009f40 	.word	0x08009f40
 8001e1c:	e000e010 	.word	0xe000e010
 8001e20:	20000258 	.word	0x20000258

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x44>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x44>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6193      	str	r3, [r2, #24]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x44>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x44>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x44>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x44>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e5a:	2007      	movs	r0, #7
 8001e5c:	f001 fdb6 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8c:	d154      	bne.n	8001f38 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6153      	str	r3, [r2, #20]
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eb0:	6153      	str	r3, [r2, #20]
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec8:	6153      	str	r3, [r2, #20]
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	6153      	str	r3, [r2, #20]
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_ADC_MspInit+0xd4>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001eee:	230f      	movs	r3, #15
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <HAL_ADC_MspInit+0xd8>)
 8001f02:	f001 fd97 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001f06:	2314      	movs	r3, #20
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <HAL_ADC_MspInit+0xdc>)
 8001f1a:	f001 fd8b 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f1e:	230e      	movs	r3, #14
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f22:	2303      	movs	r3, #3
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f001 fd7e 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48001400 	.word	0x48001400

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_I2C_MspInit+0x7c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d127      	bne.n	8001fbe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f78:	6153      	str	r3, [r2, #20]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f96:	2304      	movs	r3, #4
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <HAL_I2C_MspInit+0x84>)
 8001fa2:	f001 fd47 	bl	8003a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_I2C_MspInit+0x80>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40005400 	.word	0x40005400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_UART_MspInit+0x7c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d127      	bne.n	8002046 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_UART_MspInit+0x80>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_UART_MspInit+0x80>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_UART_MspInit+0x80>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_UART_MspInit+0x80>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_UART_MspInit+0x80>)
 8002014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002018:	6153      	str	r3, [r2, #20]
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_UART_MspInit+0x80>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002026:	2330      	movs	r3, #48	; 0x30
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002036:	2307      	movs	r3, #7
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_UART_MspInit+0x84>)
 8002042:	f001 fcf7 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40013800 	.word	0x40013800
 8002054:	40021000 	.word	0x40021000
 8002058:	48000800 	.word	0x48000800

0800205c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_PCD_MspInit+0x80>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d129      	bne.n	80020d2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002096:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80020a8:	230e      	movs	r3, #14
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b6:	f001 fcbd 	bl	8003a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 80020c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_PCD_MspInit+0x84>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40005c00 	.word	0x40005c00
 80020e0:	40021000 	.word	0x40021000

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f94a 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002152:	f004 fe03 	bl	8006d5c <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
  return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800217a:	e7fe      	b.n	800217a <_exit+0x12>

0800217c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
  }

  return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e009      	b.n	80021dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf1      	blt.n	80021c8 <_write+0x12>
  }
  return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002216:	605a      	str	r2, [r3, #4]
  return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_isatty>:

int _isatty(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f004 fd68 	bl	8006d5c <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000a000 	.word	0x2000a000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000670 	.word	0x20000670
 80022c0:	20000688 	.word	0x20000688

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ec:	f7ff ffea 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f2:	490d      	ldr	r1, [pc, #52]	; (8002328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <LoopForever+0xe>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002308:	4c0a      	ldr	r4, [pc, #40]	; (8002334 <LoopForever+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f004 fd27 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800231a:	f7ff fca7 	bl	8001c6c <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002320:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800232c:	0800a3c0 	.word	0x0800a3c0
  ldr r2, =_sbss
 8002330:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002334:	20000688 	.word	0x20000688

08002338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC1_2_IRQHandler>
	...

0800233c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_Init+0x28>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_Init+0x28>)
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f001 fb3d 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 f808 	bl	8002368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002358:	f7ff fd64 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x54>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_InitTick+0x58>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fb47 	bl	8003a1a <HAL_SYSTICK_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00e      	b.n	80023b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d80a      	bhi.n	80023b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f001 fb1d 	bl	80039e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_InitTick+0x5c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000004 	.word	0x20000004
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	20000008 	.word	0x20000008

080023c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	20000674 	.word	0x20000674

080023f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000674 	.word	0x20000674

08002408 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000000c 	.word	0x2000000c

08002450 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b09a      	sub	sp, #104	; 0x68
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e1c9      	b.n	8002804 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d176      	bne.n	8002570 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d152      	bne.n	8002530 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fce1 	bl	8001e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13b      	bne.n	8002530 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f001 f8b9 	bl	8003630 <ADC_Disable>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d12f      	bne.n	8002530 <HAL_ADC_Init+0xe0>
 80024d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d12b      	bne.n	8002530 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e0:	f023 0302 	bic.w	r3, r3, #2
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800250c:	4b86      	ldr	r3, [pc, #536]	; (8002728 <HAL_ADC_Init+0x2d8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a86      	ldr	r2, [pc, #536]	; (800272c <HAL_ADC_Init+0x2dc>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9a      	lsrs	r2, r3, #18
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002522:	e002      	b.n	800252a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254c:	d110      	bne.n	8002570 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f023 0312 	bic.w	r3, r3, #18
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 8136 	bne.w	80027ea <HAL_ADC_Init+0x39a>
 800257e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8131 	bne.w	80027ea <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 8129 	bne.w	80027ea <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025a0:	f043 0202 	orr.w	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_Init+0x16c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5e      	ldr	r2, [pc, #376]	; (8002730 <HAL_ADC_Init+0x2e0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_Init+0x170>
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_ADC_Init+0x2e4>)
 80025be:	e000      	b.n	80025c2 <HAL_ADC_Init+0x172>
 80025c0:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <HAL_ADC_Init+0x2e8>)
 80025c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025cc:	d102      	bne.n	80025d4 <HAL_ADC_Init+0x184>
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_ADC_Init+0x2e0>)
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e01a      	b.n	800260a <HAL_ADC_Init+0x1ba>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_ADC_Init+0x2e0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d103      	bne.n	80025e6 <HAL_ADC_Init+0x196>
 80025de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e011      	b.n	800260a <HAL_ADC_Init+0x1ba>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a54      	ldr	r2, [pc, #336]	; (800273c <HAL_ADC_Init+0x2ec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d102      	bne.n	80025f6 <HAL_ADC_Init+0x1a6>
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_ADC_Init+0x2f0>)
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e009      	b.n	800260a <HAL_ADC_Init+0x1ba>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_ADC_Init+0x2f0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d102      	bne.n	8002606 <HAL_ADC_Init+0x1b6>
 8002600:	4b4e      	ldr	r3, [pc, #312]	; (800273c <HAL_ADC_Init+0x2ec>)
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e001      	b.n	800260a <HAL_ADC_Init+0x1ba>
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d108      	bne.n	800262a <HAL_ADC_Init+0x1da>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x1da>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_ADC_Init+0x1dc>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11c      	bne.n	800266a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002630:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d010      	beq.n	8002658 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_ADC_Init+0x202>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Init+0x202>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_ADC_Init+0x204>
 8002652:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	431a      	orrs	r2, r3
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7e5b      	ldrb	r3, [r3, #25]
 800266e:	035b      	lsls	r3, r3, #13
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002674:	2a01      	cmp	r2, #1
 8002676:	d002      	beq.n	800267e <HAL_ADC_Init+0x22e>
 8002678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267c:	e000      	b.n	8002680 <HAL_ADC_Init+0x230>
 800267e:	2200      	movs	r2, #0
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4313      	orrs	r3, r2
 800268e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002690:	4313      	orrs	r3, r2
 8002692:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d11b      	bne.n	80026d6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e5b      	ldrb	r3, [r3, #25]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	3b01      	subs	r3, #1
 80026ac:	045a      	lsls	r2, r3, #17
 80026ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
 80026b8:	e00d      	b.n	80026d6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d03a      	beq.n	8002754 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_ADC_Init+0x2ec>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_Init+0x2a2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_ADC_Init+0x2f0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d128      	bne.n	8002744 <HAL_ADC_Init+0x2f4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80026fa:	d012      	beq.n	8002722 <HAL_ADC_Init+0x2d2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002704:	d00a      	beq.n	800271c <HAL_ADC_Init+0x2cc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800270e:	d002      	beq.n	8002716 <HAL_ADC_Init+0x2c6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	e018      	b.n	8002748 <HAL_ADC_Init+0x2f8>
 8002716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271a:	e015      	b.n	8002748 <HAL_ADC_Init+0x2f8>
 800271c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002720:	e012      	b.n	8002748 <HAL_ADC_Init+0x2f8>
 8002722:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002726:	e00f      	b.n	8002748 <HAL_ADC_Init+0x2f8>
 8002728:	20000004 	.word	0x20000004
 800272c:	431bde83 	.word	0x431bde83
 8002730:	50000100 	.word	0x50000100
 8002734:	50000300 	.word	0x50000300
 8002738:	50000700 	.word	0x50000700
 800273c:	50000400 	.word	0x50000400
 8002740:	50000500 	.word	0x50000500
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800274c:	4313      	orrs	r3, r2
 800274e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002750:	4313      	orrs	r3, r2
 8002752:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d114      	bne.n	800278c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	039a      	lsls	r2, r3, #14
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4313      	orrs	r3, r2
 8002786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002788:	4313      	orrs	r3, r2
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_ADC_Init+0x3bc>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800279c:	430b      	orrs	r3, r1
 800279e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f023 010f 	bic.w	r1, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
 80027c0:	e007      	b.n	80027d2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 020f 	bic.w	r2, r2, #15
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f023 0303 	bic.w	r3, r3, #3
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
 80027e8:	e00a      	b.n	8002800 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f023 0312 	bic.w	r3, r3, #18
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002804:	4618      	mov	r0, r3
 8002806:	3768      	adds	r7, #104	; 0x68
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fff0c007 	.word	0xfff0c007

08002810 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 80f9 	bne.w	8002a1e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Start+0x2a>
 8002836:	2302      	movs	r3, #2
 8002838:	e0f4      	b.n	8002a24 <HAL_ADC_Start+0x214>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fe90 	bl	8003568 <ADC_Enable>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 80e0 	bne.w	8002a14 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002870:	d004      	beq.n	800287c <HAL_ADC_Start+0x6c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6d      	ldr	r2, [pc, #436]	; (8002a2c <HAL_ADC_Start+0x21c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d106      	bne.n	800288a <HAL_ADC_Start+0x7a>
 800287c:	4b6c      	ldr	r3, [pc, #432]	; (8002a30 <HAL_ADC_Start+0x220>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_ADC_Start+0x9a>
 8002888:	e005      	b.n	8002896 <HAL_ADC_Start+0x86>
 800288a:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_ADC_Start+0x224>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_ADC_Start+0x9a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Start+0x9a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a64      	ldr	r2, [pc, #400]	; (8002a38 <HAL_ADC_Start+0x228>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d115      	bne.n	80028d6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d036      	beq.n	8002932 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80028d4:	e02d      	b.n	8002932 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ea:	d004      	beq.n	80028f6 <HAL_ADC_Start+0xe6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a4e      	ldr	r2, [pc, #312]	; (8002a2c <HAL_ADC_Start+0x21c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_Start+0xfc>
 80028f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e008      	b.n	800291e <HAL_ADC_Start+0x10e>
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_ADC_Start+0x228>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800292a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d106      	bne.n	800294e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f023 0206 	bic.w	r2, r3, #6
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	645a      	str	r2, [r3, #68]	; 0x44
 800294c:	e002      	b.n	8002954 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	221c      	movs	r2, #28
 8002962:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296c:	d004      	beq.n	8002978 <HAL_ADC_Start+0x168>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_ADC_Start+0x21c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d106      	bne.n	8002986 <HAL_ADC_Start+0x176>
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_ADC_Start+0x220>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03e      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 8002984:	e005      	b.n	8002992 <HAL_ADC_Start+0x182>
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_ADC_Start+0x224>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2b00      	cmp	r3, #0
 8002990:	d037      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299a:	d004      	beq.n	80029a6 <HAL_ADC_Start+0x196>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <HAL_ADC_Start+0x21c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d106      	bne.n	80029b4 <HAL_ADC_Start+0x1a4>
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_ADC_Start+0x220>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d027      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 80029b2:	e005      	b.n	80029c0 <HAL_ADC_Start+0x1b0>
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_ADC_Start+0x224>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d020      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c8:	d004      	beq.n	80029d4 <HAL_ADC_Start+0x1c4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_ADC_Start+0x21c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d106      	bne.n	80029e2 <HAL_ADC_Start+0x1d2>
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_ADC_Start+0x220>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d010      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 80029e0:	e005      	b.n	80029ee <HAL_ADC_Start+0x1de>
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_ADC_Start+0x224>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d009      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f6:	d004      	beq.n	8002a02 <HAL_ADC_Start+0x1f2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_ADC_Start+0x228>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10f      	bne.n	8002a22 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0204 	orr.w	r2, r2, #4
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	e006      	b.n	8002a22 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a1c:	e001      	b.n	8002a22 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	50000100 	.word	0x50000100
 8002a30:	50000300 	.word	0x50000300
 8002a34:	50000700 	.word	0x50000700
 8002a38:	50000400 	.word	0x50000400

08002a3c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Stop+0x1a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e023      	b.n	8002a9e <HAL_ADC_Stop+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a5e:	216c      	movs	r1, #108	; 0x6c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fe4b 	bl	80036fc <ADC_ConversionStop>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fddd 	bl	8003630 <ADC_Disable>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d102      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e03a      	b.n	8002b3a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_PollForConversion+0x30>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a72      	ldr	r2, [pc, #456]	; (8002c9c <HAL_ADC_PollForConversion+0x1f4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_PollForConversion+0x34>
 8002ad8:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8002ada:	e000      	b.n	8002ade <HAL_ADC_PollForConversion+0x36>
 8002adc:	4b71      	ldr	r3, [pc, #452]	; (8002ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8002ade:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d112      	bne.n	8002b12 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11d      	bne.n	8002b36 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0bf      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0ad      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b36:	230c      	movs	r3, #12
 8002b38:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_PollForConversion+0xa6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <HAL_ADC_PollForConversion+0x1f4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_PollForConversion+0xb4>
 8002b4e:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_ADC_PollForConversion+0xd4>
 8002b5a:	e005      	b.n	8002b68 <HAL_ADC_PollForConversion+0xc0>
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_ADC_PollForConversion+0xd4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_PollForConversion+0xd4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_ADC_PollForConversion+0x200>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d104      	bne.n	8002b86 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e00f      	b.n	8002ba6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_PollForConversion+0xf2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <HAL_ADC_PollForConversion+0x1f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d102      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0xf8>
 8002b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_PollForConversion+0xfa>
 8002ba0:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_ADC_PollForConversion+0x200>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002ba6:	f7ff fc23 	bl	80023f0 <HAL_GetTick>
 8002baa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bac:	e021      	b.n	8002bf2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_ADC_PollForConversion+0x124>
 8002bbc:	f7ff fc18 	bl	80023f0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d212      	bcs.n	8002bf2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e04f      	b.n	8002c92 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0d6      	beq.n	8002bae <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d131      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12c      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d125      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d112      	bne.n	8002c66 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d112      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
 8002c64:	e00b      	b.n	8002c7e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d103      	bne.n	8002c90 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	50000700 	.word	0x50000700
 8002ca8:	50000400 	.word	0x50000400

08002cac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e05f      	b.n	8002da2 <HAL_ADCEx_Calibration_Start+0xdc>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fca0 	bl	8003630 <ADC_Disable>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d14e      	bne.n	8002d98 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002d0e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d24:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d34:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002d36:	f7ff fb5b 	bl	80023f0 <HAL_GetTick>
 8002d3a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d3c:	e01c      	b.n	8002d78 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d3e:	f7ff fb57 	bl	80023f0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b0a      	cmp	r3, #10
 8002d4a:	d915      	bls.n	8002d78 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5a:	d10d      	bne.n	8002d78 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f023 0312 	bic.w	r3, r3, #18
 8002d64:	f043 0210 	orr.w	r2, r3, #16
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e014      	b.n	8002da2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d86:	d0da      	beq.n	8002d3e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f023 0303 	bic.w	r3, r3, #3
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b09b      	sub	sp, #108	; 0x6c
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x22>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e2ca      	b.n	8003364 <HAL_ADC_ConfigChannel+0x5b8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 82ae 	bne.w	8003342 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	461a      	mov	r2, r3
 8002e02:	231f      	movs	r3, #31
 8002e04:	4093      	lsls	r3, r2
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e063      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d81e      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	4019      	ands	r1, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3b1e      	subs	r3, #30
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6c:	e040      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b0e      	cmp	r3, #14
 8002e74:	d81e      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	3b3c      	subs	r3, #60	; 0x3c
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4019      	ands	r1, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	3b3c      	subs	r3, #60	; 0x3c
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	e01d      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3b5a      	subs	r3, #90	; 0x5a
 8002ec8:	221f      	movs	r2, #31
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	4019      	ands	r1, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3b5a      	subs	r3, #90	; 0x5a
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80e5 	bne.w	80030ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d91c      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4019      	ands	r1, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6898      	ldr	r0, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	e019      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6959      	ldr	r1, [r3, #20]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	2207      	movs	r2, #7
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4019      	ands	r1, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6898      	ldr	r0, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d84f      	bhi.n	8003038 <HAL_ADC_ConfigChannel+0x28c>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08003017 	.word	0x08003017
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fb6:	4b9a      	ldr	r3, [pc, #616]	; (8003220 <HAL_ADC_ConfigChannel+0x474>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	0691      	lsls	r1, r2, #26
 8002fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fd0:	e07e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd8:	4b91      	ldr	r3, [pc, #580]	; (8003220 <HAL_ADC_ConfigChannel+0x474>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	0691      	lsls	r1, r2, #26
 8002fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ff0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ff2:	e06d      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_ADC_ConfigChannel+0x474>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	0691      	lsls	r1, r2, #26
 8003004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003006:	430a      	orrs	r2, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003012:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003014:	e05c      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800301c:	4b80      	ldr	r3, [pc, #512]	; (8003220 <HAL_ADC_ConfigChannel+0x474>)
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	0691      	lsls	r1, r2, #26
 8003026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003028:	430a      	orrs	r2, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003034:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003036:	e04b      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10a      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030c8:	e001      	b.n	80030ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80030ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x346>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 8130 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00f      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800311e:	e049      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b09      	cmp	r3, #9
 8003140:	d91c      	bls.n	800317c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	3b1b      	subs	r3, #27
 8003154:	2207      	movs	r2, #7
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	4019      	ands	r1, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6898      	ldr	r0, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1b      	subs	r3, #27
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e01b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6959      	ldr	r1, [r3, #20]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x41c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_ADC_ConfigChannel+0x478>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x420>
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_ADC_ConfigChannel+0x47c>)
 80031ca:	e000      	b.n	80031ce <HAL_ADC_ConfigChannel+0x422>
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_ADC_ConfigChannel+0x480>)
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	f040 80ab 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80a4 	bne.w	8003358 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003218:	d10a      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x484>
 800321a:	4b02      	ldr	r3, [pc, #8]	; (8003224 <HAL_ADC_ConfigChannel+0x478>)
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e022      	b.n	8003266 <HAL_ADC_ConfigChannel+0x4ba>
 8003220:	83fff000 	.word	0x83fff000
 8003224:	50000100 	.word	0x50000100
 8003228:	50000300 	.word	0x50000300
 800322c:	50000700 	.word	0x50000700
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <HAL_ADC_ConfigChannel+0x5c4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d103      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x496>
 800323a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e011      	b.n	8003266 <HAL_ADC_ConfigChannel+0x4ba>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4b      	ldr	r2, [pc, #300]	; (8003374 <HAL_ADC_ConfigChannel+0x5c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x4a6>
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_ADC_ConfigChannel+0x5cc>)
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e009      	b.n	8003266 <HAL_ADC_ConfigChannel+0x4ba>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a48      	ldr	r2, [pc, #288]	; (8003378 <HAL_ADC_ConfigChannel+0x5cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x4b6>
 800325c:	4b45      	ldr	r3, [pc, #276]	; (8003374 <HAL_ADC_ConfigChannel+0x5c8>)
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e001      	b.n	8003266 <HAL_ADC_ConfigChannel+0x4ba>
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x4da>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x4da>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_ADC_ConfigChannel+0x4dc>
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d150      	bne.n	800332e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800328c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x502>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x502>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x504>
 80032ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13c      	bne.n	800332e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d11d      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x54c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c4:	d118      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d2:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_ADC_ConfigChannel+0x5d0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <HAL_ADC_ConfigChannel+0x5d4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	0c9a      	lsrs	r2, r3, #18
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e8:	e002      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f9      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032f6:	e02e      	b.n	8003356 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b11      	cmp	r3, #17
 80032fe:	d10b      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x56c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003308:	d106      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800330a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003316:	e01e      	b.n	8003356 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b12      	cmp	r3, #18
 800331e:	d11a      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800332c:	e013      	b.n	8003356 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003340:	e00a      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003354:	e000      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003356:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003364:	4618      	mov	r0, r3
 8003366:	376c      	adds	r7, #108	; 0x6c
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	50000100 	.word	0x50000100
 8003374:	50000400 	.word	0x50000400
 8003378:	50000500 	.word	0x50000500
 800337c:	20000004 	.word	0x20000004
 8003380:	431bde83 	.word	0x431bde83

08003384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003384:	b480      	push	{r7}
 8003386:	b099      	sub	sp, #100	; 0x64
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339c:	d102      	bne.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	e01a      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d103      	bne.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80033ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	e011      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a67      	ldr	r2, [pc, #412]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e009      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a64      	ldr	r2, [pc, #400]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	e001      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b0      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0a9      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 808d 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8086 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800342e:	e000      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003432:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d040      	beq.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800343c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344e:	035b      	lsls	r3, r3, #13
 8003450:	430b      	orrs	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003456:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d15c      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800349a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800349c:	2b00      	cmp	r3, #0
 800349e:	d14b      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80034bc:	e03c      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d123      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800350c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003520:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003522:	e009      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003546:	4618      	mov	r0, r3
 8003548:	3764      	adds	r7, #100	; 0x64
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	50000100 	.word	0x50000100
 8003558:	50000400 	.word	0x50000400
 800355c:	50000500 	.word	0x50000500
 8003560:	50000300 	.word	0x50000300
 8003564:	50000700 	.word	0x50000700

08003568 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d108      	bne.n	8003594 <ADC_Enable+0x2c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <ADC_Enable+0x2c>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <ADC_Enable+0x2e>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d143      	bne.n	8003622 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <ADC_Enable+0xc4>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02f      	b.n	8003624 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80035d4:	f7fe ff0c 	bl	80023f0 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035da:	e01b      	b.n	8003614 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035dc:	f7fe ff08 	bl	80023f0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d914      	bls.n	8003614 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d00d      	beq.n	8003614 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d1dc      	bne.n	80035dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	8000003f 	.word	0x8000003f

08003630 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <ADC_Disable+0x2c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <ADC_Disable+0x2c>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <ADC_Disable+0x2e>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d047      	beq.n	80036f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030d 	and.w	r3, r3, #13
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10f      	bne.n	8003690 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0202 	orr.w	r2, r2, #2
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2203      	movs	r2, #3
 8003686:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003688:	f7fe feb2 	bl	80023f0 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800368e:	e029      	b.n	80036e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0210 	orr.w	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e023      	b.n	80036f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ac:	f7fe fea0 	bl	80023f0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d914      	bls.n	80036e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e007      	b.n	80036f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d0dc      	beq.n	80036ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 809b 	beq.w	8003858 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003730:	d12a      	bne.n	8003788 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003736:	2b01      	cmp	r3, #1
 8003738:	d126      	bne.n	8003788 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800373e:	2b01      	cmp	r3, #1
 8003740:	d122      	bne.n	8003788 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003742:	230c      	movs	r3, #12
 8003744:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003746:	e014      	b.n	8003772 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4a46      	ldr	r2, [pc, #280]	; (8003864 <ADC_ConversionStop+0x168>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d90d      	bls.n	800376c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f043 0210 	orr.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e076      	b.n	800385a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3301      	adds	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d1e3      	bne.n	8003748 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b60      	cmp	r3, #96	; 0x60
 800378c:	d015      	beq.n	80037ba <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d10e      	bne.n	80037ba <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0210 	orr.w	r2, r2, #16
 80037b8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d015      	beq.n	80037ec <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d10e      	bne.n	80037ec <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0220 	orr.w	r2, r2, #32
 80037ea:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b60      	cmp	r3, #96	; 0x60
 80037f0:	d005      	beq.n	80037fe <ADC_ConversionStop+0x102>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b6c      	cmp	r3, #108	; 0x6c
 80037f6:	d105      	bne.n	8003804 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80037f8:	230c      	movs	r3, #12
 80037fa:	617b      	str	r3, [r7, #20]
        break;
 80037fc:	e005      	b.n	800380a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80037fe:	2308      	movs	r3, #8
 8003800:	617b      	str	r3, [r7, #20]
        break;
 8003802:	e002      	b.n	800380a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003804:	2304      	movs	r3, #4
 8003806:	617b      	str	r3, [r7, #20]
        break;
 8003808:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800380a:	f7fe fdf1 	bl	80023f0 <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003810:	e01b      	b.n	800384a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003812:	f7fe fded 	bl	80023f0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b0b      	cmp	r3, #11
 800381e:	d914      	bls.n	800384a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e007      	b.n	800385a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1dc      	bne.n	8003812 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	000993ff 	.word	0x000993ff

08003868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	60d3      	str	r3, [r2, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <__NVIC_GetPriorityGrouping+0x18>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0307 	and.w	r3, r3, #7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db0a      	blt.n	80038f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <__NVIC_SetPriority+0x4c>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	440b      	add	r3, r1
 80038f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f4:	e00a      	b.n	800390c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <__NVIC_SetPriority+0x50>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3b04      	subs	r3, #4
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	440b      	add	r3, r1
 800390a:	761a      	strb	r2, [r3, #24]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf28      	it	cs
 800393e:	2304      	movcs	r3, #4
 8003940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3304      	adds	r3, #4
 8003946:	2b06      	cmp	r3, #6
 8003948:	d902      	bls.n	8003950 <NVIC_EncodePriority+0x30>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3b03      	subs	r3, #3
 800394e:	e000      	b.n	8003952 <NVIC_EncodePriority+0x32>
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003968:	f04f 31ff 	mov.w	r1, #4294967295
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43d9      	mvns	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	4313      	orrs	r3, r2
         );
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003998:	d301      	bcc.n	800399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <SysTick_Config+0x40>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a6:	210f      	movs	r1, #15
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f7ff ff8e 	bl	80038cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x40>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x40>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff47 	bl	8003868 <__NVIC_SetPriorityGrouping>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f4:	f7ff ff5c 	bl	80038b0 <__NVIC_GetPriorityGrouping>
 80039f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff8e 	bl	8003920 <NVIC_EncodePriority>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff5d 	bl	80038cc <__NVIC_SetPriority>
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ffb0 	bl	8003988 <SysTick_Config>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	e154      	b.n	8003cee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8146 	beq.w	8003ce8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d005      	beq.n	8003a74 <HAL_GPIO_Init+0x40>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d130      	bne.n	8003ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0201 	and.w	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d017      	beq.n	8003b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d123      	bne.n	8003b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a0 	beq.w	8003ce8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba8:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_GPIO_Init+0x2d8>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	4a57      	ldr	r2, [pc, #348]	; (8003d0c <HAL_GPIO_Init+0x2d8>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6193      	str	r3, [r2, #24]
 8003bb4:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <HAL_GPIO_Init+0x2d8>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bc0:	4a53      	ldr	r2, [pc, #332]	; (8003d10 <HAL_GPIO_Init+0x2dc>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bea:	d019      	beq.n	8003c20 <HAL_GPIO_Init+0x1ec>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a49      	ldr	r2, [pc, #292]	; (8003d14 <HAL_GPIO_Init+0x2e0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_GPIO_Init+0x1e8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a48      	ldr	r2, [pc, #288]	; (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00d      	beq.n	8003c18 <HAL_GPIO_Init+0x1e4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a47      	ldr	r2, [pc, #284]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <HAL_GPIO_Init+0x1e0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a46      	ldr	r2, [pc, #280]	; (8003d20 <HAL_GPIO_Init+0x2ec>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_GPIO_Init+0x1dc>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e008      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c10:	2305      	movs	r3, #5
 8003c12:	e006      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c14:	2303      	movs	r3, #3
 8003c16:	e004      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e002      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_GPIO_Init+0x1ee>
 8003c20:	2300      	movs	r3, #0
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	f002 0203 	and.w	r2, r2, #3
 8003c28:	0092      	lsls	r2, r2, #2
 8003c2a:	4093      	lsls	r3, r2
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c32:	4937      	ldr	r1, [pc, #220]	; (8003d10 <HAL_GPIO_Init+0x2dc>)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3301      	adds	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f aea3 	bne.w	8003a44 <HAL_GPIO_Init+0x10>
  }
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40010000 	.word	0x40010000
 8003d14:	48000400 	.word	0x48000400
 8003d18:	48000800 	.word	0x48000800
 8003d1c:	48000c00 	.word	0x48000c00
 8003d20:	48001000 	.word	0x48001000
 8003d24:	40010400 	.word	0x40010400

08003d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
 8003d34:	4613      	mov	r3, r2
 8003d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d38:	787b      	ldrb	r3, [r7, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e081      	b.n	8003e6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe f8e4 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003da8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e006      	b.n	8003de0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d104      	bne.n	8003df2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69d9      	ldr	r1, [r3, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	813b      	strh	r3, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	f040 80f9 	bne.w	8004092 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_I2C_Mem_Write+0x34>
 8003ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0ed      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x4e>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e0e6      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ece:	f7fe fa8f 	bl	80023f0 <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2319      	movs	r3, #25
 8003eda:	2201      	movs	r2, #1
 8003edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fac3 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0d1      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2221      	movs	r2, #33	; 0x21
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f18:	88f8      	ldrh	r0, [r7, #6]
 8003f1a:	893a      	ldrh	r2, [r7, #8]
 8003f1c:	8979      	ldrh	r1, [r7, #10]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4603      	mov	r3, r0
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9d3 	bl	80042d4 <I2C_RequestMemoryWrite>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0a9      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	d90e      	bls.n	8003f68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	8979      	ldrh	r1, [r7, #10]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fc3d 	bl	80047e0 <I2C_TransferConfig>
 8003f66:	e00f      	b.n	8003f88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fc2c 	bl	80047e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fabc 	bl	800450a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e07b      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d034      	beq.n	8004040 <HAL_I2C_Mem_Write+0x1c8>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d130      	bne.n	8004040 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fa3f 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e04d      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2bff      	cmp	r3, #255	; 0xff
 8004000:	d90e      	bls.n	8004020 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	2300      	movs	r3, #0
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fbe1 	bl	80047e0 <I2C_TransferConfig>
 800401e:	e00f      	b.n	8004040 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	8979      	ldrh	r1, [r7, #10]
 8004032:	2300      	movs	r3, #0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fbd0 	bl	80047e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d19e      	bne.n	8003f88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 faa2 	bl	8004598 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01a      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2220      	movs	r2, #32
 8004064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_I2C_Mem_Write+0x224>)
 8004072:	400b      	ands	r3, r1
 8004074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	fe00e800 	.word	0xfe00e800

080040a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	f040 80fd 	bne.w	80042c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_I2C_Mem_Read+0x34>
 80040ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0f1      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Mem_Read+0x4e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e0ea      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f6:	f7fe f97b 	bl	80023f0 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2319      	movs	r3, #25
 8004102:	2201      	movs	r2, #1
 8004104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f9af 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d5      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2240      	movs	r2, #64	; 0x40
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004140:	88f8      	ldrh	r0, [r7, #6]
 8004142:	893a      	ldrh	r2, [r7, #8]
 8004144:	8979      	ldrh	r1, [r7, #10]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4603      	mov	r3, r0
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f913 	bl	800437c <I2C_RequestMemoryRead>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0ad      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2bff      	cmp	r3, #255	; 0xff
 8004170:	d90e      	bls.n	8004190 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	b2da      	uxtb	r2, r3
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_I2C_Mem_Read+0x22c>)
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fb29 	bl	80047e0 <I2C_TransferConfig>
 800418e:	e00f      	b.n	80041b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <HAL_I2C_Mem_Read+0x22c>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fb18 	bl	80047e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	2200      	movs	r2, #0
 80041b8:	2104      	movs	r1, #4
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f956 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07c      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d034      	beq.n	8004270 <HAL_I2C_Mem_Read+0x1d0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d130      	bne.n	8004270 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f927 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e04d      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2bff      	cmp	r3, #255	; 0xff
 8004230:	d90e      	bls.n	8004250 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	b2da      	uxtb	r2, r3
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fac9 	bl	80047e0 <I2C_TransferConfig>
 800424e:	e00f      	b.n	8004270 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	b2da      	uxtb	r2, r3
 8004260:	8979      	ldrh	r1, [r7, #10]
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fab8 	bl	80047e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d19a      	bne.n	80041b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f98a 	bl	8004598 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e01a      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2220      	movs	r2, #32
 8004294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_I2C_Mem_Read+0x230>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	80002400 	.word	0x80002400
 80042d0:	fe00e800 	.word	0xfe00e800

080042d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8979      	ldrh	r1, [r7, #10]
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <I2C_RequestMemoryWrite+0xa4>)
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fa6f 	bl	80047e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f8ff 	bl	800450a <I2C_WaitOnTXISFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e02c      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	629a      	str	r2, [r3, #40]	; 0x28
 8004326:	e015      	b.n	8004354 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b29b      	uxth	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8e5 	bl	800450a <I2C_WaitOnTXISFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e012      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2200      	movs	r2, #0
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f884 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	80002000 	.word	0x80002000

0800437c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	8979      	ldrh	r1, [r7, #10]
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <I2C_RequestMemoryRead+0xa4>)
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa1c 	bl	80047e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f8ac 	bl	800450a <I2C_WaitOnTXISFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02c      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c2:	893b      	ldrh	r3, [r7, #8]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
 80043cc:	e015      	b.n	80043fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	69b9      	ldr	r1, [r7, #24]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f892 	bl	800450a <I2C_WaitOnTXISFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e012      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	; 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f831 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	80002000 	.word	0x80002000

08004424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d103      	bne.n	8004442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d007      	beq.n	8004460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	619a      	str	r2, [r3, #24]
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447c:	e031      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d02d      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fd ffb3 	bl	80023f0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d122      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d113      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e00f      	b.n	8004502 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d0be      	beq.n	800447e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004516:	e033      	b.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f87f 	bl	8004620 <I2C_IsErrorOccurred>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e031      	b.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d025      	beq.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fd ff5c 	bl	80023f0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11a      	bne.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d013      	beq.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e007      	b.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d1c4      	bne.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a4:	e02f      	b.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f838 	bl	8004620 <I2C_IsErrorOccurred>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e02d      	b.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd ff19 	bl	80023f0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11a      	bne.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d013      	beq.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e007      	b.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d1c8      	bne.n	80045a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d068      	beq.n	800471e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2210      	movs	r2, #16
 8004652:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004654:	e049      	b.n	80046ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d045      	beq.n	80046ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fd fec7 	bl	80023f0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_IsErrorOccurred+0x54>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d13a      	bne.n	80046ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004686:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004696:	d121      	bne.n	80046dc <I2C_IsErrorOccurred+0xbc>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800469e:	d01d      	beq.n	80046dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d01a      	beq.n	80046dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046b6:	f7fd fe9b 	bl	80023f0 <HAL_GetTick>
 80046ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046bc:	e00e      	b.n	80046dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046be:	f7fd fe97 	bl	80023f0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b19      	cmp	r3, #25
 80046ca:	d907      	bls.n	80046dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f043 0320 	orr.w	r3, r3, #32
 80046d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046da:	e006      	b.n	80046ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d1e9      	bne.n	80046be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d003      	beq.n	8004700 <I2C_IsErrorOccurred+0xe0>
 80046f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0aa      	beq.n	8004656 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2220      	movs	r2, #32
 800470e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004740:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f043 0308 	orr.w	r3, r3, #8
 8004758:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004762:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800478c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff fe45 	bl	8004424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <I2C_IsErrorOccurred+0x1bc>)
 80047a6:	400b      	ands	r3, r1
 80047a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3728      	adds	r7, #40	; 0x28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	fe00e800 	.word	0xfe00e800

080047e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	817b      	strh	r3, [r7, #10]
 80047ee:	4613      	mov	r3, r2
 80047f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047f8:	7a7b      	ldrb	r3, [r7, #9]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004800:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	4313      	orrs	r3, r2
 800480a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	0d5b      	lsrs	r3, r3, #21
 800481a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <I2C_TransferConfig+0x60>)
 8004820:	430b      	orrs	r3, r1
 8004822:	43db      	mvns	r3, r3
 8004824:	ea02 0103 	and.w	r1, r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	03ff63ff 	.word	0x03ff63ff

08004844 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	d138      	bne.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004864:	2302      	movs	r3, #2
 8004866:	e032      	b.n	80048ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004896:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e000      	b.n	80048ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048cc:	2302      	movs	r3, #2
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d139      	bne.n	8004964 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e033      	b.n	8004966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2224      	movs	r2, #36	; 0x24
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800492c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004974:	b08b      	sub	sp, #44	; 0x2c
 8004976:	af06      	add	r7, sp, #24
 8004978:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0c4      	b.n	8004b0e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fd fb5f 	bl	800205c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2203      	movs	r2, #3
 80049a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f999 	bl	8006ce2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e040      	b.n	8004a38 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	3301      	adds	r3, #1
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	440b      	add	r3, r1
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	3303      	adds	r3, #3
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	440b      	add	r3, r1
 8004a04:	3338      	adds	r3, #56	; 0x38
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	333c      	adds	r3, #60	; 0x3c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3340      	adds	r3, #64	; 0x40
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	3301      	adds	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3b9      	bcc.n	80049b6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	e044      	b.n	8004ad2 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a8a:	7bfa      	ldrb	r2, [r7, #15]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3b5      	bcc.n	8004a48 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	687e      	ldr	r6, [r7, #4]
 8004ae4:	466d      	mov	r5, sp
 8004ae6:	f106 0410 	add.w	r4, r6, #16
 8004aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	1d33      	adds	r3, r6, #4
 8004af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f002 f90e 	bl	8006d18 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f001 b823 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 817d 	beq.w	8004e4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b54:	4bbc      	ldr	r3, [pc, #752]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b60:	4bb9      	ldr	r3, [pc, #740]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d15c      	bne.n	8004c26 <HAL_RCC_OscConfig+0x10e>
 8004b6c:	4bb6      	ldr	r3, [pc, #728]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d155      	bne.n	8004c26 <HAL_RCC_OscConfig+0x10e>
 8004b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x94>
 8004ba6:	4ba8      	ldr	r3, [pc, #672]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e015      	b.n	8004bd8 <HAL_RCC_OscConfig+0xc0>
 8004bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004bc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004bd4:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bdc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004be0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004be4:	fa92 f2a2 	rbit	r2, r2
 8004be8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004bec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f042 0220 	orr.w	r2, r2, #32
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	f002 021f 	and.w	r2, r2, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 811f 	beq.w	8004e4c <HAL_RCC_OscConfig+0x334>
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 8116 	bne.w	8004e4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f000 bfaf 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x12e>
 8004c38:	4b83      	ldr	r3, [pc, #524]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a82      	ldr	r2, [pc, #520]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e036      	b.n	8004cb4 <HAL_RCC_OscConfig+0x19c>
 8004c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0x158>
 8004c56:	4b7c      	ldr	r3, [pc, #496]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7b      	ldr	r2, [pc, #492]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b79      	ldr	r3, [pc, #484]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a78      	ldr	r2, [pc, #480]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e021      	b.n	8004cb4 <HAL_RCC_OscConfig+0x19c>
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x184>
 8004c82:	4b71      	ldr	r3, [pc, #452]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a70      	ldr	r2, [pc, #448]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6d      	ldr	r2, [pc, #436]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x19c>
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b67      	ldr	r3, [pc, #412]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a66      	ldr	r2, [pc, #408]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f023 020f 	bic.w	r2, r3, #15
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	495f      	ldr	r1, [pc, #380]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d059      	beq.n	8004d92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fd fb87 	bl	80023f0 <HAL_GetTick>
 8004ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fd fb82 	bl	80023f0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b64      	cmp	r3, #100	; 0x64
 8004cf6:	d902      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	f000 bf43 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 8004cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004d12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d102      	bne.n	8004d30 <HAL_RCC_OscConfig+0x218>
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	e015      	b.n	8004d5c <HAL_RCC_OscConfig+0x244>
 8004d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004d64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d68:	fa92 f2a2 	rbit	r2, r2
 8004d6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004d70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ab      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x1d0>
 8004d90:	e05d      	b.n	8004e4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd fb2d 	bl	80023f0 <HAL_GetTick>
 8004d96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fb28 	bl	80023f0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b64      	cmp	r3, #100	; 0x64
 8004daa:	d902      	bls.n	8004db2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	f000 bee9 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 8004db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004dc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCC_OscConfig+0x2cc>
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	e015      	b.n	8004e10 <HAL_RCC_OscConfig+0x2f8>
 8004de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <HAL_RCC_OscConfig+0x330>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004e18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e1c:	fa92 f2a2 	rbit	r2, r2
 8004e20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004e24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	f042 0220 	orr.w	r2, r2, #32
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f002 021f 	and.w	r2, r2, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ab      	bne.n	8004d9c <HAL_RCC_OscConfig+0x284>
 8004e44:	e003      	b.n	8004e4e <HAL_RCC_OscConfig+0x336>
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 817d 	beq.w	800515e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e64:	4ba6      	ldr	r3, [pc, #664]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e70:	4ba3      	ldr	r3, [pc, #652]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d172      	bne.n	8004f62 <HAL_RCC_OscConfig+0x44a>
 8004e7c:	4ba0      	ldr	r3, [pc, #640]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d16c      	bne.n	8004f62 <HAL_RCC_OscConfig+0x44a>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004e9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	fab3 f383 	clz	r3, r3
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x3a0>
 8004eb2:	4b93      	ldr	r3, [pc, #588]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	e013      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3c8>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ed0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004edc:	4b88      	ldr	r3, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004ee6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004eea:	fa92 f2a2 	rbit	r2, r2
 8004eee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ef2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ef6:	fab2 f282 	clz	r2, r2
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	f042 0220 	orr.w	r2, r2, #32
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	f002 021f 	and.w	r2, r2, #31
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCC_OscConfig+0x410>
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 be2e 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4b75      	ldr	r3, [pc, #468]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	21f8      	movs	r1, #248	; 0xf8
 8004f3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f46:	fa91 f1a1 	rbit	r1, r1
 8004f4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004f4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004f52:	fab1 f181 	clz	r1, r1
 8004f56:	b2c9      	uxtb	r1, r1
 8004f58:	408b      	lsls	r3, r1
 8004f5a:	4969      	ldr	r1, [pc, #420]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f60:	e0fd      	b.n	800515e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8088 	beq.w	8005084 <HAL_RCC_OscConfig+0x56c>
 8004f74:	2301      	movs	r3, #1
 8004f76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004f86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fa26 	bl	80023f0 <HAL_GetTick>
 8004fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fd fa21 	bl	80023f0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	f000 bde2 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004fca:	fa93 f3a3 	rbit	r3, r3
 8004fce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004fd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d102      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x4d8>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	e013      	b.n	8005018 <HAL_RCC_OscConfig+0x500>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005002:	2302      	movs	r3, #2
 8005004:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005008:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005014:	4b3a      	ldr	r3, [pc, #232]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2202      	movs	r2, #2
 800501a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800501e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005022:	fa92 f2a2 	rbit	r2, r2
 8005026:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800502a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800502e:	fab2 f282 	clz	r2, r2
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	f042 0220 	orr.w	r2, r2, #32
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f002 021f 	and.w	r2, r2, #31
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f202 	lsl.w	r2, r1, r2
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0af      	beq.n	8004faa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	21f8      	movs	r1, #248	; 0xf8
 8005060:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005068:	fa91 f1a1 	rbit	r1, r1
 800506c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005070:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005074:	fab1 f181 	clz	r1, r1
 8005078:	b2c9      	uxtb	r1, r1
 800507a:	408b      	lsls	r3, r1
 800507c:	4920      	ldr	r1, [pc, #128]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
 8005082:	e06c      	b.n	800515e <HAL_RCC_OscConfig+0x646>
 8005084:	2301      	movs	r3, #1
 8005086:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005096:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fd f99e 	bl	80023f0 <HAL_GetTick>
 80050b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fd f999 	bl	80023f0 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d902      	bls.n	80050d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	f000 bd5a 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d104      	bne.n	8005104 <HAL_RCC_OscConfig+0x5ec>
 80050fa:	4b01      	ldr	r3, [pc, #4]	; (8005100 <HAL_RCC_OscConfig+0x5e8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	e015      	b.n	800512c <HAL_RCC_OscConfig+0x614>
 8005100:	40021000 	.word	0x40021000
 8005104:	2302      	movs	r3, #2
 8005106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005116:	2302      	movs	r3, #2
 8005118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800511c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005120:	fa93 f3a3 	rbit	r3, r3
 8005124:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005128:	4bc8      	ldr	r3, [pc, #800]	; (800544c <HAL_RCC_OscConfig+0x934>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2202      	movs	r2, #2
 800512e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005132:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005136:	fa92 f2a2 	rbit	r2, r2
 800513a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800513e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005142:	fab2 f282 	clz	r2, r2
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	f042 0220 	orr.w	r2, r2, #32
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	f002 021f 	and.w	r2, r2, #31
 8005152:	2101      	movs	r1, #1
 8005154:	fa01 f202 	lsl.w	r2, r1, r2
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1ad      	bne.n	80050ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8110 	beq.w	8005394 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d079      	beq.n	8005278 <HAL_RCC_OscConfig+0x760>
 8005184:	2301      	movs	r3, #1
 8005186:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	4bab      	ldr	r3, [pc, #684]	; (8005450 <HAL_RCC_OscConfig+0x938>)
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	2301      	movs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ae:	f7fd f91f 	bl	80023f0 <HAL_GetTick>
 80051b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b8:	f7fd f91a 	bl	80023f0 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d902      	bls.n	80051ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	f000 bcdb 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 80051ce:	2302      	movs	r3, #2
 80051d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051e8:	2202      	movs	r2, #2
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	fa93 f2a3 	rbit	r2, r3
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	2202      	movs	r2, #2
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	fa93 f2a3 	rbit	r2, r3
 800521e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005226:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005228:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0x934>)
 800522a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005234:	2102      	movs	r1, #2
 8005236:	6019      	str	r1, [r3, #0]
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	fa93 f1a3 	rbit	r1, r3
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800524e:	6019      	str	r1, [r3, #0]
  return result;
 8005250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005254:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2101      	movs	r1, #1
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0a0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x6a0>
 8005276:	e08d      	b.n	8005394 <HAL_RCC_OscConfig+0x87c>
 8005278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	fa93 f2a3 	rbit	r2, r3
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800529a:	601a      	str	r2, [r3, #0]
  return result;
 800529c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b68      	ldr	r3, [pc, #416]	; (8005450 <HAL_RCC_OscConfig+0x938>)
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ba:	f7fd f899 	bl	80023f0 <HAL_GetTick>
 80052be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c4:	f7fd f894 	bl	80023f0 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d902      	bls.n	80052da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	f000 bc55 	b.w	8005b84 <HAL_RCC_OscConfig+0x106c>
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052e2:	2202      	movs	r2, #2
 80052e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	fa93 f2a3 	rbit	r2, r3
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005306:	2202      	movs	r2, #2
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	fa93 f2a3 	rbit	r2, r3
 8005318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	2202      	movs	r2, #2
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	fa93 f2a3 	rbit	r2, r3
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005344:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005346:	4b41      	ldr	r3, [pc, #260]	; (800544c <HAL_RCC_OscConfig+0x934>)
 8005348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005352:	2102      	movs	r1, #2
 8005354:	6019      	str	r1, [r3, #0]
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	fa93 f1a3 	rbit	r1, r3
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800536c:	6019      	str	r1, [r3, #0]
  return result;
 800536e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005372:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	fab3 f383 	clz	r3, r3
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2101      	movs	r1, #1
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d197      	bne.n	80052c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 81a1 	beq.w	80056ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b0:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_RCC_OscConfig+0x934>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_RCC_OscConfig+0x934>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4a22      	ldr	r2, [pc, #136]	; (800544c <HAL_RCC_OscConfig+0x934>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	61d3      	str	r3, [r2, #28]
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <HAL_RCC_OscConfig+0x934>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80053e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_RCC_OscConfig+0x93c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11a      	bne.n	800542c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f6:	4b17      	ldr	r3, [pc, #92]	; (8005454 <HAL_RCC_OscConfig+0x93c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_RCC_OscConfig+0x93c>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005400:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005402:	f7fc fff5 	bl	80023f0 <HAL_GetTick>
 8005406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540a:	e009      	b.n	8005420 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540c:	f7fc fff0 	bl	80023f0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b64      	cmp	r3, #100	; 0x64
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e3b1      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <HAL_RCC_OscConfig+0x93c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ef      	beq.n	800540c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10d      	bne.n	8005458 <HAL_RCC_OscConfig+0x940>
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCC_OscConfig+0x934>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	4a02      	ldr	r2, [pc, #8]	; (800544c <HAL_RCC_OscConfig+0x934>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6213      	str	r3, [r2, #32]
 8005448:	e03c      	b.n	80054c4 <HAL_RCC_OscConfig+0x9ac>
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
 8005450:	10908120 	.word	0x10908120
 8005454:	40007000 	.word	0x40007000
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10c      	bne.n	8005482 <HAL_RCC_OscConfig+0x96a>
 8005468:	4bc1      	ldr	r3, [pc, #772]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	4ac0      	ldr	r2, [pc, #768]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	6213      	str	r3, [r2, #32]
 8005474:	4bbe      	ldr	r3, [pc, #760]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	4abd      	ldr	r2, [pc, #756]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 800547a:	f023 0304 	bic.w	r3, r3, #4
 800547e:	6213      	str	r3, [r2, #32]
 8005480:	e020      	b.n	80054c4 <HAL_RCC_OscConfig+0x9ac>
 8005482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x994>
 8005492:	4bb7      	ldr	r3, [pc, #732]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	4ab6      	ldr	r2, [pc, #728]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	6213      	str	r3, [r2, #32]
 800549e:	4bb4      	ldr	r3, [pc, #720]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4ab3      	ldr	r2, [pc, #716]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6213      	str	r3, [r2, #32]
 80054aa:	e00b      	b.n	80054c4 <HAL_RCC_OscConfig+0x9ac>
 80054ac:	4bb0      	ldr	r3, [pc, #704]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	4aaf      	ldr	r2, [pc, #700]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	6213      	str	r3, [r2, #32]
 80054b8:	4bad      	ldr	r3, [pc, #692]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	4aac      	ldr	r2, [pc, #688]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80054be:	f023 0304 	bic.w	r3, r3, #4
 80054c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8081 	beq.w	80055d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d6:	f7fc ff8b 	bl	80023f0 <HAL_GetTick>
 80054da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	e00b      	b.n	80054f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fc ff86 	bl	80023f0 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e345      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005500:	2202      	movs	r2, #2
 8005502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	fa93 f2a3 	rbit	r2, r3
 8005512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005516:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005524:	2202      	movs	r2, #2
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	fa93 f2a3 	rbit	r2, r3
 8005536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800553e:	601a      	str	r2, [r3, #0]
  return result;
 8005540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005544:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005548:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d102      	bne.n	8005564 <HAL_RCC_OscConfig+0xa4c>
 800555e:	4b84      	ldr	r3, [pc, #528]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	e013      	b.n	800558c <HAL_RCC_OscConfig+0xa74>
 8005564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005568:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800556c:	2202      	movs	r2, #2
 800556e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	fa93 f2a3 	rbit	r2, r3
 800557e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005582:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	4b79      	ldr	r3, [pc, #484]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005590:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005594:	2102      	movs	r1, #2
 8005596:	6011      	str	r1, [r2, #0]
 8005598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800559c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	fa92 f1a2 	rbit	r1, r2
 80055a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055ae:	6011      	str	r1, [r2, #0]
  return result;
 80055b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	fab2 f282 	clz	r2, r2
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	f002 021f 	and.w	r2, r2, #31
 80055ca:	2101      	movs	r1, #1
 80055cc:	fa01 f202 	lsl.w	r2, r1, r2
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d084      	beq.n	80054e0 <HAL_RCC_OscConfig+0x9c8>
 80055d6:	e07f      	b.n	80056d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d8:	f7fc ff0a 	bl	80023f0 <HAL_GetTick>
 80055dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e0:	e00b      	b.n	80055fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e2:	f7fc ff05 	bl	80023f0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e2c4      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
 80055fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005602:	2202      	movs	r2, #2
 8005604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	fa93 f2a3 	rbit	r2, r3
 8005614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005618:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005626:	2202      	movs	r2, #2
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005640:	601a      	str	r2, [r3, #0]
  return result;
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800564a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f043 0302 	orr.w	r3, r3, #2
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d102      	bne.n	8005666 <HAL_RCC_OscConfig+0xb4e>
 8005660:	4b43      	ldr	r3, [pc, #268]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	e013      	b.n	800568e <HAL_RCC_OscConfig+0xb76>
 8005666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800566e:	2202      	movs	r2, #2
 8005670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	fa93 f2a3 	rbit	r2, r3
 8005680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005684:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	4b39      	ldr	r3, [pc, #228]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005692:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005696:	2102      	movs	r1, #2
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800569e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	fa92 f1a2 	rbit	r1, r2
 80056a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056b0:	6011      	str	r1, [r2, #0]
  return result;
 80056b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	fab2 f282 	clz	r2, r2
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	f002 021f 	and.w	r2, r2, #31
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f202 	lsl.w	r2, r1, r2
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d184      	bne.n	80055e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d105      	bne.n	80056ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e0:	4b23      	ldr	r3, [pc, #140]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4a22      	ldr	r2, [pc, #136]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 80056e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8242 	beq.w	8005b82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056fe:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <HAL_RCC_OscConfig+0xc58>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b08      	cmp	r3, #8
 8005708:	f000 8213 	beq.w	8005b32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b02      	cmp	r3, #2
 800571a:	f040 8162 	bne.w	80059e2 <HAL_RCC_OscConfig+0xeca>
 800571e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005722:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005726:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800572a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005730:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	fa93 f2a3 	rbit	r2, r3
 800573a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005742:	601a      	str	r2, [r3, #0]
  return result;
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800574c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fc fe44 	bl	80023f0 <HAL_GetTick>
 8005768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576c:	e00c      	b.n	8005788 <HAL_RCC_OscConfig+0xc70>
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005774:	f7fc fe3c 	bl	80023f0 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e1fd      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
 8005788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	fa93 f2a3 	rbit	r2, r3
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057ac:	601a      	str	r2, [r3, #0]
  return result;
 80057ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b8:	fab3 f383 	clz	r3, r3
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d102      	bne.n	80057d2 <HAL_RCC_OscConfig+0xcba>
 80057cc:	4bb0      	ldr	r3, [pc, #704]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	e027      	b.n	8005822 <HAL_RCC_OscConfig+0xd0a>
 80057d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	fa93 f2a3 	rbit	r2, r3
 80057ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	fa93 f2a3 	rbit	r2, r3
 8005814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005818:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4b9c      	ldr	r3, [pc, #624]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005826:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800582a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800582e:	6011      	str	r1, [r2, #0]
 8005830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005834:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	fa92 f1a2 	rbit	r1, r2
 800583e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005842:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005846:	6011      	str	r1, [r2, #0]
  return result;
 8005848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800584c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	fab2 f282 	clz	r2, r2
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	f042 0220 	orr.w	r2, r2, #32
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	f002 021f 	and.w	r2, r2, #31
 8005862:	2101      	movs	r1, #1
 8005864:	fa01 f202 	lsl.w	r2, r1, r2
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d182      	bne.n	8005774 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586e:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	430b      	orrs	r3, r1
 8005890:	497f      	ldr	r1, [pc, #508]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
 8005896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800589e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	fa93 f2a3 	rbit	r2, r3
 80058b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80058ba:	601a      	str	r2, [r3, #0]
  return result;
 80058bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80058c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c6:	fab3 f383 	clz	r3, r3
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	461a      	mov	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fc fd88 	bl	80023f0 <HAL_GetTick>
 80058e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058e4:	e009      	b.n	80058fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fc fd83 	bl	80023f0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e144      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
 80058fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	fa93 f2a3 	rbit	r2, r3
 8005916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800591e:	601a      	str	r2, [r3, #0]
  return result;
 8005920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005924:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d102      	bne.n	8005944 <HAL_RCC_OscConfig+0xe2c>
 800593e:	4b54      	ldr	r3, [pc, #336]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	e027      	b.n	8005994 <HAL_RCC_OscConfig+0xe7c>
 8005944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005948:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800594c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005956:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	fa93 f2a3 	rbit	r2, r3
 8005960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005964:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	fa93 f2a3 	rbit	r2, r3
 8005986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005998:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800599c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	fa92 f1a2 	rbit	r1, r2
 80059b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80059b8:	6011      	str	r1, [r2, #0]
  return result;
 80059ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	fab2 f282 	clz	r2, r2
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	f002 021f 	and.w	r2, r2, #31
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f202 	lsl.w	r2, r1, r2
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d082      	beq.n	80058e6 <HAL_RCC_OscConfig+0xdce>
 80059e0:	e0cf      	b.n	8005b82 <HAL_RCC_OscConfig+0x106a>
 80059e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80059ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	fa93 f2a3 	rbit	r2, r3
 80059fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a06:	601a      	str	r2, [r3, #0]
  return result;
 8005a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a28:	f7fc fce2 	bl	80023f0 <HAL_GetTick>
 8005a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a30:	e009      	b.n	8005a46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fc fcdd 	bl	80023f0 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e09e      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
 8005a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	fa93 f2a3 	rbit	r2, r3
 8005a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a6a:	601a      	str	r2, [r3, #0]
  return result;
 8005a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a76:	fab3 f383 	clz	r3, r3
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d104      	bne.n	8005a94 <HAL_RCC_OscConfig+0xf7c>
 8005a8a:	4b01      	ldr	r3, [pc, #4]	; (8005a90 <HAL_RCC_OscConfig+0xf78>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	e029      	b.n	8005ae4 <HAL_RCC_OscConfig+0xfcc>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	fa93 f2a3 	rbit	r2, r3
 8005ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005acc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	fa93 f2a3 	rbit	r2, r3
 8005ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ada:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCC_OscConfig+0x1078>)
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ae8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005af0:	6011      	str	r1, [r2, #0]
 8005af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	fa92 f1a2 	rbit	r1, r2
 8005b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b08:	6011      	str	r1, [r2, #0]
  return result;
 8005b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	fab2 f282 	clz	r2, r2
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	f042 0220 	orr.w	r2, r2, #32
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	f002 021f 	and.w	r2, r2, #31
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d180      	bne.n	8005a32 <HAL_RCC_OscConfig+0xf1a>
 8005b30:	e027      	b.n	8005b82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e01e      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_OscConfig+0x1078>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d10b      	bne.n	8005b7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d001      	beq.n	8005b82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40021000 	.word	0x40021000

08005b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b09e      	sub	sp, #120	; 0x78
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e162      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bac:	4b90      	ldr	r3, [pc, #576]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d910      	bls.n	8005bdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b8d      	ldr	r3, [pc, #564]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 0207 	bic.w	r2, r3, #7
 8005bc2:	498b      	ldr	r1, [pc, #556]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b89      	ldr	r3, [pc, #548]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e14a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be8:	4b82      	ldr	r3, [pc, #520]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	497f      	ldr	r1, [pc, #508]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80dc 	beq.w	8005dc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d13c      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xf6>
 8005c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c18:	fa93 f3a3 	rbit	r3, r3
 8005c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c20:	fab3 f383 	clz	r3, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xa6>
 8005c34:	4b6f      	ldr	r3, [pc, #444]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	e00f      	b.n	8005c5a <HAL_RCC_ClockConfig+0xc6>
 8005c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c42:	fa93 f3a3 	rbit	r3, r3
 8005c46:	667b      	str	r3, [r7, #100]	; 0x64
 8005c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c50:	fa93 f3a3 	rbit	r3, r3
 8005c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c56:	4b67      	ldr	r3, [pc, #412]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c62:	fa92 f2a2 	rbit	r2, r2
 8005c66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c6a:	fab2 f282 	clz	r2, r2
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	f042 0220 	orr.w	r2, r2, #32
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	f002 021f 	and.w	r2, r2, #31
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d17b      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e0f3      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d13c      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x178>
 8005c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9a:	fa93 f3a3 	rbit	r3, r3
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x128>
 8005cb6:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	e00f      	b.n	8005cdc <HAL_RCC_ClockConfig+0x148>
 8005cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc4:	fa93 f3a3 	rbit	r3, r3
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cce:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd2:	fa93 f3a3 	rbit	r3, r3
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd8:	4b46      	ldr	r3, [pc, #280]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ce0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce4:	fa92 f2a2 	rbit	r2, r2
 8005ce8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cec:	fab2 f282 	clz	r2, r2
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	f042 0220 	orr.w	r2, r2, #32
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	f002 021f 	and.w	r2, r2, #31
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d13a      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0b2      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	fa93 f3a3 	rbit	r3, r3
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1a:	fab3 f383 	clz	r3, r3
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d102      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x1a0>
 8005d2e:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	e00d      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1bc>
 8005d34:	2302      	movs	r3, #2
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	fa93 f3a3 	rbit	r3, r3
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	2302      	movs	r3, #2
 8005d42:	623b      	str	r3, [r7, #32]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	fa93 f3a3 	rbit	r3, r3
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2202      	movs	r2, #2
 8005d52:	61ba      	str	r2, [r7, #24]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	fa92 f2a2 	rbit	r2, r2
 8005d5a:	617a      	str	r2, [r7, #20]
  return result;
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	fab2 f282 	clz	r2, r2
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	f002 021f 	and.w	r2, r2, #31
 8005d6e:	2101      	movs	r1, #1
 8005d70:	fa01 f202 	lsl.w	r2, r1, r2
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e079      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	491a      	ldr	r1, [pc, #104]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fc fb2e 	bl	80023f0 <HAL_GetTick>
 8005d94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fc fb2a 	bl	80023f0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e061      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_RCC_ClockConfig+0x260>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d214      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 0207 	bic.w	r2, r3, #7
 8005dd6:	4906      	ldr	r1, [pc, #24]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <HAL_RCC_ClockConfig+0x25c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e040      	b.n	8005e72 <HAL_RCC_ClockConfig+0x2de>
 8005df0:	40022000 	.word	0x40022000
 8005df4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <HAL_RCC_ClockConfig+0x2e8>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	491a      	ldr	r1, [pc, #104]	; (8005e7c <HAL_RCC_ClockConfig+0x2e8>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RCC_ClockConfig+0x2e8>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4912      	ldr	r1, [pc, #72]	; (8005e7c <HAL_RCC_ClockConfig+0x2e8>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e36:	f000 f829 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <HAL_RCC_ClockConfig+0x2e8>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e44:	22f0      	movs	r2, #240	; 0xf0
 8005e46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	fa92 f2a2 	rbit	r2, r2
 8005e4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	fab2 f282 	clz	r2, r2
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	40d3      	lsrs	r3, r2
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x2ec>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCC_ClockConfig+0x2f0>)
 8005e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCC_ClockConfig+0x2f4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fc fa7c 	bl	8002368 <HAL_InitTick>
  
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3778      	adds	r7, #120	; 0x78
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	08009f60 	.word	0x08009f60
 8005e84:	20000004 	.word	0x20000004
 8005e88:	20000008 	.word	0x20000008

08005e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b08b      	sub	sp, #44	; 0x2c
 8005e90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005ea6:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x30>
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8005eba:	e03c      	b.n	8005f36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ebc:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ebe:	623b      	str	r3, [r7, #32]
      break;
 8005ec0:	e03c      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ec8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ecc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	fa92 f2a2 	rbit	r2, r2
 8005ed4:	607a      	str	r2, [r7, #4]
  return result;
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	fab2 f282 	clz	r2, r2
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	40d3      	lsrs	r3, r2
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ee6:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	220f      	movs	r2, #15
 8005ef0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	fa92 f2a2 	rbit	r2, r2
 8005ef8:	60fa      	str	r2, [r7, #12]
  return result;
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	fab2 f282 	clz	r2, r2
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	40d3      	lsrs	r3, r2
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f06:	5cd3      	ldrb	r3, [r2, r3]
 8005f08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f14:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
 8005f24:	e004      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	623b      	str	r3, [r7, #32]
      break;
 8005f34:	e002      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f38:	623b      	str	r3, [r7, #32]
      break;
 8005f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	372c      	adds	r7, #44	; 0x2c
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	007a1200 	.word	0x007a1200
 8005f54:	08009f78 	.word	0x08009f78
 8005f58:	08009f88 	.word	0x08009f88
 8005f5c:	003d0900 	.word	0x003d0900

08005f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000004 	.word	0x20000004

08005f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005f7e:	f7ff ffef 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005f82:	4601      	mov	r1, r0
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	fa92 f2a2 	rbit	r2, r2
 8005f98:	603a      	str	r2, [r7, #0]
  return result;
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	fab2 f282 	clz	r2, r2
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	40d3      	lsrs	r3, r2
 8005fa4:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	08009f70 	.word	0x08009f70

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005fc2:	f7ff ffcd 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005fd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005fd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	fa92 f2a2 	rbit	r2, r2
 8005fdc:	603a      	str	r2, [r7, #0]
  return result;
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	fab2 f282 	clz	r2, r2
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	40d3      	lsrs	r3, r2
 8005fe8:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x40>)
 8005fea:	5cd3      	ldrb	r3, [r2, r3]
 8005fec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	08009f70 	.word	0x08009f70

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b092      	sub	sp, #72	; 0x48
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006010:	2300      	movs	r3, #0
 8006012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80d4 	beq.w	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006024:	4b4e      	ldr	r3, [pc, #312]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10e      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006030:	4b4b      	ldr	r3, [pc, #300]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	4a4a      	ldr	r2, [pc, #296]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603a:	61d3      	str	r3, [r2, #28]
 800603c:	4b48      	ldr	r3, [pc, #288]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b45      	ldr	r3, [pc, #276]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a41      	ldr	r2, [pc, #260]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fc f9c3 	bl	80023f0 <HAL_GetTick>
 800606a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fc f9bf 	bl	80023f0 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e169      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b38      	ldr	r3, [pc, #224]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800608c:	4b34      	ldr	r3, [pc, #208]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8084 	beq.w	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d07c      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ac:	4b2c      	ldr	r3, [pc, #176]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	fa93 f3a3 	rbit	r3, r3
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	fab3 f383 	clz	r3, r3
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	461a      	mov	r2, r3
 80060d6:	2301      	movs	r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d04b      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fc f96f 	bl	80023f0 <HAL_GetTick>
 8006112:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	e00a      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fc f96b 	bl	80023f0 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	; 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e113      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800612c:	2302      	movs	r3, #2
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	fa93 f3a3 	rbit	r3, r3
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
 8006138:	2302      	movs	r3, #2
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	fa93 f3a3 	rbit	r3, r3
 8006142:	61fb      	str	r3, [r7, #28]
  return result;
 8006144:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f043 0302 	orr.w	r3, r3, #2
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d108      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800615a:	4b01      	ldr	r3, [pc, #4]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	e00d      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006160:	40021000 	.word	0x40021000
 8006164:	40007000 	.word	0x40007000
 8006168:	10908100 	.word	0x10908100
 800616c:	2302      	movs	r3, #2
 800616e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fa93 f3a3 	rbit	r3, r3
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	4b78      	ldr	r3, [pc, #480]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2202      	movs	r2, #2
 800617e:	613a      	str	r2, [r7, #16]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	fa92 f2a2 	rbit	r2, r2
 8006186:	60fa      	str	r2, [r7, #12]
  return result;
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	fab2 f282 	clz	r2, r2
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	f002 021f 	and.w	r2, r2, #31
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f202 	lsl.w	r2, r1, r2
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0b7      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80061a6:	4b6d      	ldr	r3, [pc, #436]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	496a      	ldr	r1, [pc, #424]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d105      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c0:	4b66      	ldr	r3, [pc, #408]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4a65      	ldr	r2, [pc, #404]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061d8:	4b60      	ldr	r3, [pc, #384]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f023 0203 	bic.w	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	495d      	ldr	r1, [pc, #372]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061f6:	4b59      	ldr	r3, [pc, #356]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	4956      	ldr	r1, [pc, #344]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006204:	4313      	orrs	r3, r2
 8006206:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006214:	4b51      	ldr	r3, [pc, #324]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	494e      	ldr	r1, [pc, #312]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006232:	4b4a      	ldr	r3, [pc, #296]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4947      	ldr	r1, [pc, #284]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006250:	4b42      	ldr	r3, [pc, #264]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	493f      	ldr	r1, [pc, #252]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800626e:	4b3b      	ldr	r3, [pc, #236]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f023 0220 	bic.w	r2, r3, #32
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4938      	ldr	r1, [pc, #224]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800627c:	4313      	orrs	r3, r2
 800627e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800628c:	4b33      	ldr	r3, [pc, #204]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	4930      	ldr	r1, [pc, #192]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629a:	4313      	orrs	r3, r2
 800629c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062aa:	4b2c      	ldr	r3, [pc, #176]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	4929      	ldr	r1, [pc, #164]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4921      	ldr	r1, [pc, #132]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	491a      	ldr	r1, [pc, #104]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	4912      	ldr	r1, [pc, #72]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	490b      	ldr	r1, [pc, #44]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3748      	adds	r7, #72	; 0x48
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e040      	b.n	80063f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb fe26 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8b6 	bl	8006510 <UART_SetConfig>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e022      	b.n	80063f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa7e 	bl	80068b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb05 	bl	80069fc <UART_CheckIdleState>
 80063f2:	4603      	mov	r3, r0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006410:	2b20      	cmp	r3, #32
 8006412:	d178      	bne.n	8006506 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_UART_Transmit+0x24>
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e071      	b.n	8006508 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2221      	movs	r2, #33	; 0x21
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006432:	f7fb ffdd 	bl	80023f0 <HAL_GetTick>
 8006436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d108      	bne.n	8006464 <HAL_UART_Transmit+0x68>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	e003      	b.n	800646c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800646c:	e030      	b.n	80064d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb67 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e03c      	b.n	8006508 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a0:	b292      	uxth	r2, r2
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	3302      	adds	r3, #2
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	e008      	b.n	80064be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	b292      	uxth	r2, r2
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1c8      	bne.n	800646e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2140      	movs	r1, #64	; 0x40
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb30 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e005      	b.n	8006508 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800653e:	f023 030c 	bic.w	r3, r3, #12
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	6979      	ldr	r1, [r7, #20]
 8006548:	430b      	orrs	r3, r1
 800654a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4aa7      	ldr	r2, [pc, #668]	; (8006828 <UART_SetConfig+0x318>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d120      	bne.n	80065d2 <UART_SetConfig+0xc2>
 8006590:	4ba6      	ldr	r3, [pc, #664]	; (800682c <UART_SetConfig+0x31c>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b03      	cmp	r3, #3
 800659a:	d817      	bhi.n	80065cc <UART_SetConfig+0xbc>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <UART_SetConfig+0x94>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065c1 	.word	0x080065c1
 80065ac:	080065c7 	.word	0x080065c7
 80065b0:	080065bb 	.word	0x080065bb
 80065b4:	2301      	movs	r3, #1
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e0b5      	b.n	8006726 <UART_SetConfig+0x216>
 80065ba:	2302      	movs	r3, #2
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e0b2      	b.n	8006726 <UART_SetConfig+0x216>
 80065c0:	2304      	movs	r3, #4
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e0af      	b.n	8006726 <UART_SetConfig+0x216>
 80065c6:	2308      	movs	r3, #8
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e0ac      	b.n	8006726 <UART_SetConfig+0x216>
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e0a9      	b.n	8006726 <UART_SetConfig+0x216>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a96      	ldr	r2, [pc, #600]	; (8006830 <UART_SetConfig+0x320>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d124      	bne.n	8006626 <UART_SetConfig+0x116>
 80065dc:	4b93      	ldr	r3, [pc, #588]	; (800682c <UART_SetConfig+0x31c>)
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065e8:	d011      	beq.n	800660e <UART_SetConfig+0xfe>
 80065ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ee:	d817      	bhi.n	8006620 <UART_SetConfig+0x110>
 80065f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f4:	d011      	beq.n	800661a <UART_SetConfig+0x10a>
 80065f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fa:	d811      	bhi.n	8006620 <UART_SetConfig+0x110>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <UART_SetConfig+0xf8>
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d006      	beq.n	8006614 <UART_SetConfig+0x104>
 8006606:	e00b      	b.n	8006620 <UART_SetConfig+0x110>
 8006608:	2300      	movs	r3, #0
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e08b      	b.n	8006726 <UART_SetConfig+0x216>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e088      	b.n	8006726 <UART_SetConfig+0x216>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e085      	b.n	8006726 <UART_SetConfig+0x216>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e082      	b.n	8006726 <UART_SetConfig+0x216>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e07f      	b.n	8006726 <UART_SetConfig+0x216>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a82      	ldr	r2, [pc, #520]	; (8006834 <UART_SetConfig+0x324>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d124      	bne.n	800667a <UART_SetConfig+0x16a>
 8006630:	4b7e      	ldr	r3, [pc, #504]	; (800682c <UART_SetConfig+0x31c>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800663c:	d011      	beq.n	8006662 <UART_SetConfig+0x152>
 800663e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006642:	d817      	bhi.n	8006674 <UART_SetConfig+0x164>
 8006644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006648:	d011      	beq.n	800666e <UART_SetConfig+0x15e>
 800664a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800664e:	d811      	bhi.n	8006674 <UART_SetConfig+0x164>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x14c>
 8006654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006658:	d006      	beq.n	8006668 <UART_SetConfig+0x158>
 800665a:	e00b      	b.n	8006674 <UART_SetConfig+0x164>
 800665c:	2300      	movs	r3, #0
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e061      	b.n	8006726 <UART_SetConfig+0x216>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e05e      	b.n	8006726 <UART_SetConfig+0x216>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e05b      	b.n	8006726 <UART_SetConfig+0x216>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e058      	b.n	8006726 <UART_SetConfig+0x216>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e055      	b.n	8006726 <UART_SetConfig+0x216>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a6e      	ldr	r2, [pc, #440]	; (8006838 <UART_SetConfig+0x328>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d124      	bne.n	80066ce <UART_SetConfig+0x1be>
 8006684:	4b69      	ldr	r3, [pc, #420]	; (800682c <UART_SetConfig+0x31c>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800668c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006690:	d011      	beq.n	80066b6 <UART_SetConfig+0x1a6>
 8006692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006696:	d817      	bhi.n	80066c8 <UART_SetConfig+0x1b8>
 8006698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800669c:	d011      	beq.n	80066c2 <UART_SetConfig+0x1b2>
 800669e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a2:	d811      	bhi.n	80066c8 <UART_SetConfig+0x1b8>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <UART_SetConfig+0x1a0>
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ac:	d006      	beq.n	80066bc <UART_SetConfig+0x1ac>
 80066ae:	e00b      	b.n	80066c8 <UART_SetConfig+0x1b8>
 80066b0:	2300      	movs	r3, #0
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e037      	b.n	8006726 <UART_SetConfig+0x216>
 80066b6:	2302      	movs	r3, #2
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e034      	b.n	8006726 <UART_SetConfig+0x216>
 80066bc:	2304      	movs	r3, #4
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e031      	b.n	8006726 <UART_SetConfig+0x216>
 80066c2:	2308      	movs	r3, #8
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e02e      	b.n	8006726 <UART_SetConfig+0x216>
 80066c8:	2310      	movs	r3, #16
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e02b      	b.n	8006726 <UART_SetConfig+0x216>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5a      	ldr	r2, [pc, #360]	; (800683c <UART_SetConfig+0x32c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d124      	bne.n	8006722 <UART_SetConfig+0x212>
 80066d8:	4b54      	ldr	r3, [pc, #336]	; (800682c <UART_SetConfig+0x31c>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80066e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066e4:	d011      	beq.n	800670a <UART_SetConfig+0x1fa>
 80066e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066ea:	d817      	bhi.n	800671c <UART_SetConfig+0x20c>
 80066ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066f0:	d011      	beq.n	8006716 <UART_SetConfig+0x206>
 80066f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066f6:	d811      	bhi.n	800671c <UART_SetConfig+0x20c>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <UART_SetConfig+0x1f4>
 80066fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006700:	d006      	beq.n	8006710 <UART_SetConfig+0x200>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x20c>
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e00d      	b.n	8006726 <UART_SetConfig+0x216>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e00a      	b.n	8006726 <UART_SetConfig+0x216>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e007      	b.n	8006726 <UART_SetConfig+0x216>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e004      	b.n	8006726 <UART_SetConfig+0x216>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e001      	b.n	8006726 <UART_SetConfig+0x216>
 8006722:	2310      	movs	r3, #16
 8006724:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672e:	d15b      	bne.n	80067e8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006730:	7ffb      	ldrb	r3, [r7, #31]
 8006732:	2b08      	cmp	r3, #8
 8006734:	d827      	bhi.n	8006786 <UART_SetConfig+0x276>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x22c>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006761 	.word	0x08006761
 8006740:	08006769 	.word	0x08006769
 8006744:	08006771 	.word	0x08006771
 8006748:	08006787 	.word	0x08006787
 800674c:	08006777 	.word	0x08006777
 8006750:	08006787 	.word	0x08006787
 8006754:	08006787 	.word	0x08006787
 8006758:	08006787 	.word	0x08006787
 800675c:	0800677f 	.word	0x0800677f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7ff fc0a 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 8006764:	61b8      	str	r0, [r7, #24]
        break;
 8006766:	e013      	b.n	8006790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7ff fc28 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 800676c:	61b8      	str	r0, [r7, #24]
        break;
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006770:	4b33      	ldr	r3, [pc, #204]	; (8006840 <UART_SetConfig+0x330>)
 8006772:	61bb      	str	r3, [r7, #24]
        break;
 8006774:	e00c      	b.n	8006790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006776:	f7ff fb89 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 800677a:	61b8      	str	r0, [r7, #24]
        break;
 800677c:	e008      	b.n	8006790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006782:	61bb      	str	r3, [r7, #24]
        break;
 8006784:	e004      	b.n	8006790 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	77bb      	strb	r3, [r7, #30]
        break;
 800678e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8082 	beq.w	800689c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	005a      	lsls	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	441a      	add	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b0f      	cmp	r3, #15
 80067b2:	d916      	bls.n	80067e2 <UART_SetConfig+0x2d2>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ba:	d212      	bcs.n	80067e2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f023 030f 	bic.w	r3, r3, #15
 80067c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	89fb      	ldrh	r3, [r7, #14]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	89fa      	ldrh	r2, [r7, #14]
 80067de:	60da      	str	r2, [r3, #12]
 80067e0:	e05c      	b.n	800689c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	77bb      	strb	r3, [r7, #30]
 80067e6:	e059      	b.n	800689c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e8:	7ffb      	ldrb	r3, [r7, #31]
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d835      	bhi.n	800685a <UART_SetConfig+0x34a>
 80067ee:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <UART_SetConfig+0x2e4>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006845 	.word	0x08006845
 8006800:	0800685b 	.word	0x0800685b
 8006804:	0800684b 	.word	0x0800684b
 8006808:	0800685b 	.word	0x0800685b
 800680c:	0800685b 	.word	0x0800685b
 8006810:	0800685b 	.word	0x0800685b
 8006814:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7ff fbae 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 800681c:	61b8      	str	r0, [r7, #24]
        break;
 800681e:	e021      	b.n	8006864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7ff fbcc 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 8006824:	61b8      	str	r0, [r7, #24]
        break;
 8006826:	e01d      	b.n	8006864 <UART_SetConfig+0x354>
 8006828:	40013800 	.word	0x40013800
 800682c:	40021000 	.word	0x40021000
 8006830:	40004400 	.word	0x40004400
 8006834:	40004800 	.word	0x40004800
 8006838:	40004c00 	.word	0x40004c00
 800683c:	40005000 	.word	0x40005000
 8006840:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <UART_SetConfig+0x3a4>)
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e00c      	b.n	8006864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7ff fb1f 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 800684e:	61b8      	str	r0, [r7, #24]
        break;
 8006850:	e008      	b.n	8006864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61bb      	str	r3, [r7, #24]
        break;
 8006858:	e004      	b.n	8006864 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	77bb      	strb	r3, [r7, #30]
        break;
 8006862:	bf00      	nop
    }

    if (pclk != 0U)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d018      	beq.n	800689c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	085a      	lsrs	r2, r3, #1
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d909      	bls.n	8006898 <UART_SetConfig+0x388>
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d205      	bcs.n	8006898 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	e001      	b.n	800689c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	007a1200 	.word	0x007a1200

080068b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01a      	beq.n	80069ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b6:	d10a      	bne.n	80069ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	605a      	str	r2, [r3, #4]
  }
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b098      	sub	sp, #96	; 0x60
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a0c:	f7fb fcf0 	bl	80023f0 <HAL_GetTick>
 8006a10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d12e      	bne.n	8006a7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f88c 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d021      	beq.n	8006a7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e062      	b.n	8006b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d149      	bne.n	8006b20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f856 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d03c      	beq.n	8006b20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	617b      	str	r3, [r7, #20]
   return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e011      	b.n	8006b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3758      	adds	r7, #88	; 0x58
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5c:	e049      	b.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d045      	beq.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fb fc43 	bl	80023f0 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e048      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d031      	beq.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d110      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f838 	bl	8006c1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2208      	movs	r2, #8
 8006bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e029      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bcc:	d111      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f81e 	bl	8006c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e00f      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d0a6      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b095      	sub	sp, #84	; 0x54
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
 8006c42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d118      	bne.n	8006cc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f023 0310 	bic.w	r3, r3, #16
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6979      	ldr	r1, [r7, #20]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e6      	bne.n	8006c90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cd6:	bf00      	nop
 8006cd8:	3754      	adds	r7, #84	; 0x54
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006cee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4013      	ands	r3, r2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d18:	b084      	sub	sp, #16
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	f107 0014 	add.w	r0, r7, #20
 8006d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	b004      	add	sp, #16
 8006d58:	4770      	bx	lr
	...

08006d5c <__errno>:
 8006d5c:	4b01      	ldr	r3, [pc, #4]	; (8006d64 <__errno+0x8>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000010 	.word	0x20000010

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4d0d      	ldr	r5, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2600      	movs	r6, #0
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4d0b      	ldr	r5, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f003 f8ae 	bl	8009edc <_init>
 8006d80:	1b64      	subs	r4, r4, r5
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2600      	movs	r6, #0
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d90:	4798      	blx	r3
 8006d92:	3601      	adds	r6, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9a:	4798      	blx	r3
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	0800a3b8 	.word	0x0800a3b8
 8006da4:	0800a3b8 	.word	0x0800a3b8
 8006da8:	0800a3b8 	.word	0x0800a3b8
 8006dac:	0800a3bc 	.word	0x0800a3bc

08006db0 <memset>:
 8006db0:	4402      	add	r2, r0
 8006db2:	4603      	mov	r3, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d100      	bne.n	8006dba <memset+0xa>
 8006db8:	4770      	bx	lr
 8006dba:	f803 1b01 	strb.w	r1, [r3], #1
 8006dbe:	e7f9      	b.n	8006db4 <memset+0x4>

08006dc0 <__cvt>:
 8006dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	ec55 4b10 	vmov	r4, r5, d0
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	460e      	mov	r6, r1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	462b      	mov	r3, r5
 8006dd0:	bfbb      	ittet	lt
 8006dd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dd6:	461d      	movlt	r5, r3
 8006dd8:	2300      	movge	r3, #0
 8006dda:	232d      	movlt	r3, #45	; 0x2d
 8006ddc:	700b      	strb	r3, [r1, #0]
 8006dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006de4:	4691      	mov	r9, r2
 8006de6:	f023 0820 	bic.w	r8, r3, #32
 8006dea:	bfbc      	itt	lt
 8006dec:	4622      	movlt	r2, r4
 8006dee:	4614      	movlt	r4, r2
 8006df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df4:	d005      	beq.n	8006e02 <__cvt+0x42>
 8006df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dfa:	d100      	bne.n	8006dfe <__cvt+0x3e>
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	2102      	movs	r1, #2
 8006e00:	e000      	b.n	8006e04 <__cvt+0x44>
 8006e02:	2103      	movs	r1, #3
 8006e04:	ab03      	add	r3, sp, #12
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	ab02      	add	r3, sp, #8
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	ec45 4b10 	vmov	d0, r4, r5
 8006e10:	4653      	mov	r3, sl
 8006e12:	4632      	mov	r2, r6
 8006e14:	f000 fcec 	bl	80077f0 <_dtoa_r>
 8006e18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	d102      	bne.n	8006e26 <__cvt+0x66>
 8006e20:	f019 0f01 	tst.w	r9, #1
 8006e24:	d022      	beq.n	8006e6c <__cvt+0xac>
 8006e26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e2a:	eb07 0906 	add.w	r9, r7, r6
 8006e2e:	d110      	bne.n	8006e52 <__cvt+0x92>
 8006e30:	783b      	ldrb	r3, [r7, #0]
 8006e32:	2b30      	cmp	r3, #48	; 0x30
 8006e34:	d10a      	bne.n	8006e4c <__cvt+0x8c>
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e42:	b918      	cbnz	r0, 8006e4c <__cvt+0x8c>
 8006e44:	f1c6 0601 	rsb	r6, r6, #1
 8006e48:	f8ca 6000 	str.w	r6, [sl]
 8006e4c:	f8da 3000 	ldr.w	r3, [sl]
 8006e50:	4499      	add	r9, r3
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e5e:	b108      	cbz	r0, 8006e64 <__cvt+0xa4>
 8006e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e64:	2230      	movs	r2, #48	; 0x30
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	454b      	cmp	r3, r9
 8006e6a:	d307      	bcc.n	8006e7c <__cvt+0xbc>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e70:	1bdb      	subs	r3, r3, r7
 8006e72:	4638      	mov	r0, r7
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	b004      	add	sp, #16
 8006e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7c:	1c59      	adds	r1, r3, #1
 8006e7e:	9103      	str	r1, [sp, #12]
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e7f0      	b.n	8006e66 <__cvt+0xa6>

08006e84 <__exponent>:
 8006e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e86:	4603      	mov	r3, r0
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	bfb8      	it	lt
 8006e8c:	4249      	neglt	r1, r1
 8006e8e:	f803 2b02 	strb.w	r2, [r3], #2
 8006e92:	bfb4      	ite	lt
 8006e94:	222d      	movlt	r2, #45	; 0x2d
 8006e96:	222b      	movge	r2, #43	; 0x2b
 8006e98:	2909      	cmp	r1, #9
 8006e9a:	7042      	strb	r2, [r0, #1]
 8006e9c:	dd2a      	ble.n	8006ef4 <__exponent+0x70>
 8006e9e:	f10d 0407 	add.w	r4, sp, #7
 8006ea2:	46a4      	mov	ip, r4
 8006ea4:	270a      	movs	r7, #10
 8006ea6:	46a6      	mov	lr, r4
 8006ea8:	460a      	mov	r2, r1
 8006eaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006eae:	fb07 1516 	mls	r5, r7, r6, r1
 8006eb2:	3530      	adds	r5, #48	; 0x30
 8006eb4:	2a63      	cmp	r2, #99	; 0x63
 8006eb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006eba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	dcf1      	bgt.n	8006ea6 <__exponent+0x22>
 8006ec2:	3130      	adds	r1, #48	; 0x30
 8006ec4:	f1ae 0502 	sub.w	r5, lr, #2
 8006ec8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ecc:	1c44      	adds	r4, r0, #1
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4561      	cmp	r1, ip
 8006ed2:	d30a      	bcc.n	8006eea <__exponent+0x66>
 8006ed4:	f10d 0209 	add.w	r2, sp, #9
 8006ed8:	eba2 020e 	sub.w	r2, r2, lr
 8006edc:	4565      	cmp	r5, ip
 8006ede:	bf88      	it	hi
 8006ee0:	2200      	movhi	r2, #0
 8006ee2:	4413      	add	r3, r2
 8006ee4:	1a18      	subs	r0, r3, r0
 8006ee6:	b003      	add	sp, #12
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ef2:	e7ed      	b.n	8006ed0 <__exponent+0x4c>
 8006ef4:	2330      	movs	r3, #48	; 0x30
 8006ef6:	3130      	adds	r1, #48	; 0x30
 8006ef8:	7083      	strb	r3, [r0, #2]
 8006efa:	70c1      	strb	r1, [r0, #3]
 8006efc:	1d03      	adds	r3, r0, #4
 8006efe:	e7f1      	b.n	8006ee4 <__exponent+0x60>

08006f00 <_printf_float>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	ed2d 8b02 	vpush	{d8}
 8006f08:	b08d      	sub	sp, #52	; 0x34
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f10:	4616      	mov	r6, r2
 8006f12:	461f      	mov	r7, r3
 8006f14:	4605      	mov	r5, r0
 8006f16:	f001 fa59 	bl	80083cc <_localeconv_r>
 8006f1a:	f8d0 a000 	ldr.w	sl, [r0]
 8006f1e:	4650      	mov	r0, sl
 8006f20:	f7f9 f956 	bl	80001d0 <strlen>
 8006f24:	2300      	movs	r3, #0
 8006f26:	930a      	str	r3, [sp, #40]	; 0x28
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	9305      	str	r3, [sp, #20]
 8006f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f34:	3307      	adds	r3, #7
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	f103 0208 	add.w	r2, r3, #8
 8006f3e:	f8c8 2000 	str.w	r2, [r8]
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f52:	9307      	str	r3, [sp, #28]
 8006f54:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f58:	ee08 0a10 	vmov	s16, r0
 8006f5c:	4b9f      	ldr	r3, [pc, #636]	; (80071dc <_printf_float+0x2dc>)
 8006f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295
 8006f66:	f7f9 fde1 	bl	8000b2c <__aeabi_dcmpun>
 8006f6a:	bb88      	cbnz	r0, 8006fd0 <_printf_float+0xd0>
 8006f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f70:	4b9a      	ldr	r3, [pc, #616]	; (80071dc <_printf_float+0x2dc>)
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	f7f9 fdbb 	bl	8000af0 <__aeabi_dcmple>
 8006f7a:	bb48      	cbnz	r0, 8006fd0 <_printf_float+0xd0>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2300      	movs	r3, #0
 8006f80:	4640      	mov	r0, r8
 8006f82:	4649      	mov	r1, r9
 8006f84:	f7f9 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8006f88:	b110      	cbz	r0, 8006f90 <_printf_float+0x90>
 8006f8a:	232d      	movs	r3, #45	; 0x2d
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	4b93      	ldr	r3, [pc, #588]	; (80071e0 <_printf_float+0x2e0>)
 8006f92:	4894      	ldr	r0, [pc, #592]	; (80071e4 <_printf_float+0x2e4>)
 8006f94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f98:	bf94      	ite	ls
 8006f9a:	4698      	movls	r8, r3
 8006f9c:	4680      	movhi	r8, r0
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	9b05      	ldr	r3, [sp, #20]
 8006fa4:	f023 0204 	bic.w	r2, r3, #4
 8006fa8:	6022      	str	r2, [r4, #0]
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	9700      	str	r7, [sp, #0]
 8006fb0:	4633      	mov	r3, r6
 8006fb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 f9d8 	bl	800736c <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f040 8090 	bne.w	80070e2 <_printf_float+0x1e2>
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	b00d      	add	sp, #52	; 0x34
 8006fc8:	ecbd 8b02 	vpop	{d8}
 8006fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fda8 	bl	8000b2c <__aeabi_dcmpun>
 8006fdc:	b140      	cbz	r0, 8006ff0 <_printf_float+0xf0>
 8006fde:	464b      	mov	r3, r9
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfbc      	itt	lt
 8006fe4:	232d      	movlt	r3, #45	; 0x2d
 8006fe6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fea:	487f      	ldr	r0, [pc, #508]	; (80071e8 <_printf_float+0x2e8>)
 8006fec:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <_printf_float+0x2ec>)
 8006fee:	e7d1      	b.n	8006f94 <_printf_float+0x94>
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ff6:	9206      	str	r2, [sp, #24]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	d13f      	bne.n	800707c <_printf_float+0x17c>
 8006ffc:	2306      	movs	r3, #6
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	9b05      	ldr	r3, [sp, #20]
 8007002:	6861      	ldr	r1, [r4, #4]
 8007004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007008:	2300      	movs	r3, #0
 800700a:	9303      	str	r3, [sp, #12]
 800700c:	ab0a      	add	r3, sp, #40	; 0x28
 800700e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007012:	ab09      	add	r3, sp, #36	; 0x24
 8007014:	ec49 8b10 	vmov	d0, r8, r9
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007020:	4628      	mov	r0, r5
 8007022:	f7ff fecd 	bl	8006dc0 <__cvt>
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800702a:	2b47      	cmp	r3, #71	; 0x47
 800702c:	4680      	mov	r8, r0
 800702e:	d108      	bne.n	8007042 <_printf_float+0x142>
 8007030:	1cc8      	adds	r0, r1, #3
 8007032:	db02      	blt.n	800703a <_printf_float+0x13a>
 8007034:	6863      	ldr	r3, [r4, #4]
 8007036:	4299      	cmp	r1, r3
 8007038:	dd41      	ble.n	80070be <_printf_float+0x1be>
 800703a:	f1ab 0b02 	sub.w	fp, fp, #2
 800703e:	fa5f fb8b 	uxtb.w	fp, fp
 8007042:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007046:	d820      	bhi.n	800708a <_printf_float+0x18a>
 8007048:	3901      	subs	r1, #1
 800704a:	465a      	mov	r2, fp
 800704c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007050:	9109      	str	r1, [sp, #36]	; 0x24
 8007052:	f7ff ff17 	bl	8006e84 <__exponent>
 8007056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007058:	1813      	adds	r3, r2, r0
 800705a:	2a01      	cmp	r2, #1
 800705c:	4681      	mov	r9, r0
 800705e:	6123      	str	r3, [r4, #16]
 8007060:	dc02      	bgt.n	8007068 <_printf_float+0x168>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	07d2      	lsls	r2, r2, #31
 8007066:	d501      	bpl.n	800706c <_printf_float+0x16c>
 8007068:	3301      	adds	r3, #1
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007070:	2b00      	cmp	r3, #0
 8007072:	d09c      	beq.n	8006fae <_printf_float+0xae>
 8007074:	232d      	movs	r3, #45	; 0x2d
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707a:	e798      	b.n	8006fae <_printf_float+0xae>
 800707c:	9a06      	ldr	r2, [sp, #24]
 800707e:	2a47      	cmp	r2, #71	; 0x47
 8007080:	d1be      	bne.n	8007000 <_printf_float+0x100>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1bc      	bne.n	8007000 <_printf_float+0x100>
 8007086:	2301      	movs	r3, #1
 8007088:	e7b9      	b.n	8006ffe <_printf_float+0xfe>
 800708a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800708e:	d118      	bne.n	80070c2 <_printf_float+0x1c2>
 8007090:	2900      	cmp	r1, #0
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	dd0b      	ble.n	80070ae <_printf_float+0x1ae>
 8007096:	6121      	str	r1, [r4, #16]
 8007098:	b913      	cbnz	r3, 80070a0 <_printf_float+0x1a0>
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d502      	bpl.n	80070a6 <_printf_float+0x1a6>
 80070a0:	3301      	adds	r3, #1
 80070a2:	440b      	add	r3, r1
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80070a8:	f04f 0900 	mov.w	r9, #0
 80070ac:	e7de      	b.n	800706c <_printf_float+0x16c>
 80070ae:	b913      	cbnz	r3, 80070b6 <_printf_float+0x1b6>
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	07d2      	lsls	r2, r2, #31
 80070b4:	d501      	bpl.n	80070ba <_printf_float+0x1ba>
 80070b6:	3302      	adds	r3, #2
 80070b8:	e7f4      	b.n	80070a4 <_printf_float+0x1a4>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e7f2      	b.n	80070a4 <_printf_float+0x1a4>
 80070be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c4:	4299      	cmp	r1, r3
 80070c6:	db05      	blt.n	80070d4 <_printf_float+0x1d4>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	6121      	str	r1, [r4, #16]
 80070cc:	07d8      	lsls	r0, r3, #31
 80070ce:	d5ea      	bpl.n	80070a6 <_printf_float+0x1a6>
 80070d0:	1c4b      	adds	r3, r1, #1
 80070d2:	e7e7      	b.n	80070a4 <_printf_float+0x1a4>
 80070d4:	2900      	cmp	r1, #0
 80070d6:	bfd4      	ite	le
 80070d8:	f1c1 0202 	rsble	r2, r1, #2
 80070dc:	2201      	movgt	r2, #1
 80070de:	4413      	add	r3, r2
 80070e0:	e7e0      	b.n	80070a4 <_printf_float+0x1a4>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	055a      	lsls	r2, r3, #21
 80070e6:	d407      	bmi.n	80070f8 <_printf_float+0x1f8>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	4642      	mov	r2, r8
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	d12c      	bne.n	8007150 <_printf_float+0x250>
 80070f6:	e764      	b.n	8006fc2 <_printf_float+0xc2>
 80070f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070fc:	f240 80e0 	bls.w	80072c0 <_printf_float+0x3c0>
 8007100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d034      	beq.n	800717a <_printf_float+0x27a>
 8007110:	4a37      	ldr	r2, [pc, #220]	; (80071f0 <_printf_float+0x2f0>)
 8007112:	2301      	movs	r3, #1
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af51 	beq.w	8006fc2 <_printf_float+0xc2>
 8007120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007124:	429a      	cmp	r2, r3
 8007126:	db02      	blt.n	800712e <_printf_float+0x22e>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07d8      	lsls	r0, r3, #31
 800712c:	d510      	bpl.n	8007150 <_printf_float+0x250>
 800712e:	ee18 3a10 	vmov	r3, s16
 8007132:	4652      	mov	r2, sl
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f af41 	beq.w	8006fc2 <_printf_float+0xc2>
 8007140:	f04f 0800 	mov.w	r8, #0
 8007144:	f104 091a 	add.w	r9, r4, #26
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	3b01      	subs	r3, #1
 800714c:	4543      	cmp	r3, r8
 800714e:	dc09      	bgt.n	8007164 <_printf_float+0x264>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	079b      	lsls	r3, r3, #30
 8007154:	f100 8105 	bmi.w	8007362 <_printf_float+0x462>
 8007158:	68e0      	ldr	r0, [r4, #12]
 800715a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800715c:	4298      	cmp	r0, r3
 800715e:	bfb8      	it	lt
 8007160:	4618      	movlt	r0, r3
 8007162:	e730      	b.n	8006fc6 <_printf_float+0xc6>
 8007164:	2301      	movs	r3, #1
 8007166:	464a      	mov	r2, r9
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af27 	beq.w	8006fc2 <_printf_float+0xc2>
 8007174:	f108 0801 	add.w	r8, r8, #1
 8007178:	e7e6      	b.n	8007148 <_printf_float+0x248>
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	dc39      	bgt.n	80071f4 <_printf_float+0x2f4>
 8007180:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <_printf_float+0x2f0>)
 8007182:	2301      	movs	r3, #1
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af19 	beq.w	8006fc2 <_printf_float+0xc2>
 8007190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007194:	4313      	orrs	r3, r2
 8007196:	d102      	bne.n	800719e <_printf_float+0x29e>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d5d8      	bpl.n	8007150 <_printf_float+0x250>
 800719e:	ee18 3a10 	vmov	r3, s16
 80071a2:	4652      	mov	r2, sl
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f af09 	beq.w	8006fc2 <_printf_float+0xc2>
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	f104 0a1a 	add.w	sl, r4, #26
 80071b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ba:	425b      	negs	r3, r3
 80071bc:	454b      	cmp	r3, r9
 80071be:	dc01      	bgt.n	80071c4 <_printf_float+0x2c4>
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	e792      	b.n	80070ea <_printf_float+0x1ea>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4652      	mov	r2, sl
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f aef7 	beq.w	8006fc2 <_printf_float+0xc2>
 80071d4:	f109 0901 	add.w	r9, r9, #1
 80071d8:	e7ee      	b.n	80071b8 <_printf_float+0x2b8>
 80071da:	bf00      	nop
 80071dc:	7fefffff 	.word	0x7fefffff
 80071e0:	08009f9c 	.word	0x08009f9c
 80071e4:	08009fa0 	.word	0x08009fa0
 80071e8:	08009fa8 	.word	0x08009fa8
 80071ec:	08009fa4 	.word	0x08009fa4
 80071f0:	08009fac 	.word	0x08009fac
 80071f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bfa8      	it	ge
 80071fc:	461a      	movge	r2, r3
 80071fe:	2a00      	cmp	r2, #0
 8007200:	4691      	mov	r9, r2
 8007202:	dc37      	bgt.n	8007274 <_printf_float+0x374>
 8007204:	f04f 0b00 	mov.w	fp, #0
 8007208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720c:	f104 021a 	add.w	r2, r4, #26
 8007210:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	eba3 0309 	sub.w	r3, r3, r9
 8007218:	455b      	cmp	r3, fp
 800721a:	dc33      	bgt.n	8007284 <_printf_float+0x384>
 800721c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007220:	429a      	cmp	r2, r3
 8007222:	db3b      	blt.n	800729c <_printf_float+0x39c>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	07da      	lsls	r2, r3, #31
 8007228:	d438      	bmi.n	800729c <_printf_float+0x39c>
 800722a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722c:	9a05      	ldr	r2, [sp, #20]
 800722e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007230:	1a9a      	subs	r2, r3, r2
 8007232:	eba3 0901 	sub.w	r9, r3, r1
 8007236:	4591      	cmp	r9, r2
 8007238:	bfa8      	it	ge
 800723a:	4691      	movge	r9, r2
 800723c:	f1b9 0f00 	cmp.w	r9, #0
 8007240:	dc35      	bgt.n	80072ae <_printf_float+0x3ae>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800724a:	f104 0a1a 	add.w	sl, r4, #26
 800724e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	eba3 0309 	sub.w	r3, r3, r9
 8007258:	4543      	cmp	r3, r8
 800725a:	f77f af79 	ble.w	8007150 <_printf_float+0x250>
 800725e:	2301      	movs	r3, #1
 8007260:	4652      	mov	r2, sl
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f aeaa 	beq.w	8006fc2 <_printf_float+0xc2>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	e7ec      	b.n	800724e <_printf_float+0x34e>
 8007274:	4613      	mov	r3, r2
 8007276:	4631      	mov	r1, r6
 8007278:	4642      	mov	r2, r8
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	d1c0      	bne.n	8007204 <_printf_float+0x304>
 8007282:	e69e      	b.n	8006fc2 <_printf_float+0xc2>
 8007284:	2301      	movs	r3, #1
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	9205      	str	r2, [sp, #20]
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f ae97 	beq.w	8006fc2 <_printf_float+0xc2>
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	f10b 0b01 	add.w	fp, fp, #1
 800729a:	e7b9      	b.n	8007210 <_printf_float+0x310>
 800729c:	ee18 3a10 	vmov	r3, s16
 80072a0:	4652      	mov	r2, sl
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	d1be      	bne.n	800722a <_printf_float+0x32a>
 80072ac:	e689      	b.n	8006fc2 <_printf_float+0xc2>
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	464b      	mov	r3, r9
 80072b2:	4442      	add	r2, r8
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	d1c1      	bne.n	8007242 <_printf_float+0x342>
 80072be:	e680      	b.n	8006fc2 <_printf_float+0xc2>
 80072c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	dc01      	bgt.n	80072ca <_printf_float+0x3ca>
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d538      	bpl.n	800733c <_printf_float+0x43c>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4642      	mov	r2, r8
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f ae74 	beq.w	8006fc2 <_printf_float+0xc2>
 80072da:	ee18 3a10 	vmov	r3, s16
 80072de:	4652      	mov	r2, sl
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f ae6b 	beq.w	8006fc2 <_printf_float+0xc2>
 80072ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	f7f9 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f8:	b9d8      	cbnz	r0, 8007332 <_printf_float+0x432>
 80072fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fc:	f108 0201 	add.w	r2, r8, #1
 8007300:	3b01      	subs	r3, #1
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d10e      	bne.n	800732a <_printf_float+0x42a>
 800730c:	e659      	b.n	8006fc2 <_printf_float+0xc2>
 800730e:	2301      	movs	r3, #1
 8007310:	4652      	mov	r2, sl
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae52 	beq.w	8006fc2 <_printf_float+0xc2>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007324:	3b01      	subs	r3, #1
 8007326:	4543      	cmp	r3, r8
 8007328:	dcf1      	bgt.n	800730e <_printf_float+0x40e>
 800732a:	464b      	mov	r3, r9
 800732c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007330:	e6dc      	b.n	80070ec <_printf_float+0x1ec>
 8007332:	f04f 0800 	mov.w	r8, #0
 8007336:	f104 0a1a 	add.w	sl, r4, #26
 800733a:	e7f2      	b.n	8007322 <_printf_float+0x422>
 800733c:	2301      	movs	r3, #1
 800733e:	4642      	mov	r2, r8
 8007340:	e7df      	b.n	8007302 <_printf_float+0x402>
 8007342:	2301      	movs	r3, #1
 8007344:	464a      	mov	r2, r9
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f ae38 	beq.w	8006fc2 <_printf_float+0xc2>
 8007352:	f108 0801 	add.w	r8, r8, #1
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800735a:	1a5b      	subs	r3, r3, r1
 800735c:	4543      	cmp	r3, r8
 800735e:	dcf0      	bgt.n	8007342 <_printf_float+0x442>
 8007360:	e6fa      	b.n	8007158 <_printf_float+0x258>
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	f104 0919 	add.w	r9, r4, #25
 800736a:	e7f4      	b.n	8007356 <_printf_float+0x456>

0800736c <_printf_common>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	4616      	mov	r6, r2
 8007372:	4699      	mov	r9, r3
 8007374:	688a      	ldr	r2, [r1, #8]
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800737c:	4293      	cmp	r3, r2
 800737e:	bfb8      	it	lt
 8007380:	4613      	movlt	r3, r2
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007388:	4607      	mov	r7, r0
 800738a:	460c      	mov	r4, r1
 800738c:	b10a      	cbz	r2, 8007392 <_printf_common+0x26>
 800738e:	3301      	adds	r3, #1
 8007390:	6033      	str	r3, [r6, #0]
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	0699      	lsls	r1, r3, #26
 8007396:	bf42      	ittt	mi
 8007398:	6833      	ldrmi	r3, [r6, #0]
 800739a:	3302      	addmi	r3, #2
 800739c:	6033      	strmi	r3, [r6, #0]
 800739e:	6825      	ldr	r5, [r4, #0]
 80073a0:	f015 0506 	ands.w	r5, r5, #6
 80073a4:	d106      	bne.n	80073b4 <_printf_common+0x48>
 80073a6:	f104 0a19 	add.w	sl, r4, #25
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	6832      	ldr	r2, [r6, #0]
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dc26      	bgt.n	8007402 <_printf_common+0x96>
 80073b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b8:	1e13      	subs	r3, r2, #0
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	bf18      	it	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	0692      	lsls	r2, r2, #26
 80073c2:	d42b      	bmi.n	800741c <_printf_common+0xb0>
 80073c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c8:	4649      	mov	r1, r9
 80073ca:	4638      	mov	r0, r7
 80073cc:	47c0      	blx	r8
 80073ce:	3001      	adds	r0, #1
 80073d0:	d01e      	beq.n	8007410 <_printf_common+0xa4>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	68e5      	ldr	r5, [r4, #12]
 80073d6:	6832      	ldr	r2, [r6, #0]
 80073d8:	f003 0306 	and.w	r3, r3, #6
 80073dc:	2b04      	cmp	r3, #4
 80073de:	bf08      	it	eq
 80073e0:	1aad      	subeq	r5, r5, r2
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	6922      	ldr	r2, [r4, #16]
 80073e6:	bf0c      	ite	eq
 80073e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ec:	2500      	movne	r5, #0
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bfc4      	itt	gt
 80073f2:	1a9b      	subgt	r3, r3, r2
 80073f4:	18ed      	addgt	r5, r5, r3
 80073f6:	2600      	movs	r6, #0
 80073f8:	341a      	adds	r4, #26
 80073fa:	42b5      	cmp	r5, r6
 80073fc:	d11a      	bne.n	8007434 <_printf_common+0xc8>
 80073fe:	2000      	movs	r0, #0
 8007400:	e008      	b.n	8007414 <_printf_common+0xa8>
 8007402:	2301      	movs	r3, #1
 8007404:	4652      	mov	r2, sl
 8007406:	4649      	mov	r1, r9
 8007408:	4638      	mov	r0, r7
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d103      	bne.n	8007418 <_printf_common+0xac>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007418:	3501      	adds	r5, #1
 800741a:	e7c6      	b.n	80073aa <_printf_common+0x3e>
 800741c:	18e1      	adds	r1, r4, r3
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	2030      	movs	r0, #48	; 0x30
 8007422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007426:	4422      	add	r2, r4
 8007428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800742c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007430:	3302      	adds	r3, #2
 8007432:	e7c7      	b.n	80073c4 <_printf_common+0x58>
 8007434:	2301      	movs	r3, #1
 8007436:	4622      	mov	r2, r4
 8007438:	4649      	mov	r1, r9
 800743a:	4638      	mov	r0, r7
 800743c:	47c0      	blx	r8
 800743e:	3001      	adds	r0, #1
 8007440:	d0e6      	beq.n	8007410 <_printf_common+0xa4>
 8007442:	3601      	adds	r6, #1
 8007444:	e7d9      	b.n	80073fa <_printf_common+0x8e>
	...

08007448 <_printf_i>:
 8007448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	7e0f      	ldrb	r7, [r1, #24]
 800744e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007450:	2f78      	cmp	r7, #120	; 0x78
 8007452:	4691      	mov	r9, r2
 8007454:	4680      	mov	r8, r0
 8007456:	460c      	mov	r4, r1
 8007458:	469a      	mov	sl, r3
 800745a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800745e:	d807      	bhi.n	8007470 <_printf_i+0x28>
 8007460:	2f62      	cmp	r7, #98	; 0x62
 8007462:	d80a      	bhi.n	800747a <_printf_i+0x32>
 8007464:	2f00      	cmp	r7, #0
 8007466:	f000 80d8 	beq.w	800761a <_printf_i+0x1d2>
 800746a:	2f58      	cmp	r7, #88	; 0x58
 800746c:	f000 80a3 	beq.w	80075b6 <_printf_i+0x16e>
 8007470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007478:	e03a      	b.n	80074f0 <_printf_i+0xa8>
 800747a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800747e:	2b15      	cmp	r3, #21
 8007480:	d8f6      	bhi.n	8007470 <_printf_i+0x28>
 8007482:	a101      	add	r1, pc, #4	; (adr r1, 8007488 <_printf_i+0x40>)
 8007484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074f5 	.word	0x080074f5
 8007490:	08007471 	.word	0x08007471
 8007494:	08007471 	.word	0x08007471
 8007498:	08007471 	.word	0x08007471
 800749c:	08007471 	.word	0x08007471
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007471 	.word	0x08007471
 80074a8:	08007471 	.word	0x08007471
 80074ac:	08007471 	.word	0x08007471
 80074b0:	08007471 	.word	0x08007471
 80074b4:	08007601 	.word	0x08007601
 80074b8:	08007525 	.word	0x08007525
 80074bc:	080075e3 	.word	0x080075e3
 80074c0:	08007471 	.word	0x08007471
 80074c4:	08007471 	.word	0x08007471
 80074c8:	08007623 	.word	0x08007623
 80074cc:	08007471 	.word	0x08007471
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007471 	.word	0x08007471
 80074d8:	08007471 	.word	0x08007471
 80074dc:	080075eb 	.word	0x080075eb
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	1d1a      	adds	r2, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0a3      	b.n	800763c <_printf_i+0x1f4>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	6829      	ldr	r1, [r5, #0]
 80074f8:	0606      	lsls	r6, r0, #24
 80074fa:	f101 0304 	add.w	r3, r1, #4
 80074fe:	d50a      	bpl.n	8007516 <_printf_i+0xce>
 8007500:	680e      	ldr	r6, [r1, #0]
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	2e00      	cmp	r6, #0
 8007506:	da03      	bge.n	8007510 <_printf_i+0xc8>
 8007508:	232d      	movs	r3, #45	; 0x2d
 800750a:	4276      	negs	r6, r6
 800750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007510:	485e      	ldr	r0, [pc, #376]	; (800768c <_printf_i+0x244>)
 8007512:	230a      	movs	r3, #10
 8007514:	e019      	b.n	800754a <_printf_i+0x102>
 8007516:	680e      	ldr	r6, [r1, #0]
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800751e:	bf18      	it	ne
 8007520:	b236      	sxthne	r6, r6
 8007522:	e7ef      	b.n	8007504 <_printf_i+0xbc>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	6820      	ldr	r0, [r4, #0]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	6029      	str	r1, [r5, #0]
 800752c:	0601      	lsls	r1, r0, #24
 800752e:	d501      	bpl.n	8007534 <_printf_i+0xec>
 8007530:	681e      	ldr	r6, [r3, #0]
 8007532:	e002      	b.n	800753a <_printf_i+0xf2>
 8007534:	0646      	lsls	r6, r0, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0xe8>
 8007538:	881e      	ldrh	r6, [r3, #0]
 800753a:	4854      	ldr	r0, [pc, #336]	; (800768c <_printf_i+0x244>)
 800753c:	2f6f      	cmp	r7, #111	; 0x6f
 800753e:	bf0c      	ite	eq
 8007540:	2308      	moveq	r3, #8
 8007542:	230a      	movne	r3, #10
 8007544:	2100      	movs	r1, #0
 8007546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800754a:	6865      	ldr	r5, [r4, #4]
 800754c:	60a5      	str	r5, [r4, #8]
 800754e:	2d00      	cmp	r5, #0
 8007550:	bfa2      	ittt	ge
 8007552:	6821      	ldrge	r1, [r4, #0]
 8007554:	f021 0104 	bicge.w	r1, r1, #4
 8007558:	6021      	strge	r1, [r4, #0]
 800755a:	b90e      	cbnz	r6, 8007560 <_printf_i+0x118>
 800755c:	2d00      	cmp	r5, #0
 800755e:	d04d      	beq.n	80075fc <_printf_i+0x1b4>
 8007560:	4615      	mov	r5, r2
 8007562:	fbb6 f1f3 	udiv	r1, r6, r3
 8007566:	fb03 6711 	mls	r7, r3, r1, r6
 800756a:	5dc7      	ldrb	r7, [r0, r7]
 800756c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007570:	4637      	mov	r7, r6
 8007572:	42bb      	cmp	r3, r7
 8007574:	460e      	mov	r6, r1
 8007576:	d9f4      	bls.n	8007562 <_printf_i+0x11a>
 8007578:	2b08      	cmp	r3, #8
 800757a:	d10b      	bne.n	8007594 <_printf_i+0x14c>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07de      	lsls	r6, r3, #31
 8007580:	d508      	bpl.n	8007594 <_printf_i+0x14c>
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	6861      	ldr	r1, [r4, #4]
 8007586:	4299      	cmp	r1, r3
 8007588:	bfde      	ittt	le
 800758a:	2330      	movle	r3, #48	; 0x30
 800758c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007594:	1b52      	subs	r2, r2, r5
 8007596:	6122      	str	r2, [r4, #16]
 8007598:	f8cd a000 	str.w	sl, [sp]
 800759c:	464b      	mov	r3, r9
 800759e:	aa03      	add	r2, sp, #12
 80075a0:	4621      	mov	r1, r4
 80075a2:	4640      	mov	r0, r8
 80075a4:	f7ff fee2 	bl	800736c <_printf_common>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d14c      	bne.n	8007646 <_printf_i+0x1fe>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	b004      	add	sp, #16
 80075b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b6:	4835      	ldr	r0, [pc, #212]	; (800768c <_printf_i+0x244>)
 80075b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075bc:	6829      	ldr	r1, [r5, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c4:	6029      	str	r1, [r5, #0]
 80075c6:	061d      	lsls	r5, r3, #24
 80075c8:	d514      	bpl.n	80075f4 <_printf_i+0x1ac>
 80075ca:	07df      	lsls	r7, r3, #31
 80075cc:	bf44      	itt	mi
 80075ce:	f043 0320 	orrmi.w	r3, r3, #32
 80075d2:	6023      	strmi	r3, [r4, #0]
 80075d4:	b91e      	cbnz	r6, 80075de <_printf_i+0x196>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	f023 0320 	bic.w	r3, r3, #32
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	2310      	movs	r3, #16
 80075e0:	e7b0      	b.n	8007544 <_printf_i+0xfc>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f043 0320 	orr.w	r3, r3, #32
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	2378      	movs	r3, #120	; 0x78
 80075ec:	4828      	ldr	r0, [pc, #160]	; (8007690 <_printf_i+0x248>)
 80075ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075f2:	e7e3      	b.n	80075bc <_printf_i+0x174>
 80075f4:	0659      	lsls	r1, r3, #25
 80075f6:	bf48      	it	mi
 80075f8:	b2b6      	uxthmi	r6, r6
 80075fa:	e7e6      	b.n	80075ca <_printf_i+0x182>
 80075fc:	4615      	mov	r5, r2
 80075fe:	e7bb      	b.n	8007578 <_printf_i+0x130>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	6826      	ldr	r6, [r4, #0]
 8007604:	6961      	ldr	r1, [r4, #20]
 8007606:	1d18      	adds	r0, r3, #4
 8007608:	6028      	str	r0, [r5, #0]
 800760a:	0635      	lsls	r5, r6, #24
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	d501      	bpl.n	8007614 <_printf_i+0x1cc>
 8007610:	6019      	str	r1, [r3, #0]
 8007612:	e002      	b.n	800761a <_printf_i+0x1d2>
 8007614:	0670      	lsls	r0, r6, #25
 8007616:	d5fb      	bpl.n	8007610 <_printf_i+0x1c8>
 8007618:	8019      	strh	r1, [r3, #0]
 800761a:	2300      	movs	r3, #0
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	4615      	mov	r5, r2
 8007620:	e7ba      	b.n	8007598 <_printf_i+0x150>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	1d1a      	adds	r2, r3, #4
 8007626:	602a      	str	r2, [r5, #0]
 8007628:	681d      	ldr	r5, [r3, #0]
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	2100      	movs	r1, #0
 800762e:	4628      	mov	r0, r5
 8007630:	f7f8 fdd6 	bl	80001e0 <memchr>
 8007634:	b108      	cbz	r0, 800763a <_printf_i+0x1f2>
 8007636:	1b40      	subs	r0, r0, r5
 8007638:	6060      	str	r0, [r4, #4]
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	2300      	movs	r3, #0
 8007640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007644:	e7a8      	b.n	8007598 <_printf_i+0x150>
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	462a      	mov	r2, r5
 800764a:	4649      	mov	r1, r9
 800764c:	4640      	mov	r0, r8
 800764e:	47d0      	blx	sl
 8007650:	3001      	adds	r0, #1
 8007652:	d0ab      	beq.n	80075ac <_printf_i+0x164>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	079b      	lsls	r3, r3, #30
 8007658:	d413      	bmi.n	8007682 <_printf_i+0x23a>
 800765a:	68e0      	ldr	r0, [r4, #12]
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	4298      	cmp	r0, r3
 8007660:	bfb8      	it	lt
 8007662:	4618      	movlt	r0, r3
 8007664:	e7a4      	b.n	80075b0 <_printf_i+0x168>
 8007666:	2301      	movs	r3, #1
 8007668:	4632      	mov	r2, r6
 800766a:	4649      	mov	r1, r9
 800766c:	4640      	mov	r0, r8
 800766e:	47d0      	blx	sl
 8007670:	3001      	adds	r0, #1
 8007672:	d09b      	beq.n	80075ac <_printf_i+0x164>
 8007674:	3501      	adds	r5, #1
 8007676:	68e3      	ldr	r3, [r4, #12]
 8007678:	9903      	ldr	r1, [sp, #12]
 800767a:	1a5b      	subs	r3, r3, r1
 800767c:	42ab      	cmp	r3, r5
 800767e:	dcf2      	bgt.n	8007666 <_printf_i+0x21e>
 8007680:	e7eb      	b.n	800765a <_printf_i+0x212>
 8007682:	2500      	movs	r5, #0
 8007684:	f104 0619 	add.w	r6, r4, #25
 8007688:	e7f5      	b.n	8007676 <_printf_i+0x22e>
 800768a:	bf00      	nop
 800768c:	08009fae 	.word	0x08009fae
 8007690:	08009fbf 	.word	0x08009fbf

08007694 <siprintf>:
 8007694:	b40e      	push	{r1, r2, r3}
 8007696:	b500      	push	{lr}
 8007698:	b09c      	sub	sp, #112	; 0x70
 800769a:	ab1d      	add	r3, sp, #116	; 0x74
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	9006      	str	r0, [sp, #24]
 80076a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076a4:	4809      	ldr	r0, [pc, #36]	; (80076cc <siprintf+0x38>)
 80076a6:	9107      	str	r1, [sp, #28]
 80076a8:	9104      	str	r1, [sp, #16]
 80076aa:	4909      	ldr	r1, [pc, #36]	; (80076d0 <siprintf+0x3c>)
 80076ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b0:	9105      	str	r1, [sp, #20]
 80076b2:	6800      	ldr	r0, [r0, #0]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	a902      	add	r1, sp, #8
 80076b8:	f001 fb78 	bl	8008dac <_svfiprintf_r>
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	b01c      	add	sp, #112	; 0x70
 80076c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c8:	b003      	add	sp, #12
 80076ca:	4770      	bx	lr
 80076cc:	20000010 	.word	0x20000010
 80076d0:	ffff0208 	.word	0xffff0208

080076d4 <quorem>:
 80076d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	6903      	ldr	r3, [r0, #16]
 80076da:	690c      	ldr	r4, [r1, #16]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	4607      	mov	r7, r0
 80076e0:	f2c0 8081 	blt.w	80077e6 <quorem+0x112>
 80076e4:	3c01      	subs	r4, #1
 80076e6:	f101 0814 	add.w	r8, r1, #20
 80076ea:	f100 0514 	add.w	r5, r0, #20
 80076ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076fc:	3301      	adds	r3, #1
 80076fe:	429a      	cmp	r2, r3
 8007700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007708:	fbb2 f6f3 	udiv	r6, r2, r3
 800770c:	d331      	bcc.n	8007772 <quorem+0x9e>
 800770e:	f04f 0e00 	mov.w	lr, #0
 8007712:	4640      	mov	r0, r8
 8007714:	46ac      	mov	ip, r5
 8007716:	46f2      	mov	sl, lr
 8007718:	f850 2b04 	ldr.w	r2, [r0], #4
 800771c:	b293      	uxth	r3, r2
 800771e:	fb06 e303 	mla	r3, r6, r3, lr
 8007722:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ebaa 0303 	sub.w	r3, sl, r3
 800772c:	f8dc a000 	ldr.w	sl, [ip]
 8007730:	0c12      	lsrs	r2, r2, #16
 8007732:	fa13 f38a 	uxtah	r3, r3, sl
 8007736:	fb06 e202 	mla	r2, r6, r2, lr
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007742:	b292      	uxth	r2, r2
 8007744:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800774c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007750:	4581      	cmp	r9, r0
 8007752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007756:	f84c 3b04 	str.w	r3, [ip], #4
 800775a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800775e:	d2db      	bcs.n	8007718 <quorem+0x44>
 8007760:	f855 300b 	ldr.w	r3, [r5, fp]
 8007764:	b92b      	cbnz	r3, 8007772 <quorem+0x9e>
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	3b04      	subs	r3, #4
 800776a:	429d      	cmp	r5, r3
 800776c:	461a      	mov	r2, r3
 800776e:	d32e      	bcc.n	80077ce <quorem+0xfa>
 8007770:	613c      	str	r4, [r7, #16]
 8007772:	4638      	mov	r0, r7
 8007774:	f001 f8c6 	bl	8008904 <__mcmp>
 8007778:	2800      	cmp	r0, #0
 800777a:	db24      	blt.n	80077c6 <quorem+0xf2>
 800777c:	3601      	adds	r6, #1
 800777e:	4628      	mov	r0, r5
 8007780:	f04f 0c00 	mov.w	ip, #0
 8007784:	f858 2b04 	ldr.w	r2, [r8], #4
 8007788:	f8d0 e000 	ldr.w	lr, [r0]
 800778c:	b293      	uxth	r3, r2
 800778e:	ebac 0303 	sub.w	r3, ip, r3
 8007792:	0c12      	lsrs	r2, r2, #16
 8007794:	fa13 f38e 	uxtah	r3, r3, lr
 8007798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800779c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a6:	45c1      	cmp	r9, r8
 80077a8:	f840 3b04 	str.w	r3, [r0], #4
 80077ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077b0:	d2e8      	bcs.n	8007784 <quorem+0xb0>
 80077b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ba:	b922      	cbnz	r2, 80077c6 <quorem+0xf2>
 80077bc:	3b04      	subs	r3, #4
 80077be:	429d      	cmp	r5, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	d30a      	bcc.n	80077da <quorem+0x106>
 80077c4:	613c      	str	r4, [r7, #16]
 80077c6:	4630      	mov	r0, r6
 80077c8:	b003      	add	sp, #12
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	d1cc      	bne.n	8007770 <quorem+0x9c>
 80077d6:	3c01      	subs	r4, #1
 80077d8:	e7c7      	b.n	800776a <quorem+0x96>
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	3b04      	subs	r3, #4
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d1f0      	bne.n	80077c4 <quorem+0xf0>
 80077e2:	3c01      	subs	r4, #1
 80077e4:	e7eb      	b.n	80077be <quorem+0xea>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7ee      	b.n	80077c8 <quorem+0xf4>
 80077ea:	0000      	movs	r0, r0
 80077ec:	0000      	movs	r0, r0
	...

080077f0 <_dtoa_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	ed2d 8b04 	vpush	{d8-d9}
 80077f8:	ec57 6b10 	vmov	r6, r7, d0
 80077fc:	b093      	sub	sp, #76	; 0x4c
 80077fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007804:	9106      	str	r1, [sp, #24]
 8007806:	ee10 aa10 	vmov	sl, s0
 800780a:	4604      	mov	r4, r0
 800780c:	9209      	str	r2, [sp, #36]	; 0x24
 800780e:	930c      	str	r3, [sp, #48]	; 0x30
 8007810:	46bb      	mov	fp, r7
 8007812:	b975      	cbnz	r5, 8007832 <_dtoa_r+0x42>
 8007814:	2010      	movs	r0, #16
 8007816:	f000 fddd 	bl	80083d4 <malloc>
 800781a:	4602      	mov	r2, r0
 800781c:	6260      	str	r0, [r4, #36]	; 0x24
 800781e:	b920      	cbnz	r0, 800782a <_dtoa_r+0x3a>
 8007820:	4ba7      	ldr	r3, [pc, #668]	; (8007ac0 <_dtoa_r+0x2d0>)
 8007822:	21ea      	movs	r1, #234	; 0xea
 8007824:	48a7      	ldr	r0, [pc, #668]	; (8007ac4 <_dtoa_r+0x2d4>)
 8007826:	f001 fbd1 	bl	8008fcc <__assert_func>
 800782a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800782e:	6005      	str	r5, [r0, #0]
 8007830:	60c5      	str	r5, [r0, #12]
 8007832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007834:	6819      	ldr	r1, [r3, #0]
 8007836:	b151      	cbz	r1, 800784e <_dtoa_r+0x5e>
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	604a      	str	r2, [r1, #4]
 800783c:	2301      	movs	r3, #1
 800783e:	4093      	lsls	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
 8007842:	4620      	mov	r0, r4
 8007844:	f000 fe1c 	bl	8008480 <_Bfree>
 8007848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	1e3b      	subs	r3, r7, #0
 8007850:	bfaa      	itet	ge
 8007852:	2300      	movge	r3, #0
 8007854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007858:	f8c8 3000 	strge.w	r3, [r8]
 800785c:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <_dtoa_r+0x2d8>)
 800785e:	bfbc      	itt	lt
 8007860:	2201      	movlt	r2, #1
 8007862:	f8c8 2000 	strlt.w	r2, [r8]
 8007866:	ea33 030b 	bics.w	r3, r3, fp
 800786a:	d11b      	bne.n	80078a4 <_dtoa_r+0xb4>
 800786c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007878:	4333      	orrs	r3, r6
 800787a:	f000 8592 	beq.w	80083a2 <_dtoa_r+0xbb2>
 800787e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007880:	b963      	cbnz	r3, 800789c <_dtoa_r+0xac>
 8007882:	4b92      	ldr	r3, [pc, #584]	; (8007acc <_dtoa_r+0x2dc>)
 8007884:	e022      	b.n	80078cc <_dtoa_r+0xdc>
 8007886:	4b92      	ldr	r3, [pc, #584]	; (8007ad0 <_dtoa_r+0x2e0>)
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	3308      	adds	r3, #8
 800788c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	9801      	ldr	r0, [sp, #4]
 8007892:	b013      	add	sp, #76	; 0x4c
 8007894:	ecbd 8b04 	vpop	{d8-d9}
 8007898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789c:	4b8b      	ldr	r3, [pc, #556]	; (8007acc <_dtoa_r+0x2dc>)
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	3303      	adds	r3, #3
 80078a2:	e7f3      	b.n	800788c <_dtoa_r+0x9c>
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	f7f9 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b0:	ec4b ab19 	vmov	d9, sl, fp
 80078b4:	4680      	mov	r8, r0
 80078b6:	b158      	cbz	r0, 80078d0 <_dtoa_r+0xe0>
 80078b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ba:	2301      	movs	r3, #1
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 856b 	beq.w	800839c <_dtoa_r+0xbac>
 80078c6:	4883      	ldr	r0, [pc, #524]	; (8007ad4 <_dtoa_r+0x2e4>)
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	e7df      	b.n	8007890 <_dtoa_r+0xa0>
 80078d0:	ec4b ab10 	vmov	d0, sl, fp
 80078d4:	aa10      	add	r2, sp, #64	; 0x40
 80078d6:	a911      	add	r1, sp, #68	; 0x44
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 f8b9 	bl	8008a50 <__d2b>
 80078de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80078e2:	ee08 0a10 	vmov	s16, r0
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	f000 8084 	beq.w	80079f4 <_dtoa_r+0x204>
 80078ec:	ee19 3a90 	vmov	r3, s19
 80078f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078f8:	4656      	mov	r6, sl
 80078fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007906:	4b74      	ldr	r3, [pc, #464]	; (8007ad8 <_dtoa_r+0x2e8>)
 8007908:	2200      	movs	r2, #0
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7f8 fcbb 	bl	8000288 <__aeabi_dsub>
 8007912:	a365      	add	r3, pc, #404	; (adr r3, 8007aa8 <_dtoa_r+0x2b8>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fe6e 	bl	80005f8 <__aeabi_dmul>
 800791c:	a364      	add	r3, pc, #400	; (adr r3, 8007ab0 <_dtoa_r+0x2c0>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f8 fcb3 	bl	800028c <__adddf3>
 8007926:	4606      	mov	r6, r0
 8007928:	4628      	mov	r0, r5
 800792a:	460f      	mov	r7, r1
 800792c:	f7f8 fdfa 	bl	8000524 <__aeabi_i2d>
 8007930:	a361      	add	r3, pc, #388	; (adr r3, 8007ab8 <_dtoa_r+0x2c8>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f8 fca3 	bl	800028c <__adddf3>
 8007946:	4606      	mov	r6, r0
 8007948:	460f      	mov	r7, r1
 800794a:	f7f9 f905 	bl	8000b58 <__aeabi_d2iz>
 800794e:	2200      	movs	r2, #0
 8007950:	9000      	str	r0, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f9 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800795c:	b150      	cbz	r0, 8007974 <_dtoa_r+0x184>
 800795e:	9800      	ldr	r0, [sp, #0]
 8007960:	f7f8 fde0 	bl	8000524 <__aeabi_i2d>
 8007964:	4632      	mov	r2, r6
 8007966:	463b      	mov	r3, r7
 8007968:	f7f9 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800796c:	b910      	cbnz	r0, 8007974 <_dtoa_r+0x184>
 800796e:	9b00      	ldr	r3, [sp, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	2b16      	cmp	r3, #22
 8007978:	d85a      	bhi.n	8007a30 <_dtoa_r+0x240>
 800797a:	9a00      	ldr	r2, [sp, #0]
 800797c:	4b57      	ldr	r3, [pc, #348]	; (8007adc <_dtoa_r+0x2ec>)
 800797e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	ec51 0b19 	vmov	r0, r1, d9
 800798a:	f7f9 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d050      	beq.n	8007a34 <_dtoa_r+0x244>
 8007992:	9b00      	ldr	r3, [sp, #0]
 8007994:	3b01      	subs	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2300      	movs	r3, #0
 800799a:	930b      	str	r3, [sp, #44]	; 0x2c
 800799c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800799e:	1b5d      	subs	r5, r3, r5
 80079a0:	1e6b      	subs	r3, r5, #1
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	bf45      	ittet	mi
 80079a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80079aa:	9304      	strmi	r3, [sp, #16]
 80079ac:	2300      	movpl	r3, #0
 80079ae:	2300      	movmi	r3, #0
 80079b0:	bf4c      	ite	mi
 80079b2:	9305      	strmi	r3, [sp, #20]
 80079b4:	9304      	strpl	r3, [sp, #16]
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db3d      	blt.n	8007a38 <_dtoa_r+0x248>
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	9a00      	ldr	r2, [sp, #0]
 80079c0:	920a      	str	r2, [sp, #40]	; 0x28
 80079c2:	4413      	add	r3, r2
 80079c4:	9305      	str	r3, [sp, #20]
 80079c6:	2300      	movs	r3, #0
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	f200 8089 	bhi.w	8007ae4 <_dtoa_r+0x2f4>
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	bfc4      	itt	gt
 80079d6:	3b04      	subgt	r3, #4
 80079d8:	9306      	strgt	r3, [sp, #24]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	f1a3 0302 	sub.w	r3, r3, #2
 80079e0:	bfcc      	ite	gt
 80079e2:	2500      	movgt	r5, #0
 80079e4:	2501      	movle	r5, #1
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	f200 8087 	bhi.w	8007afa <_dtoa_r+0x30a>
 80079ec:	e8df f003 	tbb	[pc, r3]
 80079f0:	59383a2d 	.word	0x59383a2d
 80079f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079f8:	441d      	add	r5, r3
 80079fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	bfc1      	itttt	gt
 8007a02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a12:	bfda      	itte	le
 8007a14:	f1c3 0320 	rsble	r3, r3, #32
 8007a18:	fa06 f003 	lslle.w	r0, r6, r3
 8007a1c:	4318      	orrgt	r0, r3
 8007a1e:	f7f8 fd71 	bl	8000504 <__aeabi_ui2d>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4606      	mov	r6, r0
 8007a26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a2a:	3d01      	subs	r5, #1
 8007a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a2e:	e76a      	b.n	8007906 <_dtoa_r+0x116>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e7b2      	b.n	800799a <_dtoa_r+0x1aa>
 8007a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a36:	e7b1      	b.n	800799c <_dtoa_r+0x1ac>
 8007a38:	9b04      	ldr	r3, [sp, #16]
 8007a3a:	9a00      	ldr	r2, [sp, #0]
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	4253      	negs	r3, r2
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	2300      	movs	r3, #0
 8007a46:	930a      	str	r3, [sp, #40]	; 0x28
 8007a48:	e7bf      	b.n	80079ca <_dtoa_r+0x1da>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9308      	str	r3, [sp, #32]
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc55      	bgt.n	8007b00 <_dtoa_r+0x310>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5e:	e00c      	b.n	8007a7a <_dtoa_r+0x28a>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e7f3      	b.n	8007a4c <_dtoa_r+0x25c>
 8007a64:	2300      	movs	r3, #0
 8007a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a68:	9308      	str	r3, [sp, #32]
 8007a6a:	9b00      	ldr	r3, [sp, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	3301      	adds	r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	bfb8      	it	lt
 8007a78:	2301      	movlt	r3, #1
 8007a7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	6042      	str	r2, [r0, #4]
 8007a80:	2204      	movs	r2, #4
 8007a82:	f102 0614 	add.w	r6, r2, #20
 8007a86:	429e      	cmp	r6, r3
 8007a88:	6841      	ldr	r1, [r0, #4]
 8007a8a:	d93d      	bls.n	8007b08 <_dtoa_r+0x318>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fcb7 	bl	8008400 <_Balloc>
 8007a92:	9001      	str	r0, [sp, #4]
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d13b      	bne.n	8007b10 <_dtoa_r+0x320>
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <_dtoa_r+0x2f0>)
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007aa0:	e6c0      	b.n	8007824 <_dtoa_r+0x34>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7df      	b.n	8007a66 <_dtoa_r+0x276>
 8007aa6:	bf00      	nop
 8007aa8:	636f4361 	.word	0x636f4361
 8007aac:	3fd287a7 	.word	0x3fd287a7
 8007ab0:	8b60c8b3 	.word	0x8b60c8b3
 8007ab4:	3fc68a28 	.word	0x3fc68a28
 8007ab8:	509f79fb 	.word	0x509f79fb
 8007abc:	3fd34413 	.word	0x3fd34413
 8007ac0:	08009fdd 	.word	0x08009fdd
 8007ac4:	08009ff4 	.word	0x08009ff4
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	08009fd9 	.word	0x08009fd9
 8007ad0:	08009fd0 	.word	0x08009fd0
 8007ad4:	08009fad 	.word	0x08009fad
 8007ad8:	3ff80000 	.word	0x3ff80000
 8007adc:	0800a0e8 	.word	0x0800a0e8
 8007ae0:	0800a04f 	.word	0x0800a04f
 8007ae4:	2501      	movs	r5, #1
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9306      	str	r3, [sp, #24]
 8007aea:	9508      	str	r5, [sp, #32]
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295
 8007af0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	2312      	movs	r3, #18
 8007af8:	e7b0      	b.n	8007a5c <_dtoa_r+0x26c>
 8007afa:	2301      	movs	r3, #1
 8007afc:	9308      	str	r3, [sp, #32]
 8007afe:	e7f5      	b.n	8007aec <_dtoa_r+0x2fc>
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b06:	e7b8      	b.n	8007a7a <_dtoa_r+0x28a>
 8007b08:	3101      	adds	r1, #1
 8007b0a:	6041      	str	r1, [r0, #4]
 8007b0c:	0052      	lsls	r2, r2, #1
 8007b0e:	e7b8      	b.n	8007a82 <_dtoa_r+0x292>
 8007b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b12:	9a01      	ldr	r2, [sp, #4]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	2b0e      	cmp	r3, #14
 8007b1a:	f200 809d 	bhi.w	8007c58 <_dtoa_r+0x468>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	f000 809a 	beq.w	8007c58 <_dtoa_r+0x468>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd32      	ble.n	8007b90 <_dtoa_r+0x3a0>
 8007b2a:	4ab7      	ldr	r2, [pc, #732]	; (8007e08 <_dtoa_r+0x618>)
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b38:	9b00      	ldr	r3, [sp, #0]
 8007b3a:	05d8      	lsls	r0, r3, #23
 8007b3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b40:	d516      	bpl.n	8007b70 <_dtoa_r+0x380>
 8007b42:	4bb2      	ldr	r3, [pc, #712]	; (8007e0c <_dtoa_r+0x61c>)
 8007b44:	ec51 0b19 	vmov	r0, r1, d9
 8007b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b4c:	f7f8 fe7e 	bl	800084c <__aeabi_ddiv>
 8007b50:	f007 070f 	and.w	r7, r7, #15
 8007b54:	4682      	mov	sl, r0
 8007b56:	468b      	mov	fp, r1
 8007b58:	2503      	movs	r5, #3
 8007b5a:	4eac      	ldr	r6, [pc, #688]	; (8007e0c <_dtoa_r+0x61c>)
 8007b5c:	b957      	cbnz	r7, 8007b74 <_dtoa_r+0x384>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	4650      	mov	r0, sl
 8007b64:	4659      	mov	r1, fp
 8007b66:	f7f8 fe71 	bl	800084c <__aeabi_ddiv>
 8007b6a:	4682      	mov	sl, r0
 8007b6c:	468b      	mov	fp, r1
 8007b6e:	e028      	b.n	8007bc2 <_dtoa_r+0x3d2>
 8007b70:	2502      	movs	r5, #2
 8007b72:	e7f2      	b.n	8007b5a <_dtoa_r+0x36a>
 8007b74:	07f9      	lsls	r1, r7, #31
 8007b76:	d508      	bpl.n	8007b8a <_dtoa_r+0x39a>
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	3501      	adds	r5, #1
 8007b86:	4680      	mov	r8, r0
 8007b88:	4689      	mov	r9, r1
 8007b8a:	107f      	asrs	r7, r7, #1
 8007b8c:	3608      	adds	r6, #8
 8007b8e:	e7e5      	b.n	8007b5c <_dtoa_r+0x36c>
 8007b90:	f000 809b 	beq.w	8007cca <_dtoa_r+0x4da>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	4f9d      	ldr	r7, [pc, #628]	; (8007e0c <_dtoa_r+0x61c>)
 8007b98:	425e      	negs	r6, r3
 8007b9a:	4b9b      	ldr	r3, [pc, #620]	; (8007e08 <_dtoa_r+0x618>)
 8007b9c:	f006 020f 	and.w	r2, r6, #15
 8007ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	ec51 0b19 	vmov	r0, r1, d9
 8007bac:	f7f8 fd24 	bl	80005f8 <__aeabi_dmul>
 8007bb0:	1136      	asrs	r6, r6, #4
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	468b      	mov	fp, r1
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2502      	movs	r5, #2
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d17a      	bne.n	8007cb4 <_dtoa_r+0x4c4>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1d3      	bne.n	8007b6a <_dtoa_r+0x37a>
 8007bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8082 	beq.w	8007cce <_dtoa_r+0x4de>
 8007bca:	4b91      	ldr	r3, [pc, #580]	; (8007e10 <_dtoa_r+0x620>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4650      	mov	r0, sl
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	f7f8 ff83 	bl	8000adc <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d079      	beq.n	8007cce <_dtoa_r+0x4de>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d076      	beq.n	8007cce <_dtoa_r+0x4de>
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd36      	ble.n	8007c54 <_dtoa_r+0x464>
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	1e5f      	subs	r7, r3, #1
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4b88      	ldr	r3, [pc, #544]	; (8007e14 <_dtoa_r+0x624>)
 8007bf2:	f7f8 fd01 	bl	80005f8 <__aeabi_dmul>
 8007bf6:	9e02      	ldr	r6, [sp, #8]
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7f8 fc90 	bl	8000524 <__aeabi_i2d>
 8007c04:	4652      	mov	r2, sl
 8007c06:	465b      	mov	r3, fp
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	4b82      	ldr	r3, [pc, #520]	; (8007e18 <_dtoa_r+0x628>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7f8 fb3c 	bl	800028c <__adddf3>
 8007c14:	46d0      	mov	r8, sl
 8007c16:	46d9      	mov	r9, fp
 8007c18:	4682      	mov	sl, r0
 8007c1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d158      	bne.n	8007cd4 <_dtoa_r+0x4e4>
 8007c22:	4b7e      	ldr	r3, [pc, #504]	; (8007e1c <_dtoa_r+0x62c>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	4640      	mov	r0, r8
 8007c28:	4649      	mov	r1, r9
 8007c2a:	f7f8 fb2d 	bl	8000288 <__aeabi_dsub>
 8007c2e:	4652      	mov	r2, sl
 8007c30:	465b      	mov	r3, fp
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	f7f8 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f040 8295 	bne.w	800816a <_dtoa_r+0x97a>
 8007c40:	4652      	mov	r2, sl
 8007c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 ff47 	bl	8000adc <__aeabi_dcmplt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f040 8289 	bne.w	8008166 <_dtoa_r+0x976>
 8007c54:	ec5b ab19 	vmov	sl, fp, d9
 8007c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f2c0 8148 	blt.w	8007ef0 <_dtoa_r+0x700>
 8007c60:	9a00      	ldr	r2, [sp, #0]
 8007c62:	2a0e      	cmp	r2, #14
 8007c64:	f300 8144 	bgt.w	8007ef0 <_dtoa_r+0x700>
 8007c68:	4b67      	ldr	r3, [pc, #412]	; (8007e08 <_dtoa_r+0x618>)
 8007c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f280 80d5 	bge.w	8007e24 <_dtoa_r+0x634>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f300 80d1 	bgt.w	8007e24 <_dtoa_r+0x634>
 8007c82:	f040 826f 	bne.w	8008164 <_dtoa_r+0x974>
 8007c86:	4b65      	ldr	r3, [pc, #404]	; (8007e1c <_dtoa_r+0x62c>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fcb3 	bl	80005f8 <__aeabi_dmul>
 8007c92:	4652      	mov	r2, sl
 8007c94:	465b      	mov	r3, fp
 8007c96:	f7f8 ff35 	bl	8000b04 <__aeabi_dcmpge>
 8007c9a:	9e03      	ldr	r6, [sp, #12]
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8245 	bne.w	800812e <_dtoa_r+0x93e>
 8007ca4:	9d01      	ldr	r5, [sp, #4]
 8007ca6:	2331      	movs	r3, #49	; 0x31
 8007ca8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	e240      	b.n	8008136 <_dtoa_r+0x946>
 8007cb4:	07f2      	lsls	r2, r6, #31
 8007cb6:	d505      	bpl.n	8007cc4 <_dtoa_r+0x4d4>
 8007cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbc:	f7f8 fc9c 	bl	80005f8 <__aeabi_dmul>
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	1076      	asrs	r6, r6, #1
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	e777      	b.n	8007bba <_dtoa_r+0x3ca>
 8007cca:	2502      	movs	r5, #2
 8007ccc:	e779      	b.n	8007bc2 <_dtoa_r+0x3d2>
 8007cce:	9f00      	ldr	r7, [sp, #0]
 8007cd0:	9e03      	ldr	r6, [sp, #12]
 8007cd2:	e794      	b.n	8007bfe <_dtoa_r+0x40e>
 8007cd4:	9901      	ldr	r1, [sp, #4]
 8007cd6:	4b4c      	ldr	r3, [pc, #304]	; (8007e08 <_dtoa_r+0x618>)
 8007cd8:	4431      	add	r1, r6
 8007cda:	910d      	str	r1, [sp, #52]	; 0x34
 8007cdc:	9908      	ldr	r1, [sp, #32]
 8007cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d043      	beq.n	8007d72 <_dtoa_r+0x582>
 8007cea:	494d      	ldr	r1, [pc, #308]	; (8007e20 <_dtoa_r+0x630>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7f8 fdad 	bl	800084c <__aeabi_ddiv>
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	465b      	mov	r3, fp
 8007cf6:	f7f8 fac7 	bl	8000288 <__aeabi_dsub>
 8007cfa:	9d01      	ldr	r5, [sp, #4]
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	468b      	mov	fp, r1
 8007d00:	4649      	mov	r1, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7f8 ff28 	bl	8000b58 <__aeabi_d2iz>
 8007d08:	4606      	mov	r6, r0
 8007d0a:	f7f8 fc0b 	bl	8000524 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fab7 	bl	8000288 <__aeabi_dsub>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d20:	4652      	mov	r2, sl
 8007d22:	465b      	mov	r3, fp
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	f7f8 fed8 	bl	8000adc <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d163      	bne.n	8007df8 <_dtoa_r+0x608>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	4936      	ldr	r1, [pc, #216]	; (8007e10 <_dtoa_r+0x620>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faa6 	bl	8000288 <__aeabi_dsub>
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	465b      	mov	r3, fp
 8007d40:	f7f8 fecc 	bl	8000adc <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 80b5 	bne.w	8007eb4 <_dtoa_r+0x6c4>
 8007d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d081      	beq.n	8007c54 <_dtoa_r+0x464>
 8007d50:	4b30      	ldr	r3, [pc, #192]	; (8007e14 <_dtoa_r+0x624>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	4650      	mov	r0, sl
 8007d56:	4659      	mov	r1, fp
 8007d58:	f7f8 fc4e 	bl	80005f8 <__aeabi_dmul>
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <_dtoa_r+0x624>)
 8007d5e:	4682      	mov	sl, r0
 8007d60:	468b      	mov	fp, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7f8 fc46 	bl	80005f8 <__aeabi_dmul>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7c6      	b.n	8007d00 <_dtoa_r+0x510>
 8007d72:	4650      	mov	r0, sl
 8007d74:	4659      	mov	r1, fp
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	9d01      	ldr	r5, [sp, #4]
 8007d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	4649      	mov	r1, r9
 8007d86:	4640      	mov	r0, r8
 8007d88:	f7f8 fee6 	bl	8000b58 <__aeabi_d2iz>
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	f7f8 fbc9 	bl	8000524 <__aeabi_i2d>
 8007d92:	3630      	adds	r6, #48	; 0x30
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fa74 	bl	8000288 <__aeabi_dsub>
 8007da0:	f805 6b01 	strb.w	r6, [r5], #1
 8007da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da6:	429d      	cmp	r5, r3
 8007da8:	4680      	mov	r8, r0
 8007daa:	4689      	mov	r9, r1
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	d124      	bne.n	8007dfc <_dtoa_r+0x60c>
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <_dtoa_r+0x630>)
 8007db4:	4650      	mov	r0, sl
 8007db6:	4659      	mov	r1, fp
 8007db8:	f7f8 fa68 	bl	800028c <__adddf3>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fea8 	bl	8000b18 <__aeabi_dcmpgt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d173      	bne.n	8007eb4 <_dtoa_r+0x6c4>
 8007dcc:	4652      	mov	r2, sl
 8007dce:	465b      	mov	r3, fp
 8007dd0:	4913      	ldr	r1, [pc, #76]	; (8007e20 <_dtoa_r+0x630>)
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f7f8 fa58 	bl	8000288 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f af35 	beq.w	8007c54 <_dtoa_r+0x464>
 8007dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dec:	1e6b      	subs	r3, r5, #1
 8007dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d0f8      	beq.n	8007dea <_dtoa_r+0x5fa>
 8007df8:	9700      	str	r7, [sp, #0]
 8007dfa:	e049      	b.n	8007e90 <_dtoa_r+0x6a0>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_dtoa_r+0x624>)
 8007dfe:	f7f8 fbfb 	bl	80005f8 <__aeabi_dmul>
 8007e02:	4680      	mov	r8, r0
 8007e04:	4689      	mov	r9, r1
 8007e06:	e7bd      	b.n	8007d84 <_dtoa_r+0x594>
 8007e08:	0800a0e8 	.word	0x0800a0e8
 8007e0c:	0800a0c0 	.word	0x0800a0c0
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	40240000 	.word	0x40240000
 8007e18:	401c0000 	.word	0x401c0000
 8007e1c:	40140000 	.word	0x40140000
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	9d01      	ldr	r5, [sp, #4]
 8007e26:	4656      	mov	r6, sl
 8007e28:	465f      	mov	r7, fp
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fd0b 	bl	800084c <__aeabi_ddiv>
 8007e36:	f7f8 fe8f 	bl	8000b58 <__aeabi_d2iz>
 8007e3a:	4682      	mov	sl, r0
 8007e3c:	f7f8 fb72 	bl	8000524 <__aeabi_i2d>
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	f7f8 fbd8 	bl	80005f8 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e54:	f7f8 fa18 	bl	8000288 <__aeabi_dsub>
 8007e58:	f805 6b01 	strb.w	r6, [r5], #1
 8007e5c:	9e01      	ldr	r6, [sp, #4]
 8007e5e:	9f03      	ldr	r7, [sp, #12]
 8007e60:	1bae      	subs	r6, r5, r6
 8007e62:	42b7      	cmp	r7, r6
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	d135      	bne.n	8007ed6 <_dtoa_r+0x6e6>
 8007e6a:	f7f8 fa0f 	bl	800028c <__adddf3>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	f7f8 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e7a:	b9d0      	cbnz	r0, 8007eb2 <_dtoa_r+0x6c2>
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	4630      	mov	r0, r6
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f8 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e88:	b110      	cbz	r0, 8007e90 <_dtoa_r+0x6a0>
 8007e8a:	f01a 0f01 	tst.w	sl, #1
 8007e8e:	d110      	bne.n	8007eb2 <_dtoa_r+0x6c2>
 8007e90:	4620      	mov	r0, r4
 8007e92:	ee18 1a10 	vmov	r1, s16
 8007e96:	f000 faf3 	bl	8008480 <_Bfree>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9800      	ldr	r0, [sp, #0]
 8007e9e:	702b      	strb	r3, [r5, #0]
 8007ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	6018      	str	r0, [r3, #0]
 8007ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f43f acf1 	beq.w	8007890 <_dtoa_r+0xa0>
 8007eae:	601d      	str	r5, [r3, #0]
 8007eb0:	e4ee      	b.n	8007890 <_dtoa_r+0xa0>
 8007eb2:	9f00      	ldr	r7, [sp, #0]
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebc:	2a39      	cmp	r2, #57	; 0x39
 8007ebe:	d106      	bne.n	8007ece <_dtoa_r+0x6de>
 8007ec0:	9a01      	ldr	r2, [sp, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d1f7      	bne.n	8007eb6 <_dtoa_r+0x6c6>
 8007ec6:	9901      	ldr	r1, [sp, #4]
 8007ec8:	2230      	movs	r2, #48	; 0x30
 8007eca:	3701      	adds	r7, #1
 8007ecc:	700a      	strb	r2, [r1, #0]
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e790      	b.n	8007df8 <_dtoa_r+0x608>
 8007ed6:	4ba6      	ldr	r3, [pc, #664]	; (8008170 <_dtoa_r+0x980>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460f      	mov	r7, r1
 8007ee6:	f7f8 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d09d      	beq.n	8007e2a <_dtoa_r+0x63a>
 8007eee:	e7cf      	b.n	8007e90 <_dtoa_r+0x6a0>
 8007ef0:	9a08      	ldr	r2, [sp, #32]
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	f000 80d7 	beq.w	80080a6 <_dtoa_r+0x8b6>
 8007ef8:	9a06      	ldr	r2, [sp, #24]
 8007efa:	2a01      	cmp	r2, #1
 8007efc:	f300 80ba 	bgt.w	8008074 <_dtoa_r+0x884>
 8007f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	f000 80b2 	beq.w	800806c <_dtoa_r+0x87c>
 8007f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f0c:	9e07      	ldr	r6, [sp, #28]
 8007f0e:	9d04      	ldr	r5, [sp, #16]
 8007f10:	9a04      	ldr	r2, [sp, #16]
 8007f12:	441a      	add	r2, r3
 8007f14:	9204      	str	r2, [sp, #16]
 8007f16:	9a05      	ldr	r2, [sp, #20]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	9205      	str	r2, [sp, #20]
 8007f20:	f000 fb66 	bl	80085f0 <__i2b>
 8007f24:	4607      	mov	r7, r0
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	dd0c      	ble.n	8007f44 <_dtoa_r+0x754>
 8007f2a:	9b05      	ldr	r3, [sp, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x754>
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	9a04      	ldr	r2, [sp, #16]
 8007f34:	bfa8      	it	ge
 8007f36:	462b      	movge	r3, r5
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	9204      	str	r2, [sp, #16]
 8007f3c:	9a05      	ldr	r2, [sp, #20]
 8007f3e:	1aed      	subs	r5, r5, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	b31b      	cbz	r3, 8007f90 <_dtoa_r+0x7a0>
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80af 	beq.w	80080ae <_dtoa_r+0x8be>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	dd13      	ble.n	8007f7c <_dtoa_r+0x78c>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4632      	mov	r2, r6
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fc09 	bl	8008770 <__pow5mult>
 8007f5e:	ee18 2a10 	vmov	r2, s16
 8007f62:	4601      	mov	r1, r0
 8007f64:	4607      	mov	r7, r0
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fb58 	bl	800861c <__multiply>
 8007f6c:	ee18 1a10 	vmov	r1, s16
 8007f70:	4680      	mov	r8, r0
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fa84 	bl	8008480 <_Bfree>
 8007f78:	ee08 8a10 	vmov	s16, r8
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	1b9a      	subs	r2, r3, r6
 8007f80:	d006      	beq.n	8007f90 <_dtoa_r+0x7a0>
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fbf2 	bl	8008770 <__pow5mult>
 8007f8c:	ee08 0a10 	vmov	s16, r0
 8007f90:	2101      	movs	r1, #1
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fb2c 	bl	80085f0 <__i2b>
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	f340 8088 	ble.w	80080b2 <_dtoa_r+0x8c2>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fbe2 	bl	8008770 <__pow5mult>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	f340 8081 	ble.w	80080b8 <_dtoa_r+0x8c8>
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	6933      	ldr	r3, [r6, #16]
 8007fbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fc0:	6918      	ldr	r0, [r3, #16]
 8007fc2:	f000 fac5 	bl	8008550 <__hi0bits>
 8007fc6:	f1c0 0020 	rsb	r0, r0, #32
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	4418      	add	r0, r3
 8007fce:	f010 001f 	ands.w	r0, r0, #31
 8007fd2:	f000 8092 	beq.w	80080fa <_dtoa_r+0x90a>
 8007fd6:	f1c0 0320 	rsb	r3, r0, #32
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	f340 808a 	ble.w	80080f4 <_dtoa_r+0x904>
 8007fe0:	f1c0 001c 	rsb	r0, r0, #28
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	4403      	add	r3, r0
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9b05      	ldr	r3, [sp, #20]
 8007fec:	4403      	add	r3, r0
 8007fee:	4405      	add	r5, r0
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd07      	ble.n	8008008 <_dtoa_r+0x818>
 8007ff8:	ee18 1a10 	vmov	r1, s16
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fc10 	bl	8008824 <__lshift>
 8008004:	ee08 0a10 	vmov	s16, r0
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x82a>
 800800e:	4631      	mov	r1, r6
 8008010:	461a      	mov	r2, r3
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fc06 	bl	8008824 <__lshift>
 8008018:	4606      	mov	r6, r0
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06e      	beq.n	80080fe <_dtoa_r+0x90e>
 8008020:	ee18 0a10 	vmov	r0, s16
 8008024:	4631      	mov	r1, r6
 8008026:	f000 fc6d 	bl	8008904 <__mcmp>
 800802a:	2800      	cmp	r0, #0
 800802c:	da67      	bge.n	80080fe <_dtoa_r+0x90e>
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	3b01      	subs	r3, #1
 8008032:	ee18 1a10 	vmov	r1, s16
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	220a      	movs	r2, #10
 800803a:	2300      	movs	r3, #0
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fa41 	bl	80084c4 <__multadd>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	ee08 0a10 	vmov	s16, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81b1 	beq.w	80083b0 <_dtoa_r+0xbc0>
 800804e:	2300      	movs	r3, #0
 8008050:	4639      	mov	r1, r7
 8008052:	220a      	movs	r2, #10
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fa35 	bl	80084c4 <__multadd>
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	4607      	mov	r7, r0
 8008060:	f300 808e 	bgt.w	8008180 <_dtoa_r+0x990>
 8008064:	9b06      	ldr	r3, [sp, #24]
 8008066:	2b02      	cmp	r3, #2
 8008068:	dc51      	bgt.n	800810e <_dtoa_r+0x91e>
 800806a:	e089      	b.n	8008180 <_dtoa_r+0x990>
 800806c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800806e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008072:	e74b      	b.n	8007f0c <_dtoa_r+0x71c>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	1e5e      	subs	r6, r3, #1
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	42b3      	cmp	r3, r6
 800807c:	bfbf      	itttt	lt
 800807e:	9b07      	ldrlt	r3, [sp, #28]
 8008080:	9607      	strlt	r6, [sp, #28]
 8008082:	1af2      	sublt	r2, r6, r3
 8008084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008086:	bfb6      	itet	lt
 8008088:	189b      	addlt	r3, r3, r2
 800808a:	1b9e      	subge	r6, r3, r6
 800808c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	bfb8      	it	lt
 8008092:	2600      	movlt	r6, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfb7      	itett	lt
 8008098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800809c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080a0:	1a9d      	sublt	r5, r3, r2
 80080a2:	2300      	movlt	r3, #0
 80080a4:	e734      	b.n	8007f10 <_dtoa_r+0x720>
 80080a6:	9e07      	ldr	r6, [sp, #28]
 80080a8:	9d04      	ldr	r5, [sp, #16]
 80080aa:	9f08      	ldr	r7, [sp, #32]
 80080ac:	e73b      	b.n	8007f26 <_dtoa_r+0x736>
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	e767      	b.n	8007f82 <_dtoa_r+0x792>
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	dc18      	bgt.n	80080ea <_dtoa_r+0x8fa>
 80080b8:	f1ba 0f00 	cmp.w	sl, #0
 80080bc:	d115      	bne.n	80080ea <_dtoa_r+0x8fa>
 80080be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c2:	b993      	cbnz	r3, 80080ea <_dtoa_r+0x8fa>
 80080c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	051b      	lsls	r3, r3, #20
 80080cc:	b183      	cbz	r3, 80080f0 <_dtoa_r+0x900>
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	3301      	adds	r3, #1
 80080d8:	9305      	str	r3, [sp, #20]
 80080da:	f04f 0801 	mov.w	r8, #1
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f af6a 	bne.w	8007fba <_dtoa_r+0x7ca>
 80080e6:	2001      	movs	r0, #1
 80080e8:	e76f      	b.n	8007fca <_dtoa_r+0x7da>
 80080ea:	f04f 0800 	mov.w	r8, #0
 80080ee:	e7f6      	b.n	80080de <_dtoa_r+0x8ee>
 80080f0:	4698      	mov	r8, r3
 80080f2:	e7f4      	b.n	80080de <_dtoa_r+0x8ee>
 80080f4:	f43f af7d 	beq.w	8007ff2 <_dtoa_r+0x802>
 80080f8:	4618      	mov	r0, r3
 80080fa:	301c      	adds	r0, #28
 80080fc:	e772      	b.n	8007fe4 <_dtoa_r+0x7f4>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc37      	bgt.n	8008174 <_dtoa_r+0x984>
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	2b02      	cmp	r3, #2
 8008108:	dd34      	ble.n	8008174 <_dtoa_r+0x984>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	9302      	str	r3, [sp, #8]
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	b96b      	cbnz	r3, 800812e <_dtoa_r+0x93e>
 8008112:	4631      	mov	r1, r6
 8008114:	2205      	movs	r2, #5
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f9d4 	bl	80084c4 <__multadd>
 800811c:	4601      	mov	r1, r0
 800811e:	4606      	mov	r6, r0
 8008120:	ee18 0a10 	vmov	r0, s16
 8008124:	f000 fbee 	bl	8008904 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	f73f adbb 	bgt.w	8007ca4 <_dtoa_r+0x4b4>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	9d01      	ldr	r5, [sp, #4]
 8008132:	43db      	mvns	r3, r3
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	4631      	mov	r1, r6
 800813c:	4620      	mov	r0, r4
 800813e:	f000 f99f 	bl	8008480 <_Bfree>
 8008142:	2f00      	cmp	r7, #0
 8008144:	f43f aea4 	beq.w	8007e90 <_dtoa_r+0x6a0>
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	d005      	beq.n	800815a <_dtoa_r+0x96a>
 800814e:	45b8      	cmp	r8, r7
 8008150:	d003      	beq.n	800815a <_dtoa_r+0x96a>
 8008152:	4641      	mov	r1, r8
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f993 	bl	8008480 <_Bfree>
 800815a:	4639      	mov	r1, r7
 800815c:	4620      	mov	r0, r4
 800815e:	f000 f98f 	bl	8008480 <_Bfree>
 8008162:	e695      	b.n	8007e90 <_dtoa_r+0x6a0>
 8008164:	2600      	movs	r6, #0
 8008166:	4637      	mov	r7, r6
 8008168:	e7e1      	b.n	800812e <_dtoa_r+0x93e>
 800816a:	9700      	str	r7, [sp, #0]
 800816c:	4637      	mov	r7, r6
 800816e:	e599      	b.n	8007ca4 <_dtoa_r+0x4b4>
 8008170:	40240000 	.word	0x40240000
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80ca 	beq.w	8008310 <_dtoa_r+0xb20>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	2d00      	cmp	r5, #0
 8008182:	dd05      	ble.n	8008190 <_dtoa_r+0x9a0>
 8008184:	4639      	mov	r1, r7
 8008186:	462a      	mov	r2, r5
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fb4b 	bl	8008824 <__lshift>
 800818e:	4607      	mov	r7, r0
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	d05b      	beq.n	800824e <_dtoa_r+0xa5e>
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4620      	mov	r0, r4
 800819a:	f000 f931 	bl	8008400 <_Balloc>
 800819e:	4605      	mov	r5, r0
 80081a0:	b928      	cbnz	r0, 80081ae <_dtoa_r+0x9be>
 80081a2:	4b87      	ldr	r3, [pc, #540]	; (80083c0 <_dtoa_r+0xbd0>)
 80081a4:	4602      	mov	r2, r0
 80081a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081aa:	f7ff bb3b 	b.w	8007824 <_dtoa_r+0x34>
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	3202      	adds	r2, #2
 80081b2:	0092      	lsls	r2, r2, #2
 80081b4:	f107 010c 	add.w	r1, r7, #12
 80081b8:	300c      	adds	r0, #12
 80081ba:	f000 f913 	bl	80083e4 <memcpy>
 80081be:	2201      	movs	r2, #1
 80081c0:	4629      	mov	r1, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fb2e 	bl	8008824 <__lshift>
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	f103 0901 	add.w	r9, r3, #1
 80081ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	f00a 0301 	and.w	r3, sl, #1
 80081da:	46b8      	mov	r8, r7
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	4607      	mov	r7, r0
 80081e0:	4631      	mov	r1, r6
 80081e2:	ee18 0a10 	vmov	r0, s16
 80081e6:	f7ff fa75 	bl	80076d4 <quorem>
 80081ea:	4641      	mov	r1, r8
 80081ec:	9002      	str	r0, [sp, #8]
 80081ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081f2:	ee18 0a10 	vmov	r0, s16
 80081f6:	f000 fb85 	bl	8008904 <__mcmp>
 80081fa:	463a      	mov	r2, r7
 80081fc:	9003      	str	r0, [sp, #12]
 80081fe:	4631      	mov	r1, r6
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fb9b 	bl	800893c <__mdiff>
 8008206:	68c2      	ldr	r2, [r0, #12]
 8008208:	f109 3bff 	add.w	fp, r9, #4294967295
 800820c:	4605      	mov	r5, r0
 800820e:	bb02      	cbnz	r2, 8008252 <_dtoa_r+0xa62>
 8008210:	4601      	mov	r1, r0
 8008212:	ee18 0a10 	vmov	r0, s16
 8008216:	f000 fb75 	bl	8008904 <__mcmp>
 800821a:	4602      	mov	r2, r0
 800821c:	4629      	mov	r1, r5
 800821e:	4620      	mov	r0, r4
 8008220:	9207      	str	r2, [sp, #28]
 8008222:	f000 f92d 	bl	8008480 <_Bfree>
 8008226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800822a:	ea43 0102 	orr.w	r1, r3, r2
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	430b      	orrs	r3, r1
 8008232:	464d      	mov	r5, r9
 8008234:	d10f      	bne.n	8008256 <_dtoa_r+0xa66>
 8008236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800823a:	d02a      	beq.n	8008292 <_dtoa_r+0xaa2>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd02      	ble.n	8008248 <_dtoa_r+0xa58>
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008248:	f88b a000 	strb.w	sl, [fp]
 800824c:	e775      	b.n	800813a <_dtoa_r+0x94a>
 800824e:	4638      	mov	r0, r7
 8008250:	e7ba      	b.n	80081c8 <_dtoa_r+0x9d8>
 8008252:	2201      	movs	r2, #1
 8008254:	e7e2      	b.n	800821c <_dtoa_r+0xa2c>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	db04      	blt.n	8008266 <_dtoa_r+0xa76>
 800825c:	9906      	ldr	r1, [sp, #24]
 800825e:	430b      	orrs	r3, r1
 8008260:	9904      	ldr	r1, [sp, #16]
 8008262:	430b      	orrs	r3, r1
 8008264:	d122      	bne.n	80082ac <_dtoa_r+0xabc>
 8008266:	2a00      	cmp	r2, #0
 8008268:	ddee      	ble.n	8008248 <_dtoa_r+0xa58>
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	2201      	movs	r2, #1
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fad7 	bl	8008824 <__lshift>
 8008276:	4631      	mov	r1, r6
 8008278:	ee08 0a10 	vmov	s16, r0
 800827c:	f000 fb42 	bl	8008904 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dc03      	bgt.n	800828c <_dtoa_r+0xa9c>
 8008284:	d1e0      	bne.n	8008248 <_dtoa_r+0xa58>
 8008286:	f01a 0f01 	tst.w	sl, #1
 800828a:	d0dd      	beq.n	8008248 <_dtoa_r+0xa58>
 800828c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008290:	d1d7      	bne.n	8008242 <_dtoa_r+0xa52>
 8008292:	2339      	movs	r3, #57	; 0x39
 8008294:	f88b 3000 	strb.w	r3, [fp]
 8008298:	462b      	mov	r3, r5
 800829a:	461d      	mov	r5, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082a2:	2a39      	cmp	r2, #57	; 0x39
 80082a4:	d071      	beq.n	800838a <_dtoa_r+0xb9a>
 80082a6:	3201      	adds	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e746      	b.n	800813a <_dtoa_r+0x94a>
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	dd07      	ble.n	80082c0 <_dtoa_r+0xad0>
 80082b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082b4:	d0ed      	beq.n	8008292 <_dtoa_r+0xaa2>
 80082b6:	f10a 0301 	add.w	r3, sl, #1
 80082ba:	f88b 3000 	strb.w	r3, [fp]
 80082be:	e73c      	b.n	800813a <_dtoa_r+0x94a>
 80082c0:	9b05      	ldr	r3, [sp, #20]
 80082c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80082c6:	4599      	cmp	r9, r3
 80082c8:	d047      	beq.n	800835a <_dtoa_r+0xb6a>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	2300      	movs	r3, #0
 80082d0:	220a      	movs	r2, #10
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 f8f6 	bl	80084c4 <__multadd>
 80082d8:	45b8      	cmp	r8, r7
 80082da:	ee08 0a10 	vmov	s16, r0
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	f04f 020a 	mov.w	r2, #10
 80082e6:	4641      	mov	r1, r8
 80082e8:	4620      	mov	r0, r4
 80082ea:	d106      	bne.n	80082fa <_dtoa_r+0xb0a>
 80082ec:	f000 f8ea 	bl	80084c4 <__multadd>
 80082f0:	4680      	mov	r8, r0
 80082f2:	4607      	mov	r7, r0
 80082f4:	f109 0901 	add.w	r9, r9, #1
 80082f8:	e772      	b.n	80081e0 <_dtoa_r+0x9f0>
 80082fa:	f000 f8e3 	bl	80084c4 <__multadd>
 80082fe:	4639      	mov	r1, r7
 8008300:	4680      	mov	r8, r0
 8008302:	2300      	movs	r3, #0
 8008304:	220a      	movs	r2, #10
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f8dc 	bl	80084c4 <__multadd>
 800830c:	4607      	mov	r7, r0
 800830e:	e7f1      	b.n	80082f4 <_dtoa_r+0xb04>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	9302      	str	r3, [sp, #8]
 8008314:	9d01      	ldr	r5, [sp, #4]
 8008316:	ee18 0a10 	vmov	r0, s16
 800831a:	4631      	mov	r1, r6
 800831c:	f7ff f9da 	bl	80076d4 <quorem>
 8008320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	f805 ab01 	strb.w	sl, [r5], #1
 800832a:	1aea      	subs	r2, r5, r3
 800832c:	9b02      	ldr	r3, [sp, #8]
 800832e:	4293      	cmp	r3, r2
 8008330:	dd09      	ble.n	8008346 <_dtoa_r+0xb56>
 8008332:	ee18 1a10 	vmov	r1, s16
 8008336:	2300      	movs	r3, #0
 8008338:	220a      	movs	r2, #10
 800833a:	4620      	mov	r0, r4
 800833c:	f000 f8c2 	bl	80084c4 <__multadd>
 8008340:	ee08 0a10 	vmov	s16, r0
 8008344:	e7e7      	b.n	8008316 <_dtoa_r+0xb26>
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfc8      	it	gt
 800834c:	461d      	movgt	r5, r3
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	bfd8      	it	le
 8008352:	2501      	movle	r5, #1
 8008354:	441d      	add	r5, r3
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	ee18 1a10 	vmov	r1, s16
 800835e:	2201      	movs	r2, #1
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fa5f 	bl	8008824 <__lshift>
 8008366:	4631      	mov	r1, r6
 8008368:	ee08 0a10 	vmov	s16, r0
 800836c:	f000 faca 	bl	8008904 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	dc91      	bgt.n	8008298 <_dtoa_r+0xaa8>
 8008374:	d102      	bne.n	800837c <_dtoa_r+0xb8c>
 8008376:	f01a 0f01 	tst.w	sl, #1
 800837a:	d18d      	bne.n	8008298 <_dtoa_r+0xaa8>
 800837c:	462b      	mov	r3, r5
 800837e:	461d      	mov	r5, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a30      	cmp	r2, #48	; 0x30
 8008386:	d0fa      	beq.n	800837e <_dtoa_r+0xb8e>
 8008388:	e6d7      	b.n	800813a <_dtoa_r+0x94a>
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d184      	bne.n	800829a <_dtoa_r+0xaaa>
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2331      	movs	r3, #49	; 0x31
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	e6ce      	b.n	800813a <_dtoa_r+0x94a>
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <_dtoa_r+0xbd4>)
 800839e:	f7ff ba95 	b.w	80078cc <_dtoa_r+0xdc>
 80083a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f aa6e 	bne.w	8007886 <_dtoa_r+0x96>
 80083aa:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <_dtoa_r+0xbd8>)
 80083ac:	f7ff ba8e 	b.w	80078cc <_dtoa_r+0xdc>
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dcae      	bgt.n	8008314 <_dtoa_r+0xb24>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	f73f aea8 	bgt.w	800810e <_dtoa_r+0x91e>
 80083be:	e7a9      	b.n	8008314 <_dtoa_r+0xb24>
 80083c0:	0800a04f 	.word	0x0800a04f
 80083c4:	08009fac 	.word	0x08009fac
 80083c8:	08009fd0 	.word	0x08009fd0

080083cc <_localeconv_r>:
 80083cc:	4800      	ldr	r0, [pc, #0]	; (80083d0 <_localeconv_r+0x4>)
 80083ce:	4770      	bx	lr
 80083d0:	20000164 	.word	0x20000164

080083d4 <malloc>:
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <malloc+0xc>)
 80083d6:	4601      	mov	r1, r0
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	f000 bc17 	b.w	8008c0c <_malloc_r>
 80083de:	bf00      	nop
 80083e0:	20000010 	.word	0x20000010

080083e4 <memcpy>:
 80083e4:	440a      	add	r2, r1
 80083e6:	4291      	cmp	r1, r2
 80083e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ec:	d100      	bne.n	80083f0 <memcpy+0xc>
 80083ee:	4770      	bx	lr
 80083f0:	b510      	push	{r4, lr}
 80083f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fa:	4291      	cmp	r1, r2
 80083fc:	d1f9      	bne.n	80083f2 <memcpy+0xe>
 80083fe:	bd10      	pop	{r4, pc}

08008400 <_Balloc>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008404:	4604      	mov	r4, r0
 8008406:	460d      	mov	r5, r1
 8008408:	b976      	cbnz	r6, 8008428 <_Balloc+0x28>
 800840a:	2010      	movs	r0, #16
 800840c:	f7ff ffe2 	bl	80083d4 <malloc>
 8008410:	4602      	mov	r2, r0
 8008412:	6260      	str	r0, [r4, #36]	; 0x24
 8008414:	b920      	cbnz	r0, 8008420 <_Balloc+0x20>
 8008416:	4b18      	ldr	r3, [pc, #96]	; (8008478 <_Balloc+0x78>)
 8008418:	4818      	ldr	r0, [pc, #96]	; (800847c <_Balloc+0x7c>)
 800841a:	2166      	movs	r1, #102	; 0x66
 800841c:	f000 fdd6 	bl	8008fcc <__assert_func>
 8008420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008424:	6006      	str	r6, [r0, #0]
 8008426:	60c6      	str	r6, [r0, #12]
 8008428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800842a:	68f3      	ldr	r3, [r6, #12]
 800842c:	b183      	cbz	r3, 8008450 <_Balloc+0x50>
 800842e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008436:	b9b8      	cbnz	r0, 8008468 <_Balloc+0x68>
 8008438:	2101      	movs	r1, #1
 800843a:	fa01 f605 	lsl.w	r6, r1, r5
 800843e:	1d72      	adds	r2, r6, #5
 8008440:	0092      	lsls	r2, r2, #2
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fb60 	bl	8008b08 <_calloc_r>
 8008448:	b160      	cbz	r0, 8008464 <_Balloc+0x64>
 800844a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800844e:	e00e      	b.n	800846e <_Balloc+0x6e>
 8008450:	2221      	movs	r2, #33	; 0x21
 8008452:	2104      	movs	r1, #4
 8008454:	4620      	mov	r0, r4
 8008456:	f000 fb57 	bl	8008b08 <_calloc_r>
 800845a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800845c:	60f0      	str	r0, [r6, #12]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e4      	bne.n	800842e <_Balloc+0x2e>
 8008464:	2000      	movs	r0, #0
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	6802      	ldr	r2, [r0, #0]
 800846a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800846e:	2300      	movs	r3, #0
 8008470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008474:	e7f7      	b.n	8008466 <_Balloc+0x66>
 8008476:	bf00      	nop
 8008478:	08009fdd 	.word	0x08009fdd
 800847c:	0800a060 	.word	0x0800a060

08008480 <_Bfree>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008484:	4605      	mov	r5, r0
 8008486:	460c      	mov	r4, r1
 8008488:	b976      	cbnz	r6, 80084a8 <_Bfree+0x28>
 800848a:	2010      	movs	r0, #16
 800848c:	f7ff ffa2 	bl	80083d4 <malloc>
 8008490:	4602      	mov	r2, r0
 8008492:	6268      	str	r0, [r5, #36]	; 0x24
 8008494:	b920      	cbnz	r0, 80084a0 <_Bfree+0x20>
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <_Bfree+0x3c>)
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <_Bfree+0x40>)
 800849a:	218a      	movs	r1, #138	; 0x8a
 800849c:	f000 fd96 	bl	8008fcc <__assert_func>
 80084a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084a4:	6006      	str	r6, [r0, #0]
 80084a6:	60c6      	str	r6, [r0, #12]
 80084a8:	b13c      	cbz	r4, 80084ba <_Bfree+0x3a>
 80084aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084b4:	6021      	str	r1, [r4, #0]
 80084b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	08009fdd 	.word	0x08009fdd
 80084c0:	0800a060 	.word	0x0800a060

080084c4 <__multadd>:
 80084c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	690d      	ldr	r5, [r1, #16]
 80084ca:	4607      	mov	r7, r0
 80084cc:	460c      	mov	r4, r1
 80084ce:	461e      	mov	r6, r3
 80084d0:	f101 0c14 	add.w	ip, r1, #20
 80084d4:	2000      	movs	r0, #0
 80084d6:	f8dc 3000 	ldr.w	r3, [ip]
 80084da:	b299      	uxth	r1, r3
 80084dc:	fb02 6101 	mla	r1, r2, r1, r6
 80084e0:	0c1e      	lsrs	r6, r3, #16
 80084e2:	0c0b      	lsrs	r3, r1, #16
 80084e4:	fb02 3306 	mla	r3, r2, r6, r3
 80084e8:	b289      	uxth	r1, r1
 80084ea:	3001      	adds	r0, #1
 80084ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084f0:	4285      	cmp	r5, r0
 80084f2:	f84c 1b04 	str.w	r1, [ip], #4
 80084f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084fa:	dcec      	bgt.n	80084d6 <__multadd+0x12>
 80084fc:	b30e      	cbz	r6, 8008542 <__multadd+0x7e>
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	42ab      	cmp	r3, r5
 8008502:	dc19      	bgt.n	8008538 <__multadd+0x74>
 8008504:	6861      	ldr	r1, [r4, #4]
 8008506:	4638      	mov	r0, r7
 8008508:	3101      	adds	r1, #1
 800850a:	f7ff ff79 	bl	8008400 <_Balloc>
 800850e:	4680      	mov	r8, r0
 8008510:	b928      	cbnz	r0, 800851e <__multadd+0x5a>
 8008512:	4602      	mov	r2, r0
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <__multadd+0x84>)
 8008516:	480d      	ldr	r0, [pc, #52]	; (800854c <__multadd+0x88>)
 8008518:	21b5      	movs	r1, #181	; 0xb5
 800851a:	f000 fd57 	bl	8008fcc <__assert_func>
 800851e:	6922      	ldr	r2, [r4, #16]
 8008520:	3202      	adds	r2, #2
 8008522:	f104 010c 	add.w	r1, r4, #12
 8008526:	0092      	lsls	r2, r2, #2
 8008528:	300c      	adds	r0, #12
 800852a:	f7ff ff5b 	bl	80083e4 <memcpy>
 800852e:	4621      	mov	r1, r4
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ffa5 	bl	8008480 <_Bfree>
 8008536:	4644      	mov	r4, r8
 8008538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800853c:	3501      	adds	r5, #1
 800853e:	615e      	str	r6, [r3, #20]
 8008540:	6125      	str	r5, [r4, #16]
 8008542:	4620      	mov	r0, r4
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	0800a04f 	.word	0x0800a04f
 800854c:	0800a060 	.word	0x0800a060

08008550 <__hi0bits>:
 8008550:	0c03      	lsrs	r3, r0, #16
 8008552:	041b      	lsls	r3, r3, #16
 8008554:	b9d3      	cbnz	r3, 800858c <__hi0bits+0x3c>
 8008556:	0400      	lsls	r0, r0, #16
 8008558:	2310      	movs	r3, #16
 800855a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800855e:	bf04      	itt	eq
 8008560:	0200      	lsleq	r0, r0, #8
 8008562:	3308      	addeq	r3, #8
 8008564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008568:	bf04      	itt	eq
 800856a:	0100      	lsleq	r0, r0, #4
 800856c:	3304      	addeq	r3, #4
 800856e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008572:	bf04      	itt	eq
 8008574:	0080      	lsleq	r0, r0, #2
 8008576:	3302      	addeq	r3, #2
 8008578:	2800      	cmp	r0, #0
 800857a:	db05      	blt.n	8008588 <__hi0bits+0x38>
 800857c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008580:	f103 0301 	add.w	r3, r3, #1
 8008584:	bf08      	it	eq
 8008586:	2320      	moveq	r3, #32
 8008588:	4618      	mov	r0, r3
 800858a:	4770      	bx	lr
 800858c:	2300      	movs	r3, #0
 800858e:	e7e4      	b.n	800855a <__hi0bits+0xa>

08008590 <__lo0bits>:
 8008590:	6803      	ldr	r3, [r0, #0]
 8008592:	f013 0207 	ands.w	r2, r3, #7
 8008596:	4601      	mov	r1, r0
 8008598:	d00b      	beq.n	80085b2 <__lo0bits+0x22>
 800859a:	07da      	lsls	r2, r3, #31
 800859c:	d423      	bmi.n	80085e6 <__lo0bits+0x56>
 800859e:	0798      	lsls	r0, r3, #30
 80085a0:	bf49      	itett	mi
 80085a2:	085b      	lsrmi	r3, r3, #1
 80085a4:	089b      	lsrpl	r3, r3, #2
 80085a6:	2001      	movmi	r0, #1
 80085a8:	600b      	strmi	r3, [r1, #0]
 80085aa:	bf5c      	itt	pl
 80085ac:	600b      	strpl	r3, [r1, #0]
 80085ae:	2002      	movpl	r0, #2
 80085b0:	4770      	bx	lr
 80085b2:	b298      	uxth	r0, r3
 80085b4:	b9a8      	cbnz	r0, 80085e2 <__lo0bits+0x52>
 80085b6:	0c1b      	lsrs	r3, r3, #16
 80085b8:	2010      	movs	r0, #16
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	b90a      	cbnz	r2, 80085c2 <__lo0bits+0x32>
 80085be:	3008      	adds	r0, #8
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	071a      	lsls	r2, r3, #28
 80085c4:	bf04      	itt	eq
 80085c6:	091b      	lsreq	r3, r3, #4
 80085c8:	3004      	addeq	r0, #4
 80085ca:	079a      	lsls	r2, r3, #30
 80085cc:	bf04      	itt	eq
 80085ce:	089b      	lsreq	r3, r3, #2
 80085d0:	3002      	addeq	r0, #2
 80085d2:	07da      	lsls	r2, r3, #31
 80085d4:	d403      	bmi.n	80085de <__lo0bits+0x4e>
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	f100 0001 	add.w	r0, r0, #1
 80085dc:	d005      	beq.n	80085ea <__lo0bits+0x5a>
 80085de:	600b      	str	r3, [r1, #0]
 80085e0:	4770      	bx	lr
 80085e2:	4610      	mov	r0, r2
 80085e4:	e7e9      	b.n	80085ba <__lo0bits+0x2a>
 80085e6:	2000      	movs	r0, #0
 80085e8:	4770      	bx	lr
 80085ea:	2020      	movs	r0, #32
 80085ec:	4770      	bx	lr
	...

080085f0 <__i2b>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	2101      	movs	r1, #1
 80085f6:	f7ff ff03 	bl	8008400 <_Balloc>
 80085fa:	4602      	mov	r2, r0
 80085fc:	b928      	cbnz	r0, 800860a <__i2b+0x1a>
 80085fe:	4b05      	ldr	r3, [pc, #20]	; (8008614 <__i2b+0x24>)
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <__i2b+0x28>)
 8008602:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008606:	f000 fce1 	bl	8008fcc <__assert_func>
 800860a:	2301      	movs	r3, #1
 800860c:	6144      	str	r4, [r0, #20]
 800860e:	6103      	str	r3, [r0, #16]
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	0800a04f 	.word	0x0800a04f
 8008618:	0800a060 	.word	0x0800a060

0800861c <__multiply>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	4691      	mov	r9, r2
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008628:	429a      	cmp	r2, r3
 800862a:	bfb8      	it	lt
 800862c:	460b      	movlt	r3, r1
 800862e:	460c      	mov	r4, r1
 8008630:	bfbc      	itt	lt
 8008632:	464c      	movlt	r4, r9
 8008634:	4699      	movlt	r9, r3
 8008636:	6927      	ldr	r7, [r4, #16]
 8008638:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	6861      	ldr	r1, [r4, #4]
 8008640:	eb07 060a 	add.w	r6, r7, sl
 8008644:	42b3      	cmp	r3, r6
 8008646:	b085      	sub	sp, #20
 8008648:	bfb8      	it	lt
 800864a:	3101      	addlt	r1, #1
 800864c:	f7ff fed8 	bl	8008400 <_Balloc>
 8008650:	b930      	cbnz	r0, 8008660 <__multiply+0x44>
 8008652:	4602      	mov	r2, r0
 8008654:	4b44      	ldr	r3, [pc, #272]	; (8008768 <__multiply+0x14c>)
 8008656:	4845      	ldr	r0, [pc, #276]	; (800876c <__multiply+0x150>)
 8008658:	f240 115d 	movw	r1, #349	; 0x15d
 800865c:	f000 fcb6 	bl	8008fcc <__assert_func>
 8008660:	f100 0514 	add.w	r5, r0, #20
 8008664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008668:	462b      	mov	r3, r5
 800866a:	2200      	movs	r2, #0
 800866c:	4543      	cmp	r3, r8
 800866e:	d321      	bcc.n	80086b4 <__multiply+0x98>
 8008670:	f104 0314 	add.w	r3, r4, #20
 8008674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008678:	f109 0314 	add.w	r3, r9, #20
 800867c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008680:	9202      	str	r2, [sp, #8]
 8008682:	1b3a      	subs	r2, r7, r4
 8008684:	3a15      	subs	r2, #21
 8008686:	f022 0203 	bic.w	r2, r2, #3
 800868a:	3204      	adds	r2, #4
 800868c:	f104 0115 	add.w	r1, r4, #21
 8008690:	428f      	cmp	r7, r1
 8008692:	bf38      	it	cc
 8008694:	2204      	movcc	r2, #4
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	9a02      	ldr	r2, [sp, #8]
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	429a      	cmp	r2, r3
 800869e:	d80c      	bhi.n	80086ba <__multiply+0x9e>
 80086a0:	2e00      	cmp	r6, #0
 80086a2:	dd03      	ble.n	80086ac <__multiply+0x90>
 80086a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05a      	beq.n	8008762 <__multiply+0x146>
 80086ac:	6106      	str	r6, [r0, #16]
 80086ae:	b005      	add	sp, #20
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	f843 2b04 	str.w	r2, [r3], #4
 80086b8:	e7d8      	b.n	800866c <__multiply+0x50>
 80086ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80086be:	f1ba 0f00 	cmp.w	sl, #0
 80086c2:	d024      	beq.n	800870e <__multiply+0xf2>
 80086c4:	f104 0e14 	add.w	lr, r4, #20
 80086c8:	46a9      	mov	r9, r5
 80086ca:	f04f 0c00 	mov.w	ip, #0
 80086ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086d2:	f8d9 1000 	ldr.w	r1, [r9]
 80086d6:	fa1f fb82 	uxth.w	fp, r2
 80086da:	b289      	uxth	r1, r1
 80086dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80086e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086e4:	f8d9 2000 	ldr.w	r2, [r9]
 80086e8:	4461      	add	r1, ip
 80086ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80086f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086f6:	b289      	uxth	r1, r1
 80086f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086fc:	4577      	cmp	r7, lr
 80086fe:	f849 1b04 	str.w	r1, [r9], #4
 8008702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008706:	d8e2      	bhi.n	80086ce <__multiply+0xb2>
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	f845 c002 	str.w	ip, [r5, r2]
 800870e:	9a03      	ldr	r2, [sp, #12]
 8008710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008714:	3304      	adds	r3, #4
 8008716:	f1b9 0f00 	cmp.w	r9, #0
 800871a:	d020      	beq.n	800875e <__multiply+0x142>
 800871c:	6829      	ldr	r1, [r5, #0]
 800871e:	f104 0c14 	add.w	ip, r4, #20
 8008722:	46ae      	mov	lr, r5
 8008724:	f04f 0a00 	mov.w	sl, #0
 8008728:	f8bc b000 	ldrh.w	fp, [ip]
 800872c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008730:	fb09 220b 	mla	r2, r9, fp, r2
 8008734:	4492      	add	sl, r2
 8008736:	b289      	uxth	r1, r1
 8008738:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800873c:	f84e 1b04 	str.w	r1, [lr], #4
 8008740:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008744:	f8be 1000 	ldrh.w	r1, [lr]
 8008748:	0c12      	lsrs	r2, r2, #16
 800874a:	fb09 1102 	mla	r1, r9, r2, r1
 800874e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008752:	4567      	cmp	r7, ip
 8008754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008758:	d8e6      	bhi.n	8008728 <__multiply+0x10c>
 800875a:	9a01      	ldr	r2, [sp, #4]
 800875c:	50a9      	str	r1, [r5, r2]
 800875e:	3504      	adds	r5, #4
 8008760:	e79a      	b.n	8008698 <__multiply+0x7c>
 8008762:	3e01      	subs	r6, #1
 8008764:	e79c      	b.n	80086a0 <__multiply+0x84>
 8008766:	bf00      	nop
 8008768:	0800a04f 	.word	0x0800a04f
 800876c:	0800a060 	.word	0x0800a060

08008770 <__pow5mult>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	4615      	mov	r5, r2
 8008776:	f012 0203 	ands.w	r2, r2, #3
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	d007      	beq.n	8008790 <__pow5mult+0x20>
 8008780:	4c25      	ldr	r4, [pc, #148]	; (8008818 <__pow5mult+0xa8>)
 8008782:	3a01      	subs	r2, #1
 8008784:	2300      	movs	r3, #0
 8008786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800878a:	f7ff fe9b 	bl	80084c4 <__multadd>
 800878e:	4607      	mov	r7, r0
 8008790:	10ad      	asrs	r5, r5, #2
 8008792:	d03d      	beq.n	8008810 <__pow5mult+0xa0>
 8008794:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008796:	b97c      	cbnz	r4, 80087b8 <__pow5mult+0x48>
 8008798:	2010      	movs	r0, #16
 800879a:	f7ff fe1b 	bl	80083d4 <malloc>
 800879e:	4602      	mov	r2, r0
 80087a0:	6270      	str	r0, [r6, #36]	; 0x24
 80087a2:	b928      	cbnz	r0, 80087b0 <__pow5mult+0x40>
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <__pow5mult+0xac>)
 80087a6:	481e      	ldr	r0, [pc, #120]	; (8008820 <__pow5mult+0xb0>)
 80087a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087ac:	f000 fc0e 	bl	8008fcc <__assert_func>
 80087b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087b4:	6004      	str	r4, [r0, #0]
 80087b6:	60c4      	str	r4, [r0, #12]
 80087b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087c0:	b94c      	cbnz	r4, 80087d6 <__pow5mult+0x66>
 80087c2:	f240 2171 	movw	r1, #625	; 0x271
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ff12 	bl	80085f0 <__i2b>
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80087d2:	4604      	mov	r4, r0
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	07eb      	lsls	r3, r5, #31
 80087dc:	d50a      	bpl.n	80087f4 <__pow5mult+0x84>
 80087de:	4639      	mov	r1, r7
 80087e0:	4622      	mov	r2, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ff1a 	bl	800861c <__multiply>
 80087e8:	4639      	mov	r1, r7
 80087ea:	4680      	mov	r8, r0
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff fe47 	bl	8008480 <_Bfree>
 80087f2:	4647      	mov	r7, r8
 80087f4:	106d      	asrs	r5, r5, #1
 80087f6:	d00b      	beq.n	8008810 <__pow5mult+0xa0>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	b938      	cbnz	r0, 800880c <__pow5mult+0x9c>
 80087fc:	4622      	mov	r2, r4
 80087fe:	4621      	mov	r1, r4
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ff0b 	bl	800861c <__multiply>
 8008806:	6020      	str	r0, [r4, #0]
 8008808:	f8c0 9000 	str.w	r9, [r0]
 800880c:	4604      	mov	r4, r0
 800880e:	e7e4      	b.n	80087da <__pow5mult+0x6a>
 8008810:	4638      	mov	r0, r7
 8008812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008816:	bf00      	nop
 8008818:	0800a1b0 	.word	0x0800a1b0
 800881c:	08009fdd 	.word	0x08009fdd
 8008820:	0800a060 	.word	0x0800a060

08008824 <__lshift>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	460c      	mov	r4, r1
 800882a:	6849      	ldr	r1, [r1, #4]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	4607      	mov	r7, r0
 8008836:	4691      	mov	r9, r2
 8008838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800883c:	f108 0601 	add.w	r6, r8, #1
 8008840:	42b3      	cmp	r3, r6
 8008842:	db0b      	blt.n	800885c <__lshift+0x38>
 8008844:	4638      	mov	r0, r7
 8008846:	f7ff fddb 	bl	8008400 <_Balloc>
 800884a:	4605      	mov	r5, r0
 800884c:	b948      	cbnz	r0, 8008862 <__lshift+0x3e>
 800884e:	4602      	mov	r2, r0
 8008850:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <__lshift+0xd8>)
 8008852:	482b      	ldr	r0, [pc, #172]	; (8008900 <__lshift+0xdc>)
 8008854:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008858:	f000 fbb8 	bl	8008fcc <__assert_func>
 800885c:	3101      	adds	r1, #1
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	e7ee      	b.n	8008840 <__lshift+0x1c>
 8008862:	2300      	movs	r3, #0
 8008864:	f100 0114 	add.w	r1, r0, #20
 8008868:	f100 0210 	add.w	r2, r0, #16
 800886c:	4618      	mov	r0, r3
 800886e:	4553      	cmp	r3, sl
 8008870:	db37      	blt.n	80088e2 <__lshift+0xbe>
 8008872:	6920      	ldr	r0, [r4, #16]
 8008874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008878:	f104 0314 	add.w	r3, r4, #20
 800887c:	f019 091f 	ands.w	r9, r9, #31
 8008880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008888:	d02f      	beq.n	80088ea <__lshift+0xc6>
 800888a:	f1c9 0e20 	rsb	lr, r9, #32
 800888e:	468a      	mov	sl, r1
 8008890:	f04f 0c00 	mov.w	ip, #0
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	fa02 f209 	lsl.w	r2, r2, r9
 800889a:	ea42 020c 	orr.w	r2, r2, ip
 800889e:	f84a 2b04 	str.w	r2, [sl], #4
 80088a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a6:	4298      	cmp	r0, r3
 80088a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80088ac:	d8f2      	bhi.n	8008894 <__lshift+0x70>
 80088ae:	1b03      	subs	r3, r0, r4
 80088b0:	3b15      	subs	r3, #21
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	3304      	adds	r3, #4
 80088b8:	f104 0215 	add.w	r2, r4, #21
 80088bc:	4290      	cmp	r0, r2
 80088be:	bf38      	it	cc
 80088c0:	2304      	movcc	r3, #4
 80088c2:	f841 c003 	str.w	ip, [r1, r3]
 80088c6:	f1bc 0f00 	cmp.w	ip, #0
 80088ca:	d001      	beq.n	80088d0 <__lshift+0xac>
 80088cc:	f108 0602 	add.w	r6, r8, #2
 80088d0:	3e01      	subs	r6, #1
 80088d2:	4638      	mov	r0, r7
 80088d4:	612e      	str	r6, [r5, #16]
 80088d6:	4621      	mov	r1, r4
 80088d8:	f7ff fdd2 	bl	8008480 <_Bfree>
 80088dc:	4628      	mov	r0, r5
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80088e6:	3301      	adds	r3, #1
 80088e8:	e7c1      	b.n	800886e <__lshift+0x4a>
 80088ea:	3904      	subs	r1, #4
 80088ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80088f4:	4298      	cmp	r0, r3
 80088f6:	d8f9      	bhi.n	80088ec <__lshift+0xc8>
 80088f8:	e7ea      	b.n	80088d0 <__lshift+0xac>
 80088fa:	bf00      	nop
 80088fc:	0800a04f 	.word	0x0800a04f
 8008900:	0800a060 	.word	0x0800a060

08008904 <__mcmp>:
 8008904:	b530      	push	{r4, r5, lr}
 8008906:	6902      	ldr	r2, [r0, #16]
 8008908:	690c      	ldr	r4, [r1, #16]
 800890a:	1b12      	subs	r2, r2, r4
 800890c:	d10e      	bne.n	800892c <__mcmp+0x28>
 800890e:	f100 0314 	add.w	r3, r0, #20
 8008912:	3114      	adds	r1, #20
 8008914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800891c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008924:	42a5      	cmp	r5, r4
 8008926:	d003      	beq.n	8008930 <__mcmp+0x2c>
 8008928:	d305      	bcc.n	8008936 <__mcmp+0x32>
 800892a:	2201      	movs	r2, #1
 800892c:	4610      	mov	r0, r2
 800892e:	bd30      	pop	{r4, r5, pc}
 8008930:	4283      	cmp	r3, r0
 8008932:	d3f3      	bcc.n	800891c <__mcmp+0x18>
 8008934:	e7fa      	b.n	800892c <__mcmp+0x28>
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	e7f7      	b.n	800892c <__mcmp+0x28>

0800893c <__mdiff>:
 800893c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	4606      	mov	r6, r0
 8008944:	4611      	mov	r1, r2
 8008946:	4620      	mov	r0, r4
 8008948:	4690      	mov	r8, r2
 800894a:	f7ff ffdb 	bl	8008904 <__mcmp>
 800894e:	1e05      	subs	r5, r0, #0
 8008950:	d110      	bne.n	8008974 <__mdiff+0x38>
 8008952:	4629      	mov	r1, r5
 8008954:	4630      	mov	r0, r6
 8008956:	f7ff fd53 	bl	8008400 <_Balloc>
 800895a:	b930      	cbnz	r0, 800896a <__mdiff+0x2e>
 800895c:	4b3a      	ldr	r3, [pc, #232]	; (8008a48 <__mdiff+0x10c>)
 800895e:	4602      	mov	r2, r0
 8008960:	f240 2132 	movw	r1, #562	; 0x232
 8008964:	4839      	ldr	r0, [pc, #228]	; (8008a4c <__mdiff+0x110>)
 8008966:	f000 fb31 	bl	8008fcc <__assert_func>
 800896a:	2301      	movs	r3, #1
 800896c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008974:	bfa4      	itt	ge
 8008976:	4643      	movge	r3, r8
 8008978:	46a0      	movge	r8, r4
 800897a:	4630      	mov	r0, r6
 800897c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008980:	bfa6      	itte	ge
 8008982:	461c      	movge	r4, r3
 8008984:	2500      	movge	r5, #0
 8008986:	2501      	movlt	r5, #1
 8008988:	f7ff fd3a 	bl	8008400 <_Balloc>
 800898c:	b920      	cbnz	r0, 8008998 <__mdiff+0x5c>
 800898e:	4b2e      	ldr	r3, [pc, #184]	; (8008a48 <__mdiff+0x10c>)
 8008990:	4602      	mov	r2, r0
 8008992:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008996:	e7e5      	b.n	8008964 <__mdiff+0x28>
 8008998:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800899c:	6926      	ldr	r6, [r4, #16]
 800899e:	60c5      	str	r5, [r0, #12]
 80089a0:	f104 0914 	add.w	r9, r4, #20
 80089a4:	f108 0514 	add.w	r5, r8, #20
 80089a8:	f100 0e14 	add.w	lr, r0, #20
 80089ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089b4:	f108 0210 	add.w	r2, r8, #16
 80089b8:	46f2      	mov	sl, lr
 80089ba:	2100      	movs	r1, #0
 80089bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80089c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80089c4:	fa1f f883 	uxth.w	r8, r3
 80089c8:	fa11 f18b 	uxtah	r1, r1, fp
 80089cc:	0c1b      	lsrs	r3, r3, #16
 80089ce:	eba1 0808 	sub.w	r8, r1, r8
 80089d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089da:	fa1f f888 	uxth.w	r8, r8
 80089de:	1419      	asrs	r1, r3, #16
 80089e0:	454e      	cmp	r6, r9
 80089e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089e6:	f84a 3b04 	str.w	r3, [sl], #4
 80089ea:	d8e7      	bhi.n	80089bc <__mdiff+0x80>
 80089ec:	1b33      	subs	r3, r6, r4
 80089ee:	3b15      	subs	r3, #21
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	3304      	adds	r3, #4
 80089f6:	3415      	adds	r4, #21
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	bf38      	it	cc
 80089fc:	2304      	movcc	r3, #4
 80089fe:	441d      	add	r5, r3
 8008a00:	4473      	add	r3, lr
 8008a02:	469e      	mov	lr, r3
 8008a04:	462e      	mov	r6, r5
 8008a06:	4566      	cmp	r6, ip
 8008a08:	d30e      	bcc.n	8008a28 <__mdiff+0xec>
 8008a0a:	f10c 0203 	add.w	r2, ip, #3
 8008a0e:	1b52      	subs	r2, r2, r5
 8008a10:	f022 0203 	bic.w	r2, r2, #3
 8008a14:	3d03      	subs	r5, #3
 8008a16:	45ac      	cmp	ip, r5
 8008a18:	bf38      	it	cc
 8008a1a:	2200      	movcc	r2, #0
 8008a1c:	441a      	add	r2, r3
 8008a1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a22:	b17b      	cbz	r3, 8008a44 <__mdiff+0x108>
 8008a24:	6107      	str	r7, [r0, #16]
 8008a26:	e7a3      	b.n	8008970 <__mdiff+0x34>
 8008a28:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a2c:	fa11 f288 	uxtah	r2, r1, r8
 8008a30:	1414      	asrs	r4, r2, #16
 8008a32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a36:	b292      	uxth	r2, r2
 8008a38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a3c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a40:	1421      	asrs	r1, r4, #16
 8008a42:	e7e0      	b.n	8008a06 <__mdiff+0xca>
 8008a44:	3f01      	subs	r7, #1
 8008a46:	e7ea      	b.n	8008a1e <__mdiff+0xe2>
 8008a48:	0800a04f 	.word	0x0800a04f
 8008a4c:	0800a060 	.word	0x0800a060

08008a50 <__d2b>:
 8008a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	4689      	mov	r9, r1
 8008a56:	2101      	movs	r1, #1
 8008a58:	ec57 6b10 	vmov	r6, r7, d0
 8008a5c:	4690      	mov	r8, r2
 8008a5e:	f7ff fccf 	bl	8008400 <_Balloc>
 8008a62:	4604      	mov	r4, r0
 8008a64:	b930      	cbnz	r0, 8008a74 <__d2b+0x24>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <__d2b+0xb0>)
 8008a6a:	4826      	ldr	r0, [pc, #152]	; (8008b04 <__d2b+0xb4>)
 8008a6c:	f240 310a 	movw	r1, #778	; 0x30a
 8008a70:	f000 faac 	bl	8008fcc <__assert_func>
 8008a74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a7c:	bb35      	cbnz	r5, 8008acc <__d2b+0x7c>
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	d028      	beq.n	8008ad6 <__d2b+0x86>
 8008a84:	4668      	mov	r0, sp
 8008a86:	9600      	str	r6, [sp, #0]
 8008a88:	f7ff fd82 	bl	8008590 <__lo0bits>
 8008a8c:	9900      	ldr	r1, [sp, #0]
 8008a8e:	b300      	cbz	r0, 8008ad2 <__d2b+0x82>
 8008a90:	9a01      	ldr	r2, [sp, #4]
 8008a92:	f1c0 0320 	rsb	r3, r0, #32
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	40c2      	lsrs	r2, r0
 8008a9e:	6163      	str	r3, [r4, #20]
 8008aa0:	9201      	str	r2, [sp, #4]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	61a3      	str	r3, [r4, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	bf14      	ite	ne
 8008aaa:	2202      	movne	r2, #2
 8008aac:	2201      	moveq	r2, #1
 8008aae:	6122      	str	r2, [r4, #16]
 8008ab0:	b1d5      	cbz	r5, 8008ae8 <__d2b+0x98>
 8008ab2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ab6:	4405      	add	r5, r0
 8008ab8:	f8c9 5000 	str.w	r5, [r9]
 8008abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ac0:	f8c8 0000 	str.w	r0, [r8]
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ad0:	e7d5      	b.n	8008a7e <__d2b+0x2e>
 8008ad2:	6161      	str	r1, [r4, #20]
 8008ad4:	e7e5      	b.n	8008aa2 <__d2b+0x52>
 8008ad6:	a801      	add	r0, sp, #4
 8008ad8:	f7ff fd5a 	bl	8008590 <__lo0bits>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	6163      	str	r3, [r4, #20]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	6122      	str	r2, [r4, #16]
 8008ae4:	3020      	adds	r0, #32
 8008ae6:	e7e3      	b.n	8008ab0 <__d2b+0x60>
 8008ae8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008aec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008af0:	f8c9 0000 	str.w	r0, [r9]
 8008af4:	6918      	ldr	r0, [r3, #16]
 8008af6:	f7ff fd2b 	bl	8008550 <__hi0bits>
 8008afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008afe:	e7df      	b.n	8008ac0 <__d2b+0x70>
 8008b00:	0800a04f 	.word	0x0800a04f
 8008b04:	0800a060 	.word	0x0800a060

08008b08 <_calloc_r>:
 8008b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b0a:	fba1 2402 	umull	r2, r4, r1, r2
 8008b0e:	b94c      	cbnz	r4, 8008b24 <_calloc_r+0x1c>
 8008b10:	4611      	mov	r1, r2
 8008b12:	9201      	str	r2, [sp, #4]
 8008b14:	f000 f87a 	bl	8008c0c <_malloc_r>
 8008b18:	9a01      	ldr	r2, [sp, #4]
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	b930      	cbnz	r0, 8008b2c <_calloc_r+0x24>
 8008b1e:	4628      	mov	r0, r5
 8008b20:	b003      	add	sp, #12
 8008b22:	bd30      	pop	{r4, r5, pc}
 8008b24:	220c      	movs	r2, #12
 8008b26:	6002      	str	r2, [r0, #0]
 8008b28:	2500      	movs	r5, #0
 8008b2a:	e7f8      	b.n	8008b1e <_calloc_r+0x16>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7fe f93f 	bl	8006db0 <memset>
 8008b32:	e7f4      	b.n	8008b1e <_calloc_r+0x16>

08008b34 <_free_r>:
 8008b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d044      	beq.n	8008bc4 <_free_r+0x90>
 8008b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3e:	9001      	str	r0, [sp, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f1a1 0404 	sub.w	r4, r1, #4
 8008b46:	bfb8      	it	lt
 8008b48:	18e4      	addlt	r4, r4, r3
 8008b4a:	f000 fa9b 	bl	8009084 <__malloc_lock>
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x30>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b60:	f000 ba96 	b.w	8009090 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x46>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x22>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x50>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x46>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1855      	adds	r5, r2, r1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x70>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	4421      	add	r1, r4
 8008b90:	1854      	adds	r4, r2, r1
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x26>
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4421      	add	r1, r4
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x26>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x78>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x26>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1949      	addeq	r1, r1, r5
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x26>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	20000678 	.word	0x20000678

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f000 f9e8 	bl	8008fac <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f9e3 	bl	8008fac <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f9d8 	bl	8008fac <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	2000067c 	.word	0x2000067c

08008c0c <_malloc_r>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	4e2e      	ldr	r6, [pc, #184]	; (8008cf0 <_malloc_r+0xe4>)
 8008c36:	f000 fa25 	bl	8009084 <__malloc_lock>
 8008c3a:	6833      	ldr	r3, [r6, #0]
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	bb34      	cbnz	r4, 8008c8e <_malloc_r+0x82>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ffc2 	bl	8008bcc <sbrk_aligned>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d14d      	bne.n	8008cea <_malloc_r+0xde>
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	4626      	mov	r6, r4
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d140      	bne.n	8008cd8 <_malloc_r+0xcc>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	eb04 0803 	add.w	r8, r4, r3
 8008c60:	f000 f9a4 	bl	8008fac <_sbrk_r>
 8008c64:	4580      	cmp	r8, r0
 8008c66:	d13a      	bne.n	8008cde <_malloc_r+0xd2>
 8008c68:	6821      	ldr	r1, [r4, #0]
 8008c6a:	3503      	adds	r5, #3
 8008c6c:	1a6d      	subs	r5, r5, r1
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <sbrk_aligned>
 8008c82:	3001      	adds	r0, #1
 8008c84:	d02b      	beq.n	8008cde <_malloc_r+0xd2>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	442b      	add	r3, r5
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	e00e      	b.n	8008cac <_malloc_r+0xa0>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	d41e      	bmi.n	8008cd2 <_malloc_r+0xc6>
 8008c94:	2a0b      	cmp	r2, #11
 8008c96:	d916      	bls.n	8008cc6 <_malloc_r+0xba>
 8008c98:	1961      	adds	r1, r4, r5
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6025      	str	r5, [r4, #0]
 8008c9e:	bf18      	it	ne
 8008ca0:	6059      	strne	r1, [r3, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	bf08      	it	eq
 8008ca6:	6031      	streq	r1, [r6, #0]
 8008ca8:	5162      	str	r2, [r4, r5]
 8008caa:	604b      	str	r3, [r1, #4]
 8008cac:	4638      	mov	r0, r7
 8008cae:	f104 060b 	add.w	r6, r4, #11
 8008cb2:	f000 f9ed 	bl	8009090 <__malloc_unlock>
 8008cb6:	f026 0607 	bic.w	r6, r6, #7
 8008cba:	1d23      	adds	r3, r4, #4
 8008cbc:	1af2      	subs	r2, r6, r3
 8008cbe:	d0b6      	beq.n	8008c2e <_malloc_r+0x22>
 8008cc0:	1b9b      	subs	r3, r3, r6
 8008cc2:	50a3      	str	r3, [r4, r2]
 8008cc4:	e7b3      	b.n	8008c2e <_malloc_r+0x22>
 8008cc6:	6862      	ldr	r2, [r4, #4]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	bf0c      	ite	eq
 8008ccc:	6032      	streq	r2, [r6, #0]
 8008cce:	605a      	strne	r2, [r3, #4]
 8008cd0:	e7ec      	b.n	8008cac <_malloc_r+0xa0>
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	6864      	ldr	r4, [r4, #4]
 8008cd6:	e7b2      	b.n	8008c3e <_malloc_r+0x32>
 8008cd8:	4634      	mov	r4, r6
 8008cda:	6876      	ldr	r6, [r6, #4]
 8008cdc:	e7b9      	b.n	8008c52 <_malloc_r+0x46>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f000 f9d4 	bl	8009090 <__malloc_unlock>
 8008ce8:	e7a1      	b.n	8008c2e <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7de      	b.n	8008cac <_malloc_r+0xa0>
 8008cee:	bf00      	nop
 8008cf0:	20000678 	.word	0x20000678

08008cf4 <__ssputs_r>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	688e      	ldr	r6, [r1, #8]
 8008cfa:	429e      	cmp	r6, r3
 8008cfc:	4682      	mov	sl, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4690      	mov	r8, r2
 8008d02:	461f      	mov	r7, r3
 8008d04:	d838      	bhi.n	8008d78 <__ssputs_r+0x84>
 8008d06:	898a      	ldrh	r2, [r1, #12]
 8008d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d0c:	d032      	beq.n	8008d74 <__ssputs_r+0x80>
 8008d0e:	6825      	ldr	r5, [r4, #0]
 8008d10:	6909      	ldr	r1, [r1, #16]
 8008d12:	eba5 0901 	sub.w	r9, r5, r1
 8008d16:	6965      	ldr	r5, [r4, #20]
 8008d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d20:	3301      	adds	r3, #1
 8008d22:	444b      	add	r3, r9
 8008d24:	106d      	asrs	r5, r5, #1
 8008d26:	429d      	cmp	r5, r3
 8008d28:	bf38      	it	cc
 8008d2a:	461d      	movcc	r5, r3
 8008d2c:	0553      	lsls	r3, r2, #21
 8008d2e:	d531      	bpl.n	8008d94 <__ssputs_r+0xa0>
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7ff ff6b 	bl	8008c0c <_malloc_r>
 8008d36:	4606      	mov	r6, r0
 8008d38:	b950      	cbnz	r0, 8008d50 <__ssputs_r+0x5c>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	f8ca 3000 	str.w	r3, [sl]
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	6921      	ldr	r1, [r4, #16]
 8008d52:	464a      	mov	r2, r9
 8008d54:	f7ff fb46 	bl	80083e4 <memcpy>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	6126      	str	r6, [r4, #16]
 8008d66:	6165      	str	r5, [r4, #20]
 8008d68:	444e      	add	r6, r9
 8008d6a:	eba5 0509 	sub.w	r5, r5, r9
 8008d6e:	6026      	str	r6, [r4, #0]
 8008d70:	60a5      	str	r5, [r4, #8]
 8008d72:	463e      	mov	r6, r7
 8008d74:	42be      	cmp	r6, r7
 8008d76:	d900      	bls.n	8008d7a <__ssputs_r+0x86>
 8008d78:	463e      	mov	r6, r7
 8008d7a:	6820      	ldr	r0, [r4, #0]
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4641      	mov	r1, r8
 8008d80:	f000 f966 	bl	8009050 <memmove>
 8008d84:	68a3      	ldr	r3, [r4, #8]
 8008d86:	1b9b      	subs	r3, r3, r6
 8008d88:	60a3      	str	r3, [r4, #8]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	4433      	add	r3, r6
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	2000      	movs	r0, #0
 8008d92:	e7db      	b.n	8008d4c <__ssputs_r+0x58>
 8008d94:	462a      	mov	r2, r5
 8008d96:	f000 f981 	bl	800909c <_realloc_r>
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1e1      	bne.n	8008d64 <__ssputs_r+0x70>
 8008da0:	6921      	ldr	r1, [r4, #16]
 8008da2:	4650      	mov	r0, sl
 8008da4:	f7ff fec6 	bl	8008b34 <_free_r>
 8008da8:	e7c7      	b.n	8008d3a <__ssputs_r+0x46>
	...

08008dac <_svfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4698      	mov	r8, r3
 8008db2:	898b      	ldrh	r3, [r1, #12]
 8008db4:	061b      	lsls	r3, r3, #24
 8008db6:	b09d      	sub	sp, #116	; 0x74
 8008db8:	4607      	mov	r7, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	d50e      	bpl.n	8008dde <_svfiprintf_r+0x32>
 8008dc0:	690b      	ldr	r3, [r1, #16]
 8008dc2:	b963      	cbnz	r3, 8008dde <_svfiprintf_r+0x32>
 8008dc4:	2140      	movs	r1, #64	; 0x40
 8008dc6:	f7ff ff21 	bl	8008c0c <_malloc_r>
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	6128      	str	r0, [r5, #16]
 8008dce:	b920      	cbnz	r0, 8008dda <_svfiprintf_r+0x2e>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	e0d1      	b.n	8008f7e <_svfiprintf_r+0x1d2>
 8008dda:	2340      	movs	r3, #64	; 0x40
 8008ddc:	616b      	str	r3, [r5, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9309      	str	r3, [sp, #36]	; 0x24
 8008de2:	2320      	movs	r3, #32
 8008de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dec:	2330      	movs	r3, #48	; 0x30
 8008dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f98 <_svfiprintf_r+0x1ec>
 8008df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008df6:	f04f 0901 	mov.w	r9, #1
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	469a      	mov	sl, r3
 8008dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e02:	b10a      	cbz	r2, 8008e08 <_svfiprintf_r+0x5c>
 8008e04:	2a25      	cmp	r2, #37	; 0x25
 8008e06:	d1f9      	bne.n	8008dfc <_svfiprintf_r+0x50>
 8008e08:	ebba 0b04 	subs.w	fp, sl, r4
 8008e0c:	d00b      	beq.n	8008e26 <_svfiprintf_r+0x7a>
 8008e0e:	465b      	mov	r3, fp
 8008e10:	4622      	mov	r2, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ff6d 	bl	8008cf4 <__ssputs_r>
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f000 80aa 	beq.w	8008f74 <_svfiprintf_r+0x1c8>
 8008e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e22:	445a      	add	r2, fp
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80a2 	beq.w	8008f74 <_svfiprintf_r+0x1c8>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f04f 32ff 	mov.w	r2, #4294967295
 8008e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3a:	f10a 0a01 	add.w	sl, sl, #1
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	9307      	str	r3, [sp, #28]
 8008e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e46:	931a      	str	r3, [sp, #104]	; 0x68
 8008e48:	4654      	mov	r4, sl
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e50:	4851      	ldr	r0, [pc, #324]	; (8008f98 <_svfiprintf_r+0x1ec>)
 8008e52:	f7f7 f9c5 	bl	80001e0 <memchr>
 8008e56:	9a04      	ldr	r2, [sp, #16]
 8008e58:	b9d8      	cbnz	r0, 8008e92 <_svfiprintf_r+0xe6>
 8008e5a:	06d0      	lsls	r0, r2, #27
 8008e5c:	bf44      	itt	mi
 8008e5e:	2320      	movmi	r3, #32
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	0711      	lsls	r1, r2, #28
 8008e66:	bf44      	itt	mi
 8008e68:	232b      	movmi	r3, #43	; 0x2b
 8008e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e72:	2b2a      	cmp	r3, #42	; 0x2a
 8008e74:	d015      	beq.n	8008ea2 <_svfiprintf_r+0xf6>
 8008e76:	9a07      	ldr	r2, [sp, #28]
 8008e78:	4654      	mov	r4, sl
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4621      	mov	r1, r4
 8008e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e86:	3b30      	subs	r3, #48	; 0x30
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d94e      	bls.n	8008f2a <_svfiprintf_r+0x17e>
 8008e8c:	b1b0      	cbz	r0, 8008ebc <_svfiprintf_r+0x110>
 8008e8e:	9207      	str	r2, [sp, #28]
 8008e90:	e014      	b.n	8008ebc <_svfiprintf_r+0x110>
 8008e92:	eba0 0308 	sub.w	r3, r0, r8
 8008e96:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	46a2      	mov	sl, r4
 8008ea0:	e7d2      	b.n	8008e48 <_svfiprintf_r+0x9c>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	9103      	str	r1, [sp, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbb      	ittet	lt
 8008eae:	425b      	neglt	r3, r3
 8008eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb4:	9307      	strge	r3, [sp, #28]
 8008eb6:	9307      	strlt	r3, [sp, #28]
 8008eb8:	bfb8      	it	lt
 8008eba:	9204      	strlt	r2, [sp, #16]
 8008ebc:	7823      	ldrb	r3, [r4, #0]
 8008ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec0:	d10c      	bne.n	8008edc <_svfiprintf_r+0x130>
 8008ec2:	7863      	ldrb	r3, [r4, #1]
 8008ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec6:	d135      	bne.n	8008f34 <_svfiprintf_r+0x188>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9203      	str	r2, [sp, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfb8      	it	lt
 8008ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ed8:	3402      	adds	r4, #2
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fa8 <_svfiprintf_r+0x1fc>
 8008ee0:	7821      	ldrb	r1, [r4, #0]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	f7f7 f97b 	bl	80001e0 <memchr>
 8008eea:	b140      	cbz	r0, 8008efe <_svfiprintf_r+0x152>
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	eba0 000a 	sub.w	r0, r0, sl
 8008ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	4303      	orrs	r3, r0
 8008efa:	3401      	adds	r4, #1
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f02:	4826      	ldr	r0, [pc, #152]	; (8008f9c <_svfiprintf_r+0x1f0>)
 8008f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f08:	2206      	movs	r2, #6
 8008f0a:	f7f7 f969 	bl	80001e0 <memchr>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d038      	beq.n	8008f84 <_svfiprintf_r+0x1d8>
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <_svfiprintf_r+0x1f4>)
 8008f14:	bb1b      	cbnz	r3, 8008f5e <_svfiprintf_r+0x1b2>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	3307      	adds	r3, #7
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	3308      	adds	r3, #8
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	4433      	add	r3, r6
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	e767      	b.n	8008dfa <_svfiprintf_r+0x4e>
 8008f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f2e:	460c      	mov	r4, r1
 8008f30:	2001      	movs	r0, #1
 8008f32:	e7a5      	b.n	8008e80 <_svfiprintf_r+0xd4>
 8008f34:	2300      	movs	r3, #0
 8008f36:	3401      	adds	r4, #1
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f04f 0c0a 	mov.w	ip, #10
 8008f40:	4620      	mov	r0, r4
 8008f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f46:	3a30      	subs	r2, #48	; 0x30
 8008f48:	2a09      	cmp	r2, #9
 8008f4a:	d903      	bls.n	8008f54 <_svfiprintf_r+0x1a8>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0c5      	beq.n	8008edc <_svfiprintf_r+0x130>
 8008f50:	9105      	str	r1, [sp, #20]
 8008f52:	e7c3      	b.n	8008edc <_svfiprintf_r+0x130>
 8008f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f58:	4604      	mov	r4, r0
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e7f0      	b.n	8008f40 <_svfiprintf_r+0x194>
 8008f5e:	ab03      	add	r3, sp, #12
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	462a      	mov	r2, r5
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <_svfiprintf_r+0x1f8>)
 8008f66:	a904      	add	r1, sp, #16
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7fd ffc9 	bl	8006f00 <_printf_float>
 8008f6e:	1c42      	adds	r2, r0, #1
 8008f70:	4606      	mov	r6, r0
 8008f72:	d1d6      	bne.n	8008f22 <_svfiprintf_r+0x176>
 8008f74:	89ab      	ldrh	r3, [r5, #12]
 8008f76:	065b      	lsls	r3, r3, #25
 8008f78:	f53f af2c 	bmi.w	8008dd4 <_svfiprintf_r+0x28>
 8008f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f7e:	b01d      	add	sp, #116	; 0x74
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <_svfiprintf_r+0x1f8>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7fe fa5a 	bl	8007448 <_printf_i>
 8008f94:	e7eb      	b.n	8008f6e <_svfiprintf_r+0x1c2>
 8008f96:	bf00      	nop
 8008f98:	0800a1bc 	.word	0x0800a1bc
 8008f9c:	0800a1c6 	.word	0x0800a1c6
 8008fa0:	08006f01 	.word	0x08006f01
 8008fa4:	08008cf5 	.word	0x08008cf5
 8008fa8:	0800a1c2 	.word	0x0800a1c2

08008fac <_sbrk_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_sbrk_r+0x1c>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	f7f9 f94e 	bl	8002258 <_sbrk>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_sbrk_r+0x1a>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_sbrk_r+0x1a>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20000680 	.word	0x20000680

08008fcc <__assert_func>:
 8008fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fce:	4614      	mov	r4, r2
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <__assert_func+0x2c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	68d8      	ldr	r0, [r3, #12]
 8008fda:	b14c      	cbz	r4, 8008ff0 <__assert_func+0x24>
 8008fdc:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <__assert_func+0x30>)
 8008fde:	9100      	str	r1, [sp, #0]
 8008fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fe4:	4906      	ldr	r1, [pc, #24]	; (8009000 <__assert_func+0x34>)
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	f000 f80e 	bl	8009008 <fiprintf>
 8008fec:	f000 faac 	bl	8009548 <abort>
 8008ff0:	4b04      	ldr	r3, [pc, #16]	; (8009004 <__assert_func+0x38>)
 8008ff2:	461c      	mov	r4, r3
 8008ff4:	e7f3      	b.n	8008fde <__assert_func+0x12>
 8008ff6:	bf00      	nop
 8008ff8:	20000010 	.word	0x20000010
 8008ffc:	0800a1cd 	.word	0x0800a1cd
 8009000:	0800a1da 	.word	0x0800a1da
 8009004:	0800a208 	.word	0x0800a208

08009008 <fiprintf>:
 8009008:	b40e      	push	{r1, r2, r3}
 800900a:	b503      	push	{r0, r1, lr}
 800900c:	4601      	mov	r1, r0
 800900e:	ab03      	add	r3, sp, #12
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <fiprintf+0x20>)
 8009012:	f853 2b04 	ldr.w	r2, [r3], #4
 8009016:	6800      	ldr	r0, [r0, #0]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f000 f897 	bl	800914c <_vfiprintf_r>
 800901e:	b002      	add	sp, #8
 8009020:	f85d eb04 	ldr.w	lr, [sp], #4
 8009024:	b003      	add	sp, #12
 8009026:	4770      	bx	lr
 8009028:	20000010 	.word	0x20000010

0800902c <__ascii_mbtowc>:
 800902c:	b082      	sub	sp, #8
 800902e:	b901      	cbnz	r1, 8009032 <__ascii_mbtowc+0x6>
 8009030:	a901      	add	r1, sp, #4
 8009032:	b142      	cbz	r2, 8009046 <__ascii_mbtowc+0x1a>
 8009034:	b14b      	cbz	r3, 800904a <__ascii_mbtowc+0x1e>
 8009036:	7813      	ldrb	r3, [r2, #0]
 8009038:	600b      	str	r3, [r1, #0]
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	1e10      	subs	r0, r2, #0
 800903e:	bf18      	it	ne
 8009040:	2001      	movne	r0, #1
 8009042:	b002      	add	sp, #8
 8009044:	4770      	bx	lr
 8009046:	4610      	mov	r0, r2
 8009048:	e7fb      	b.n	8009042 <__ascii_mbtowc+0x16>
 800904a:	f06f 0001 	mvn.w	r0, #1
 800904e:	e7f8      	b.n	8009042 <__ascii_mbtowc+0x16>

08009050 <memmove>:
 8009050:	4288      	cmp	r0, r1
 8009052:	b510      	push	{r4, lr}
 8009054:	eb01 0402 	add.w	r4, r1, r2
 8009058:	d902      	bls.n	8009060 <memmove+0x10>
 800905a:	4284      	cmp	r4, r0
 800905c:	4623      	mov	r3, r4
 800905e:	d807      	bhi.n	8009070 <memmove+0x20>
 8009060:	1e43      	subs	r3, r0, #1
 8009062:	42a1      	cmp	r1, r4
 8009064:	d008      	beq.n	8009078 <memmove+0x28>
 8009066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800906e:	e7f8      	b.n	8009062 <memmove+0x12>
 8009070:	4402      	add	r2, r0
 8009072:	4601      	mov	r1, r0
 8009074:	428a      	cmp	r2, r1
 8009076:	d100      	bne.n	800907a <memmove+0x2a>
 8009078:	bd10      	pop	{r4, pc}
 800907a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800907e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009082:	e7f7      	b.n	8009074 <memmove+0x24>

08009084 <__malloc_lock>:
 8009084:	4801      	ldr	r0, [pc, #4]	; (800908c <__malloc_lock+0x8>)
 8009086:	f000 bc1f 	b.w	80098c8 <__retarget_lock_acquire_recursive>
 800908a:	bf00      	nop
 800908c:	20000684 	.word	0x20000684

08009090 <__malloc_unlock>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__malloc_unlock+0x8>)
 8009092:	f000 bc1a 	b.w	80098ca <__retarget_lock_release_recursive>
 8009096:	bf00      	nop
 8009098:	20000684 	.word	0x20000684

0800909c <_realloc_r>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	4680      	mov	r8, r0
 80090a2:	4614      	mov	r4, r2
 80090a4:	460e      	mov	r6, r1
 80090a6:	b921      	cbnz	r1, 80090b2 <_realloc_r+0x16>
 80090a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ac:	4611      	mov	r1, r2
 80090ae:	f7ff bdad 	b.w	8008c0c <_malloc_r>
 80090b2:	b92a      	cbnz	r2, 80090c0 <_realloc_r+0x24>
 80090b4:	f7ff fd3e 	bl	8008b34 <_free_r>
 80090b8:	4625      	mov	r5, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c0:	f000 fc6a 	bl	8009998 <_malloc_usable_size_r>
 80090c4:	4284      	cmp	r4, r0
 80090c6:	4607      	mov	r7, r0
 80090c8:	d802      	bhi.n	80090d0 <_realloc_r+0x34>
 80090ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090ce:	d812      	bhi.n	80090f6 <_realloc_r+0x5a>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4640      	mov	r0, r8
 80090d4:	f7ff fd9a 	bl	8008c0c <_malloc_r>
 80090d8:	4605      	mov	r5, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0ed      	beq.n	80090ba <_realloc_r+0x1e>
 80090de:	42bc      	cmp	r4, r7
 80090e0:	4622      	mov	r2, r4
 80090e2:	4631      	mov	r1, r6
 80090e4:	bf28      	it	cs
 80090e6:	463a      	movcs	r2, r7
 80090e8:	f7ff f97c 	bl	80083e4 <memcpy>
 80090ec:	4631      	mov	r1, r6
 80090ee:	4640      	mov	r0, r8
 80090f0:	f7ff fd20 	bl	8008b34 <_free_r>
 80090f4:	e7e1      	b.n	80090ba <_realloc_r+0x1e>
 80090f6:	4635      	mov	r5, r6
 80090f8:	e7df      	b.n	80090ba <_realloc_r+0x1e>

080090fa <__sfputc_r>:
 80090fa:	6893      	ldr	r3, [r2, #8]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	b410      	push	{r4}
 8009102:	6093      	str	r3, [r2, #8]
 8009104:	da08      	bge.n	8009118 <__sfputc_r+0x1e>
 8009106:	6994      	ldr	r4, [r2, #24]
 8009108:	42a3      	cmp	r3, r4
 800910a:	db01      	blt.n	8009110 <__sfputc_r+0x16>
 800910c:	290a      	cmp	r1, #10
 800910e:	d103      	bne.n	8009118 <__sfputc_r+0x1e>
 8009110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009114:	f000 b94a 	b.w	80093ac <__swbuf_r>
 8009118:	6813      	ldr	r3, [r2, #0]
 800911a:	1c58      	adds	r0, r3, #1
 800911c:	6010      	str	r0, [r2, #0]
 800911e:	7019      	strb	r1, [r3, #0]
 8009120:	4608      	mov	r0, r1
 8009122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009126:	4770      	bx	lr

08009128 <__sfputs_r>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4606      	mov	r6, r0
 800912c:	460f      	mov	r7, r1
 800912e:	4614      	mov	r4, r2
 8009130:	18d5      	adds	r5, r2, r3
 8009132:	42ac      	cmp	r4, r5
 8009134:	d101      	bne.n	800913a <__sfputs_r+0x12>
 8009136:	2000      	movs	r0, #0
 8009138:	e007      	b.n	800914a <__sfputs_r+0x22>
 800913a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913e:	463a      	mov	r2, r7
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff ffda 	bl	80090fa <__sfputc_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d1f3      	bne.n	8009132 <__sfputs_r+0xa>
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800914c <_vfiprintf_r>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	460d      	mov	r5, r1
 8009152:	b09d      	sub	sp, #116	; 0x74
 8009154:	4614      	mov	r4, r2
 8009156:	4698      	mov	r8, r3
 8009158:	4606      	mov	r6, r0
 800915a:	b118      	cbz	r0, 8009164 <_vfiprintf_r+0x18>
 800915c:	6983      	ldr	r3, [r0, #24]
 800915e:	b90b      	cbnz	r3, 8009164 <_vfiprintf_r+0x18>
 8009160:	f000 fb14 	bl	800978c <__sinit>
 8009164:	4b89      	ldr	r3, [pc, #548]	; (800938c <_vfiprintf_r+0x240>)
 8009166:	429d      	cmp	r5, r3
 8009168:	d11b      	bne.n	80091a2 <_vfiprintf_r+0x56>
 800916a:	6875      	ldr	r5, [r6, #4]
 800916c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d405      	bmi.n	800917e <_vfiprintf_r+0x32>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d402      	bmi.n	800917e <_vfiprintf_r+0x32>
 8009178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917a:	f000 fba5 	bl	80098c8 <__retarget_lock_acquire_recursive>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	071b      	lsls	r3, r3, #28
 8009182:	d501      	bpl.n	8009188 <_vfiprintf_r+0x3c>
 8009184:	692b      	ldr	r3, [r5, #16]
 8009186:	b9eb      	cbnz	r3, 80091c4 <_vfiprintf_r+0x78>
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f000 f96e 	bl	800946c <__swsetup_r>
 8009190:	b1c0      	cbz	r0, 80091c4 <_vfiprintf_r+0x78>
 8009192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009194:	07dc      	lsls	r4, r3, #31
 8009196:	d50e      	bpl.n	80091b6 <_vfiprintf_r+0x6a>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b01d      	add	sp, #116	; 0x74
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	4b7b      	ldr	r3, [pc, #492]	; (8009390 <_vfiprintf_r+0x244>)
 80091a4:	429d      	cmp	r5, r3
 80091a6:	d101      	bne.n	80091ac <_vfiprintf_r+0x60>
 80091a8:	68b5      	ldr	r5, [r6, #8]
 80091aa:	e7df      	b.n	800916c <_vfiprintf_r+0x20>
 80091ac:	4b79      	ldr	r3, [pc, #484]	; (8009394 <_vfiprintf_r+0x248>)
 80091ae:	429d      	cmp	r5, r3
 80091b0:	bf08      	it	eq
 80091b2:	68f5      	ldreq	r5, [r6, #12]
 80091b4:	e7da      	b.n	800916c <_vfiprintf_r+0x20>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	0598      	lsls	r0, r3, #22
 80091ba:	d4ed      	bmi.n	8009198 <_vfiprintf_r+0x4c>
 80091bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091be:	f000 fb84 	bl	80098ca <__retarget_lock_release_recursive>
 80091c2:	e7e9      	b.n	8009198 <_vfiprintf_r+0x4c>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9309      	str	r3, [sp, #36]	; 0x24
 80091c8:	2320      	movs	r3, #32
 80091ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d2:	2330      	movs	r3, #48	; 0x30
 80091d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009398 <_vfiprintf_r+0x24c>
 80091d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	4623      	mov	r3, r4
 80091e2:	469a      	mov	sl, r3
 80091e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e8:	b10a      	cbz	r2, 80091ee <_vfiprintf_r+0xa2>
 80091ea:	2a25      	cmp	r2, #37	; 0x25
 80091ec:	d1f9      	bne.n	80091e2 <_vfiprintf_r+0x96>
 80091ee:	ebba 0b04 	subs.w	fp, sl, r4
 80091f2:	d00b      	beq.n	800920c <_vfiprintf_r+0xc0>
 80091f4:	465b      	mov	r3, fp
 80091f6:	4622      	mov	r2, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ff94 	bl	8009128 <__sfputs_r>
 8009200:	3001      	adds	r0, #1
 8009202:	f000 80aa 	beq.w	800935a <_vfiprintf_r+0x20e>
 8009206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009208:	445a      	add	r2, fp
 800920a:	9209      	str	r2, [sp, #36]	; 0x24
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 80a2 	beq.w	800935a <_vfiprintf_r+0x20e>
 8009216:	2300      	movs	r3, #0
 8009218:	f04f 32ff 	mov.w	r2, #4294967295
 800921c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009220:	f10a 0a01 	add.w	sl, sl, #1
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800922c:	931a      	str	r3, [sp, #104]	; 0x68
 800922e:	4654      	mov	r4, sl
 8009230:	2205      	movs	r2, #5
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4858      	ldr	r0, [pc, #352]	; (8009398 <_vfiprintf_r+0x24c>)
 8009238:	f7f6 ffd2 	bl	80001e0 <memchr>
 800923c:	9a04      	ldr	r2, [sp, #16]
 800923e:	b9d8      	cbnz	r0, 8009278 <_vfiprintf_r+0x12c>
 8009240:	06d1      	lsls	r1, r2, #27
 8009242:	bf44      	itt	mi
 8009244:	2320      	movmi	r3, #32
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800924a:	0713      	lsls	r3, r2, #28
 800924c:	bf44      	itt	mi
 800924e:	232b      	movmi	r3, #43	; 0x2b
 8009250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009254:	f89a 3000 	ldrb.w	r3, [sl]
 8009258:	2b2a      	cmp	r3, #42	; 0x2a
 800925a:	d015      	beq.n	8009288 <_vfiprintf_r+0x13c>
 800925c:	9a07      	ldr	r2, [sp, #28]
 800925e:	4654      	mov	r4, sl
 8009260:	2000      	movs	r0, #0
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4621      	mov	r1, r4
 8009268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926c:	3b30      	subs	r3, #48	; 0x30
 800926e:	2b09      	cmp	r3, #9
 8009270:	d94e      	bls.n	8009310 <_vfiprintf_r+0x1c4>
 8009272:	b1b0      	cbz	r0, 80092a2 <_vfiprintf_r+0x156>
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	e014      	b.n	80092a2 <_vfiprintf_r+0x156>
 8009278:	eba0 0308 	sub.w	r3, r0, r8
 800927c:	fa09 f303 	lsl.w	r3, r9, r3
 8009280:	4313      	orrs	r3, r2
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	46a2      	mov	sl, r4
 8009286:	e7d2      	b.n	800922e <_vfiprintf_r+0xe2>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	1d19      	adds	r1, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9103      	str	r1, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfbb      	ittet	lt
 8009294:	425b      	neglt	r3, r3
 8009296:	f042 0202 	orrlt.w	r2, r2, #2
 800929a:	9307      	strge	r3, [sp, #28]
 800929c:	9307      	strlt	r3, [sp, #28]
 800929e:	bfb8      	it	lt
 80092a0:	9204      	strlt	r2, [sp, #16]
 80092a2:	7823      	ldrb	r3, [r4, #0]
 80092a4:	2b2e      	cmp	r3, #46	; 0x2e
 80092a6:	d10c      	bne.n	80092c2 <_vfiprintf_r+0x176>
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	2b2a      	cmp	r3, #42	; 0x2a
 80092ac:	d135      	bne.n	800931a <_vfiprintf_r+0x1ce>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9203      	str	r2, [sp, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80092be:	3402      	adds	r4, #2
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093a8 <_vfiprintf_r+0x25c>
 80092c6:	7821      	ldrb	r1, [r4, #0]
 80092c8:	2203      	movs	r2, #3
 80092ca:	4650      	mov	r0, sl
 80092cc:	f7f6 ff88 	bl	80001e0 <memchr>
 80092d0:	b140      	cbz	r0, 80092e4 <_vfiprintf_r+0x198>
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	eba0 000a 	sub.w	r0, r0, sl
 80092d8:	fa03 f000 	lsl.w	r0, r3, r0
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	4303      	orrs	r3, r0
 80092e0:	3401      	adds	r4, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e8:	482c      	ldr	r0, [pc, #176]	; (800939c <_vfiprintf_r+0x250>)
 80092ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ee:	2206      	movs	r2, #6
 80092f0:	f7f6 ff76 	bl	80001e0 <memchr>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d03f      	beq.n	8009378 <_vfiprintf_r+0x22c>
 80092f8:	4b29      	ldr	r3, [pc, #164]	; (80093a0 <_vfiprintf_r+0x254>)
 80092fa:	bb1b      	cbnz	r3, 8009344 <_vfiprintf_r+0x1f8>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	3307      	adds	r3, #7
 8009300:	f023 0307 	bic.w	r3, r3, #7
 8009304:	3308      	adds	r3, #8
 8009306:	9303      	str	r3, [sp, #12]
 8009308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930a:	443b      	add	r3, r7
 800930c:	9309      	str	r3, [sp, #36]	; 0x24
 800930e:	e767      	b.n	80091e0 <_vfiprintf_r+0x94>
 8009310:	fb0c 3202 	mla	r2, ip, r2, r3
 8009314:	460c      	mov	r4, r1
 8009316:	2001      	movs	r0, #1
 8009318:	e7a5      	b.n	8009266 <_vfiprintf_r+0x11a>
 800931a:	2300      	movs	r3, #0
 800931c:	3401      	adds	r4, #1
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	4619      	mov	r1, r3
 8009322:	f04f 0c0a 	mov.w	ip, #10
 8009326:	4620      	mov	r0, r4
 8009328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800932c:	3a30      	subs	r2, #48	; 0x30
 800932e:	2a09      	cmp	r2, #9
 8009330:	d903      	bls.n	800933a <_vfiprintf_r+0x1ee>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0c5      	beq.n	80092c2 <_vfiprintf_r+0x176>
 8009336:	9105      	str	r1, [sp, #20]
 8009338:	e7c3      	b.n	80092c2 <_vfiprintf_r+0x176>
 800933a:	fb0c 2101 	mla	r1, ip, r1, r2
 800933e:	4604      	mov	r4, r0
 8009340:	2301      	movs	r3, #1
 8009342:	e7f0      	b.n	8009326 <_vfiprintf_r+0x1da>
 8009344:	ab03      	add	r3, sp, #12
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	462a      	mov	r2, r5
 800934a:	4b16      	ldr	r3, [pc, #88]	; (80093a4 <_vfiprintf_r+0x258>)
 800934c:	a904      	add	r1, sp, #16
 800934e:	4630      	mov	r0, r6
 8009350:	f7fd fdd6 	bl	8006f00 <_printf_float>
 8009354:	4607      	mov	r7, r0
 8009356:	1c78      	adds	r0, r7, #1
 8009358:	d1d6      	bne.n	8009308 <_vfiprintf_r+0x1bc>
 800935a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800935c:	07d9      	lsls	r1, r3, #31
 800935e:	d405      	bmi.n	800936c <_vfiprintf_r+0x220>
 8009360:	89ab      	ldrh	r3, [r5, #12]
 8009362:	059a      	lsls	r2, r3, #22
 8009364:	d402      	bmi.n	800936c <_vfiprintf_r+0x220>
 8009366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009368:	f000 faaf 	bl	80098ca <__retarget_lock_release_recursive>
 800936c:	89ab      	ldrh	r3, [r5, #12]
 800936e:	065b      	lsls	r3, r3, #25
 8009370:	f53f af12 	bmi.w	8009198 <_vfiprintf_r+0x4c>
 8009374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009376:	e711      	b.n	800919c <_vfiprintf_r+0x50>
 8009378:	ab03      	add	r3, sp, #12
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	462a      	mov	r2, r5
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <_vfiprintf_r+0x258>)
 8009380:	a904      	add	r1, sp, #16
 8009382:	4630      	mov	r0, r6
 8009384:	f7fe f860 	bl	8007448 <_printf_i>
 8009388:	e7e4      	b.n	8009354 <_vfiprintf_r+0x208>
 800938a:	bf00      	nop
 800938c:	0800a334 	.word	0x0800a334
 8009390:	0800a354 	.word	0x0800a354
 8009394:	0800a314 	.word	0x0800a314
 8009398:	0800a1bc 	.word	0x0800a1bc
 800939c:	0800a1c6 	.word	0x0800a1c6
 80093a0:	08006f01 	.word	0x08006f01
 80093a4:	08009129 	.word	0x08009129
 80093a8:	0800a1c2 	.word	0x0800a1c2

080093ac <__swbuf_r>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	460e      	mov	r6, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	4605      	mov	r5, r0
 80093b4:	b118      	cbz	r0, 80093be <__swbuf_r+0x12>
 80093b6:	6983      	ldr	r3, [r0, #24]
 80093b8:	b90b      	cbnz	r3, 80093be <__swbuf_r+0x12>
 80093ba:	f000 f9e7 	bl	800978c <__sinit>
 80093be:	4b21      	ldr	r3, [pc, #132]	; (8009444 <__swbuf_r+0x98>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	d12b      	bne.n	800941c <__swbuf_r+0x70>
 80093c4:	686c      	ldr	r4, [r5, #4]
 80093c6:	69a3      	ldr	r3, [r4, #24]
 80093c8:	60a3      	str	r3, [r4, #8]
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	071a      	lsls	r2, r3, #28
 80093ce:	d52f      	bpl.n	8009430 <__swbuf_r+0x84>
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	b36b      	cbz	r3, 8009430 <__swbuf_r+0x84>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	1ac0      	subs	r0, r0, r3
 80093da:	6963      	ldr	r3, [r4, #20]
 80093dc:	b2f6      	uxtb	r6, r6
 80093de:	4283      	cmp	r3, r0
 80093e0:	4637      	mov	r7, r6
 80093e2:	dc04      	bgt.n	80093ee <__swbuf_r+0x42>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f93c 	bl	8009664 <_fflush_r>
 80093ec:	bb30      	cbnz	r0, 800943c <__swbuf_r+0x90>
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	60a3      	str	r3, [r4, #8]
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	6022      	str	r2, [r4, #0]
 80093fa:	701e      	strb	r6, [r3, #0]
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	3001      	adds	r0, #1
 8009400:	4283      	cmp	r3, r0
 8009402:	d004      	beq.n	800940e <__swbuf_r+0x62>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	07db      	lsls	r3, r3, #31
 8009408:	d506      	bpl.n	8009418 <__swbuf_r+0x6c>
 800940a:	2e0a      	cmp	r6, #10
 800940c:	d104      	bne.n	8009418 <__swbuf_r+0x6c>
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f000 f927 	bl	8009664 <_fflush_r>
 8009416:	b988      	cbnz	r0, 800943c <__swbuf_r+0x90>
 8009418:	4638      	mov	r0, r7
 800941a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <__swbuf_r+0x9c>)
 800941e:	429c      	cmp	r4, r3
 8009420:	d101      	bne.n	8009426 <__swbuf_r+0x7a>
 8009422:	68ac      	ldr	r4, [r5, #8]
 8009424:	e7cf      	b.n	80093c6 <__swbuf_r+0x1a>
 8009426:	4b09      	ldr	r3, [pc, #36]	; (800944c <__swbuf_r+0xa0>)
 8009428:	429c      	cmp	r4, r3
 800942a:	bf08      	it	eq
 800942c:	68ec      	ldreq	r4, [r5, #12]
 800942e:	e7ca      	b.n	80093c6 <__swbuf_r+0x1a>
 8009430:	4621      	mov	r1, r4
 8009432:	4628      	mov	r0, r5
 8009434:	f000 f81a 	bl	800946c <__swsetup_r>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0cb      	beq.n	80093d4 <__swbuf_r+0x28>
 800943c:	f04f 37ff 	mov.w	r7, #4294967295
 8009440:	e7ea      	b.n	8009418 <__swbuf_r+0x6c>
 8009442:	bf00      	nop
 8009444:	0800a334 	.word	0x0800a334
 8009448:	0800a354 	.word	0x0800a354
 800944c:	0800a314 	.word	0x0800a314

08009450 <__ascii_wctomb>:
 8009450:	b149      	cbz	r1, 8009466 <__ascii_wctomb+0x16>
 8009452:	2aff      	cmp	r2, #255	; 0xff
 8009454:	bf85      	ittet	hi
 8009456:	238a      	movhi	r3, #138	; 0x8a
 8009458:	6003      	strhi	r3, [r0, #0]
 800945a:	700a      	strbls	r2, [r1, #0]
 800945c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009460:	bf98      	it	ls
 8009462:	2001      	movls	r0, #1
 8009464:	4770      	bx	lr
 8009466:	4608      	mov	r0, r1
 8009468:	4770      	bx	lr
	...

0800946c <__swsetup_r>:
 800946c:	4b32      	ldr	r3, [pc, #200]	; (8009538 <__swsetup_r+0xcc>)
 800946e:	b570      	push	{r4, r5, r6, lr}
 8009470:	681d      	ldr	r5, [r3, #0]
 8009472:	4606      	mov	r6, r0
 8009474:	460c      	mov	r4, r1
 8009476:	b125      	cbz	r5, 8009482 <__swsetup_r+0x16>
 8009478:	69ab      	ldr	r3, [r5, #24]
 800947a:	b913      	cbnz	r3, 8009482 <__swsetup_r+0x16>
 800947c:	4628      	mov	r0, r5
 800947e:	f000 f985 	bl	800978c <__sinit>
 8009482:	4b2e      	ldr	r3, [pc, #184]	; (800953c <__swsetup_r+0xd0>)
 8009484:	429c      	cmp	r4, r3
 8009486:	d10f      	bne.n	80094a8 <__swsetup_r+0x3c>
 8009488:	686c      	ldr	r4, [r5, #4]
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009490:	0719      	lsls	r1, r3, #28
 8009492:	d42c      	bmi.n	80094ee <__swsetup_r+0x82>
 8009494:	06dd      	lsls	r5, r3, #27
 8009496:	d411      	bmi.n	80094bc <__swsetup_r+0x50>
 8009498:	2309      	movs	r3, #9
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094a0:	81a3      	strh	r3, [r4, #12]
 80094a2:	f04f 30ff 	mov.w	r0, #4294967295
 80094a6:	e03e      	b.n	8009526 <__swsetup_r+0xba>
 80094a8:	4b25      	ldr	r3, [pc, #148]	; (8009540 <__swsetup_r+0xd4>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	d101      	bne.n	80094b2 <__swsetup_r+0x46>
 80094ae:	68ac      	ldr	r4, [r5, #8]
 80094b0:	e7eb      	b.n	800948a <__swsetup_r+0x1e>
 80094b2:	4b24      	ldr	r3, [pc, #144]	; (8009544 <__swsetup_r+0xd8>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	bf08      	it	eq
 80094b8:	68ec      	ldreq	r4, [r5, #12]
 80094ba:	e7e6      	b.n	800948a <__swsetup_r+0x1e>
 80094bc:	0758      	lsls	r0, r3, #29
 80094be:	d512      	bpl.n	80094e6 <__swsetup_r+0x7a>
 80094c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c2:	b141      	cbz	r1, 80094d6 <__swsetup_r+0x6a>
 80094c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c8:	4299      	cmp	r1, r3
 80094ca:	d002      	beq.n	80094d2 <__swsetup_r+0x66>
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff fb31 	bl	8008b34 <_free_r>
 80094d2:	2300      	movs	r3, #0
 80094d4:	6363      	str	r3, [r4, #52]	; 0x34
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	2300      	movs	r3, #0
 80094e0:	6063      	str	r3, [r4, #4]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f043 0308 	orr.w	r3, r3, #8
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	b94b      	cbnz	r3, 8009506 <__swsetup_r+0x9a>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fc:	d003      	beq.n	8009506 <__swsetup_r+0x9a>
 80094fe:	4621      	mov	r1, r4
 8009500:	4630      	mov	r0, r6
 8009502:	f000 fa09 	bl	8009918 <__smakebuf_r>
 8009506:	89a0      	ldrh	r0, [r4, #12]
 8009508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800950c:	f010 0301 	ands.w	r3, r0, #1
 8009510:	d00a      	beq.n	8009528 <__swsetup_r+0xbc>
 8009512:	2300      	movs	r3, #0
 8009514:	60a3      	str	r3, [r4, #8]
 8009516:	6963      	ldr	r3, [r4, #20]
 8009518:	425b      	negs	r3, r3
 800951a:	61a3      	str	r3, [r4, #24]
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	b943      	cbnz	r3, 8009532 <__swsetup_r+0xc6>
 8009520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009524:	d1ba      	bne.n	800949c <__swsetup_r+0x30>
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	0781      	lsls	r1, r0, #30
 800952a:	bf58      	it	pl
 800952c:	6963      	ldrpl	r3, [r4, #20]
 800952e:	60a3      	str	r3, [r4, #8]
 8009530:	e7f4      	b.n	800951c <__swsetup_r+0xb0>
 8009532:	2000      	movs	r0, #0
 8009534:	e7f7      	b.n	8009526 <__swsetup_r+0xba>
 8009536:	bf00      	nop
 8009538:	20000010 	.word	0x20000010
 800953c:	0800a334 	.word	0x0800a334
 8009540:	0800a354 	.word	0x0800a354
 8009544:	0800a314 	.word	0x0800a314

08009548 <abort>:
 8009548:	b508      	push	{r3, lr}
 800954a:	2006      	movs	r0, #6
 800954c:	f000 fa54 	bl	80099f8 <raise>
 8009550:	2001      	movs	r0, #1
 8009552:	f7f8 fe09 	bl	8002168 <_exit>
	...

08009558 <__sflush_r>:
 8009558:	898a      	ldrh	r2, [r1, #12]
 800955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	4605      	mov	r5, r0
 8009560:	0710      	lsls	r0, r2, #28
 8009562:	460c      	mov	r4, r1
 8009564:	d458      	bmi.n	8009618 <__sflush_r+0xc0>
 8009566:	684b      	ldr	r3, [r1, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc05      	bgt.n	8009578 <__sflush_r+0x20>
 800956c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	dc02      	bgt.n	8009578 <__sflush_r+0x20>
 8009572:	2000      	movs	r0, #0
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957a:	2e00      	cmp	r6, #0
 800957c:	d0f9      	beq.n	8009572 <__sflush_r+0x1a>
 800957e:	2300      	movs	r3, #0
 8009580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009584:	682f      	ldr	r7, [r5, #0]
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	d032      	beq.n	80095f0 <__sflush_r+0x98>
 800958a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	075a      	lsls	r2, r3, #29
 8009590:	d505      	bpl.n	800959e <__sflush_r+0x46>
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	1ac0      	subs	r0, r0, r3
 8009596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009598:	b10b      	cbz	r3, 800959e <__sflush_r+0x46>
 800959a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800959c:	1ac0      	subs	r0, r0, r3
 800959e:	2300      	movs	r3, #0
 80095a0:	4602      	mov	r2, r0
 80095a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a4:	6a21      	ldr	r1, [r4, #32]
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b0      	blx	r6
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	d106      	bne.n	80095be <__sflush_r+0x66>
 80095b0:	6829      	ldr	r1, [r5, #0]
 80095b2:	291d      	cmp	r1, #29
 80095b4:	d82c      	bhi.n	8009610 <__sflush_r+0xb8>
 80095b6:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <__sflush_r+0x108>)
 80095b8:	40ca      	lsrs	r2, r1
 80095ba:	07d6      	lsls	r6, r2, #31
 80095bc:	d528      	bpl.n	8009610 <__sflush_r+0xb8>
 80095be:	2200      	movs	r2, #0
 80095c0:	6062      	str	r2, [r4, #4]
 80095c2:	04d9      	lsls	r1, r3, #19
 80095c4:	6922      	ldr	r2, [r4, #16]
 80095c6:	6022      	str	r2, [r4, #0]
 80095c8:	d504      	bpl.n	80095d4 <__sflush_r+0x7c>
 80095ca:	1c42      	adds	r2, r0, #1
 80095cc:	d101      	bne.n	80095d2 <__sflush_r+0x7a>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b903      	cbnz	r3, 80095d4 <__sflush_r+0x7c>
 80095d2:	6560      	str	r0, [r4, #84]	; 0x54
 80095d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095d6:	602f      	str	r7, [r5, #0]
 80095d8:	2900      	cmp	r1, #0
 80095da:	d0ca      	beq.n	8009572 <__sflush_r+0x1a>
 80095dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <__sflush_r+0x92>
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7ff faa5 	bl	8008b34 <_free_r>
 80095ea:	2000      	movs	r0, #0
 80095ec:	6360      	str	r0, [r4, #52]	; 0x34
 80095ee:	e7c1      	b.n	8009574 <__sflush_r+0x1c>
 80095f0:	6a21      	ldr	r1, [r4, #32]
 80095f2:	2301      	movs	r3, #1
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b0      	blx	r6
 80095f8:	1c41      	adds	r1, r0, #1
 80095fa:	d1c7      	bne.n	800958c <__sflush_r+0x34>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0c4      	beq.n	800958c <__sflush_r+0x34>
 8009602:	2b1d      	cmp	r3, #29
 8009604:	d001      	beq.n	800960a <__sflush_r+0xb2>
 8009606:	2b16      	cmp	r3, #22
 8009608:	d101      	bne.n	800960e <__sflush_r+0xb6>
 800960a:	602f      	str	r7, [r5, #0]
 800960c:	e7b1      	b.n	8009572 <__sflush_r+0x1a>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	e7ad      	b.n	8009574 <__sflush_r+0x1c>
 8009618:	690f      	ldr	r7, [r1, #16]
 800961a:	2f00      	cmp	r7, #0
 800961c:	d0a9      	beq.n	8009572 <__sflush_r+0x1a>
 800961e:	0793      	lsls	r3, r2, #30
 8009620:	680e      	ldr	r6, [r1, #0]
 8009622:	bf08      	it	eq
 8009624:	694b      	ldreq	r3, [r1, #20]
 8009626:	600f      	str	r7, [r1, #0]
 8009628:	bf18      	it	ne
 800962a:	2300      	movne	r3, #0
 800962c:	eba6 0807 	sub.w	r8, r6, r7
 8009630:	608b      	str	r3, [r1, #8]
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	dd9c      	ble.n	8009572 <__sflush_r+0x1a>
 8009638:	6a21      	ldr	r1, [r4, #32]
 800963a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800963c:	4643      	mov	r3, r8
 800963e:	463a      	mov	r2, r7
 8009640:	4628      	mov	r0, r5
 8009642:	47b0      	blx	r6
 8009644:	2800      	cmp	r0, #0
 8009646:	dc06      	bgt.n	8009656 <__sflush_r+0xfe>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e78e      	b.n	8009574 <__sflush_r+0x1c>
 8009656:	4407      	add	r7, r0
 8009658:	eba8 0800 	sub.w	r8, r8, r0
 800965c:	e7e9      	b.n	8009632 <__sflush_r+0xda>
 800965e:	bf00      	nop
 8009660:	20400001 	.word	0x20400001

08009664 <_fflush_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	690b      	ldr	r3, [r1, #16]
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	b913      	cbnz	r3, 8009674 <_fflush_r+0x10>
 800966e:	2500      	movs	r5, #0
 8009670:	4628      	mov	r0, r5
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	b118      	cbz	r0, 800967e <_fflush_r+0x1a>
 8009676:	6983      	ldr	r3, [r0, #24]
 8009678:	b90b      	cbnz	r3, 800967e <_fflush_r+0x1a>
 800967a:	f000 f887 	bl	800978c <__sinit>
 800967e:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <_fflush_r+0x6c>)
 8009680:	429c      	cmp	r4, r3
 8009682:	d11b      	bne.n	80096bc <_fflush_r+0x58>
 8009684:	686c      	ldr	r4, [r5, #4]
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0ef      	beq.n	800966e <_fflush_r+0xa>
 800968e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009690:	07d0      	lsls	r0, r2, #31
 8009692:	d404      	bmi.n	800969e <_fflush_r+0x3a>
 8009694:	0599      	lsls	r1, r3, #22
 8009696:	d402      	bmi.n	800969e <_fflush_r+0x3a>
 8009698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969a:	f000 f915 	bl	80098c8 <__retarget_lock_acquire_recursive>
 800969e:	4628      	mov	r0, r5
 80096a0:	4621      	mov	r1, r4
 80096a2:	f7ff ff59 	bl	8009558 <__sflush_r>
 80096a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096a8:	07da      	lsls	r2, r3, #31
 80096aa:	4605      	mov	r5, r0
 80096ac:	d4e0      	bmi.n	8009670 <_fflush_r+0xc>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	059b      	lsls	r3, r3, #22
 80096b2:	d4dd      	bmi.n	8009670 <_fflush_r+0xc>
 80096b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096b6:	f000 f908 	bl	80098ca <__retarget_lock_release_recursive>
 80096ba:	e7d9      	b.n	8009670 <_fflush_r+0xc>
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <_fflush_r+0x70>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	d101      	bne.n	80096c6 <_fflush_r+0x62>
 80096c2:	68ac      	ldr	r4, [r5, #8]
 80096c4:	e7df      	b.n	8009686 <_fflush_r+0x22>
 80096c6:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <_fflush_r+0x74>)
 80096c8:	429c      	cmp	r4, r3
 80096ca:	bf08      	it	eq
 80096cc:	68ec      	ldreq	r4, [r5, #12]
 80096ce:	e7da      	b.n	8009686 <_fflush_r+0x22>
 80096d0:	0800a334 	.word	0x0800a334
 80096d4:	0800a354 	.word	0x0800a354
 80096d8:	0800a314 	.word	0x0800a314

080096dc <std>:
 80096dc:	2300      	movs	r3, #0
 80096de:	b510      	push	{r4, lr}
 80096e0:	4604      	mov	r4, r0
 80096e2:	e9c0 3300 	strd	r3, r3, [r0]
 80096e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ea:	6083      	str	r3, [r0, #8]
 80096ec:	8181      	strh	r1, [r0, #12]
 80096ee:	6643      	str	r3, [r0, #100]	; 0x64
 80096f0:	81c2      	strh	r2, [r0, #14]
 80096f2:	6183      	str	r3, [r0, #24]
 80096f4:	4619      	mov	r1, r3
 80096f6:	2208      	movs	r2, #8
 80096f8:	305c      	adds	r0, #92	; 0x5c
 80096fa:	f7fd fb59 	bl	8006db0 <memset>
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <std+0x38>)
 8009700:	6263      	str	r3, [r4, #36]	; 0x24
 8009702:	4b05      	ldr	r3, [pc, #20]	; (8009718 <std+0x3c>)
 8009704:	62a3      	str	r3, [r4, #40]	; 0x28
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <std+0x40>)
 8009708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800970a:	4b05      	ldr	r3, [pc, #20]	; (8009720 <std+0x44>)
 800970c:	6224      	str	r4, [r4, #32]
 800970e:	6323      	str	r3, [r4, #48]	; 0x30
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	08009a31 	.word	0x08009a31
 8009718:	08009a53 	.word	0x08009a53
 800971c:	08009a8b 	.word	0x08009a8b
 8009720:	08009aaf 	.word	0x08009aaf

08009724 <_cleanup_r>:
 8009724:	4901      	ldr	r1, [pc, #4]	; (800972c <_cleanup_r+0x8>)
 8009726:	f000 b8af 	b.w	8009888 <_fwalk_reent>
 800972a:	bf00      	nop
 800972c:	08009665 	.word	0x08009665

08009730 <__sfmoreglue>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	2268      	movs	r2, #104	; 0x68
 8009734:	1e4d      	subs	r5, r1, #1
 8009736:	4355      	muls	r5, r2
 8009738:	460e      	mov	r6, r1
 800973a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800973e:	f7ff fa65 	bl	8008c0c <_malloc_r>
 8009742:	4604      	mov	r4, r0
 8009744:	b140      	cbz	r0, 8009758 <__sfmoreglue+0x28>
 8009746:	2100      	movs	r1, #0
 8009748:	e9c0 1600 	strd	r1, r6, [r0]
 800974c:	300c      	adds	r0, #12
 800974e:	60a0      	str	r0, [r4, #8]
 8009750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009754:	f7fd fb2c 	bl	8006db0 <memset>
 8009758:	4620      	mov	r0, r4
 800975a:	bd70      	pop	{r4, r5, r6, pc}

0800975c <__sfp_lock_acquire>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__sfp_lock_acquire+0x8>)
 800975e:	f000 b8b3 	b.w	80098c8 <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	20000685 	.word	0x20000685

08009768 <__sfp_lock_release>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__sfp_lock_release+0x8>)
 800976a:	f000 b8ae 	b.w	80098ca <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	20000685 	.word	0x20000685

08009774 <__sinit_lock_acquire>:
 8009774:	4801      	ldr	r0, [pc, #4]	; (800977c <__sinit_lock_acquire+0x8>)
 8009776:	f000 b8a7 	b.w	80098c8 <__retarget_lock_acquire_recursive>
 800977a:	bf00      	nop
 800977c:	20000686 	.word	0x20000686

08009780 <__sinit_lock_release>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__sinit_lock_release+0x8>)
 8009782:	f000 b8a2 	b.w	80098ca <__retarget_lock_release_recursive>
 8009786:	bf00      	nop
 8009788:	20000686 	.word	0x20000686

0800978c <__sinit>:
 800978c:	b510      	push	{r4, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	f7ff fff0 	bl	8009774 <__sinit_lock_acquire>
 8009794:	69a3      	ldr	r3, [r4, #24]
 8009796:	b11b      	cbz	r3, 80097a0 <__sinit+0x14>
 8009798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979c:	f7ff bff0 	b.w	8009780 <__sinit_lock_release>
 80097a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097a4:	6523      	str	r3, [r4, #80]	; 0x50
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <__sinit+0x68>)
 80097a8:	4a13      	ldr	r2, [pc, #76]	; (80097f8 <__sinit+0x6c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	bf04      	itt	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	61a3      	streq	r3, [r4, #24]
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f820 	bl	80097fc <__sfp>
 80097bc:	6060      	str	r0, [r4, #4]
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 f81c 	bl	80097fc <__sfp>
 80097c4:	60a0      	str	r0, [r4, #8]
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 f818 	bl	80097fc <__sfp>
 80097cc:	2200      	movs	r2, #0
 80097ce:	60e0      	str	r0, [r4, #12]
 80097d0:	2104      	movs	r1, #4
 80097d2:	6860      	ldr	r0, [r4, #4]
 80097d4:	f7ff ff82 	bl	80096dc <std>
 80097d8:	68a0      	ldr	r0, [r4, #8]
 80097da:	2201      	movs	r2, #1
 80097dc:	2109      	movs	r1, #9
 80097de:	f7ff ff7d 	bl	80096dc <std>
 80097e2:	68e0      	ldr	r0, [r4, #12]
 80097e4:	2202      	movs	r2, #2
 80097e6:	2112      	movs	r1, #18
 80097e8:	f7ff ff78 	bl	80096dc <std>
 80097ec:	2301      	movs	r3, #1
 80097ee:	61a3      	str	r3, [r4, #24]
 80097f0:	e7d2      	b.n	8009798 <__sinit+0xc>
 80097f2:	bf00      	nop
 80097f4:	08009f98 	.word	0x08009f98
 80097f8:	08009725 	.word	0x08009725

080097fc <__sfp>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	4607      	mov	r7, r0
 8009800:	f7ff ffac 	bl	800975c <__sfp_lock_acquire>
 8009804:	4b1e      	ldr	r3, [pc, #120]	; (8009880 <__sfp+0x84>)
 8009806:	681e      	ldr	r6, [r3, #0]
 8009808:	69b3      	ldr	r3, [r6, #24]
 800980a:	b913      	cbnz	r3, 8009812 <__sfp+0x16>
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ffbd 	bl	800978c <__sinit>
 8009812:	3648      	adds	r6, #72	; 0x48
 8009814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	d503      	bpl.n	8009824 <__sfp+0x28>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	b30b      	cbz	r3, 8009864 <__sfp+0x68>
 8009820:	6836      	ldr	r6, [r6, #0]
 8009822:	e7f7      	b.n	8009814 <__sfp+0x18>
 8009824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009828:	b9d5      	cbnz	r5, 8009860 <__sfp+0x64>
 800982a:	4b16      	ldr	r3, [pc, #88]	; (8009884 <__sfp+0x88>)
 800982c:	60e3      	str	r3, [r4, #12]
 800982e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009832:	6665      	str	r5, [r4, #100]	; 0x64
 8009834:	f000 f847 	bl	80098c6 <__retarget_lock_init_recursive>
 8009838:	f7ff ff96 	bl	8009768 <__sfp_lock_release>
 800983c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009844:	6025      	str	r5, [r4, #0]
 8009846:	61a5      	str	r5, [r4, #24]
 8009848:	2208      	movs	r2, #8
 800984a:	4629      	mov	r1, r5
 800984c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009850:	f7fd faae 	bl	8006db0 <memset>
 8009854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800985c:	4620      	mov	r0, r4
 800985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009860:	3468      	adds	r4, #104	; 0x68
 8009862:	e7d9      	b.n	8009818 <__sfp+0x1c>
 8009864:	2104      	movs	r1, #4
 8009866:	4638      	mov	r0, r7
 8009868:	f7ff ff62 	bl	8009730 <__sfmoreglue>
 800986c:	4604      	mov	r4, r0
 800986e:	6030      	str	r0, [r6, #0]
 8009870:	2800      	cmp	r0, #0
 8009872:	d1d5      	bne.n	8009820 <__sfp+0x24>
 8009874:	f7ff ff78 	bl	8009768 <__sfp_lock_release>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	e7ee      	b.n	800985c <__sfp+0x60>
 800987e:	bf00      	nop
 8009880:	08009f98 	.word	0x08009f98
 8009884:	ffff0001 	.word	0xffff0001

08009888 <_fwalk_reent>:
 8009888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800988c:	4606      	mov	r6, r0
 800988e:	4688      	mov	r8, r1
 8009890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009894:	2700      	movs	r7, #0
 8009896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800989a:	f1b9 0901 	subs.w	r9, r9, #1
 800989e:	d505      	bpl.n	80098ac <_fwalk_reent+0x24>
 80098a0:	6824      	ldr	r4, [r4, #0]
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d1f7      	bne.n	8009896 <_fwalk_reent+0xe>
 80098a6:	4638      	mov	r0, r7
 80098a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ac:	89ab      	ldrh	r3, [r5, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d907      	bls.n	80098c2 <_fwalk_reent+0x3a>
 80098b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098b6:	3301      	adds	r3, #1
 80098b8:	d003      	beq.n	80098c2 <_fwalk_reent+0x3a>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	47c0      	blx	r8
 80098c0:	4307      	orrs	r7, r0
 80098c2:	3568      	adds	r5, #104	; 0x68
 80098c4:	e7e9      	b.n	800989a <_fwalk_reent+0x12>

080098c6 <__retarget_lock_init_recursive>:
 80098c6:	4770      	bx	lr

080098c8 <__retarget_lock_acquire_recursive>:
 80098c8:	4770      	bx	lr

080098ca <__retarget_lock_release_recursive>:
 80098ca:	4770      	bx	lr

080098cc <__swhatbuf_r>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	460e      	mov	r6, r1
 80098d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d4:	2900      	cmp	r1, #0
 80098d6:	b096      	sub	sp, #88	; 0x58
 80098d8:	4614      	mov	r4, r2
 80098da:	461d      	mov	r5, r3
 80098dc:	da08      	bge.n	80098f0 <__swhatbuf_r+0x24>
 80098de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	061a      	lsls	r2, r3, #24
 80098e8:	d410      	bmi.n	800990c <__swhatbuf_r+0x40>
 80098ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ee:	e00e      	b.n	800990e <__swhatbuf_r+0x42>
 80098f0:	466a      	mov	r2, sp
 80098f2:	f000 f903 	bl	8009afc <_fstat_r>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	dbf1      	blt.n	80098de <__swhatbuf_r+0x12>
 80098fa:	9a01      	ldr	r2, [sp, #4]
 80098fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009904:	425a      	negs	r2, r3
 8009906:	415a      	adcs	r2, r3
 8009908:	602a      	str	r2, [r5, #0]
 800990a:	e7ee      	b.n	80098ea <__swhatbuf_r+0x1e>
 800990c:	2340      	movs	r3, #64	; 0x40
 800990e:	2000      	movs	r0, #0
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	b016      	add	sp, #88	; 0x58
 8009914:	bd70      	pop	{r4, r5, r6, pc}
	...

08009918 <__smakebuf_r>:
 8009918:	898b      	ldrh	r3, [r1, #12]
 800991a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800991c:	079d      	lsls	r5, r3, #30
 800991e:	4606      	mov	r6, r0
 8009920:	460c      	mov	r4, r1
 8009922:	d507      	bpl.n	8009934 <__smakebuf_r+0x1c>
 8009924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	2301      	movs	r3, #1
 800992e:	6163      	str	r3, [r4, #20]
 8009930:	b002      	add	sp, #8
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	ab01      	add	r3, sp, #4
 8009936:	466a      	mov	r2, sp
 8009938:	f7ff ffc8 	bl	80098cc <__swhatbuf_r>
 800993c:	9900      	ldr	r1, [sp, #0]
 800993e:	4605      	mov	r5, r0
 8009940:	4630      	mov	r0, r6
 8009942:	f7ff f963 	bl	8008c0c <_malloc_r>
 8009946:	b948      	cbnz	r0, 800995c <__smakebuf_r+0x44>
 8009948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994c:	059a      	lsls	r2, r3, #22
 800994e:	d4ef      	bmi.n	8009930 <__smakebuf_r+0x18>
 8009950:	f023 0303 	bic.w	r3, r3, #3
 8009954:	f043 0302 	orr.w	r3, r3, #2
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	e7e3      	b.n	8009924 <__smakebuf_r+0xc>
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <__smakebuf_r+0x7c>)
 800995e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	6020      	str	r0, [r4, #0]
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	6163      	str	r3, [r4, #20]
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	6120      	str	r0, [r4, #16]
 8009972:	b15b      	cbz	r3, 800998c <__smakebuf_r+0x74>
 8009974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009978:	4630      	mov	r0, r6
 800997a:	f000 f8d1 	bl	8009b20 <_isatty_r>
 800997e:	b128      	cbz	r0, 800998c <__smakebuf_r+0x74>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	89a0      	ldrh	r0, [r4, #12]
 800998e:	4305      	orrs	r5, r0
 8009990:	81a5      	strh	r5, [r4, #12]
 8009992:	e7cd      	b.n	8009930 <__smakebuf_r+0x18>
 8009994:	08009725 	.word	0x08009725

08009998 <_malloc_usable_size_r>:
 8009998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999c:	1f18      	subs	r0, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bfbc      	itt	lt
 80099a2:	580b      	ldrlt	r3, [r1, r0]
 80099a4:	18c0      	addlt	r0, r0, r3
 80099a6:	4770      	bx	lr

080099a8 <_raise_r>:
 80099a8:	291f      	cmp	r1, #31
 80099aa:	b538      	push	{r3, r4, r5, lr}
 80099ac:	4604      	mov	r4, r0
 80099ae:	460d      	mov	r5, r1
 80099b0:	d904      	bls.n	80099bc <_raise_r+0x14>
 80099b2:	2316      	movs	r3, #22
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099be:	b112      	cbz	r2, 80099c6 <_raise_r+0x1e>
 80099c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099c4:	b94b      	cbnz	r3, 80099da <_raise_r+0x32>
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 f830 	bl	8009a2c <_getpid_r>
 80099cc:	462a      	mov	r2, r5
 80099ce:	4601      	mov	r1, r0
 80099d0:	4620      	mov	r0, r4
 80099d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d6:	f000 b817 	b.w	8009a08 <_kill_r>
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d00a      	beq.n	80099f4 <_raise_r+0x4c>
 80099de:	1c59      	adds	r1, r3, #1
 80099e0:	d103      	bne.n	80099ea <_raise_r+0x42>
 80099e2:	2316      	movs	r3, #22
 80099e4:	6003      	str	r3, [r0, #0]
 80099e6:	2001      	movs	r0, #1
 80099e8:	e7e7      	b.n	80099ba <_raise_r+0x12>
 80099ea:	2400      	movs	r4, #0
 80099ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099f0:	4628      	mov	r0, r5
 80099f2:	4798      	blx	r3
 80099f4:	2000      	movs	r0, #0
 80099f6:	e7e0      	b.n	80099ba <_raise_r+0x12>

080099f8 <raise>:
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <raise+0xc>)
 80099fa:	4601      	mov	r1, r0
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	f7ff bfd3 	b.w	80099a8 <_raise_r>
 8009a02:	bf00      	nop
 8009a04:	20000010 	.word	0x20000010

08009a08 <_kill_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_kill_r+0x20>)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	f7f8 fb97 	bl	8002148 <_kill>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d102      	bne.n	8009a24 <_kill_r+0x1c>
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	b103      	cbz	r3, 8009a24 <_kill_r+0x1c>
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	20000680 	.word	0x20000680

08009a2c <_getpid_r>:
 8009a2c:	f7f8 bb84 	b.w	8002138 <_getpid>

08009a30 <__sread>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a38:	f000 f894 	bl	8009b64 <_read_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	bfab      	itete	ge
 8009a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a42:	89a3      	ldrhlt	r3, [r4, #12]
 8009a44:	181b      	addge	r3, r3, r0
 8009a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4a:	bfac      	ite	ge
 8009a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a4e:	81a3      	strhlt	r3, [r4, #12]
 8009a50:	bd10      	pop	{r4, pc}

08009a52 <__swrite>:
 8009a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	461f      	mov	r7, r3
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	05db      	lsls	r3, r3, #23
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4616      	mov	r6, r2
 8009a62:	d505      	bpl.n	8009a70 <__swrite+0x1e>
 8009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a68:	2302      	movs	r3, #2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f000 f868 	bl	8009b40 <_lseek_r>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	463b      	mov	r3, r7
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	f000 b817 	b.w	8009ab8 <_write_r>

08009a8a <__sseek>:
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a92:	f000 f855 	bl	8009b40 <_lseek_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	bf15      	itete	ne
 8009a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aa6:	81a3      	strheq	r3, [r4, #12]
 8009aa8:	bf18      	it	ne
 8009aaa:	81a3      	strhne	r3, [r4, #12]
 8009aac:	bd10      	pop	{r4, pc}

08009aae <__sclose>:
 8009aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab2:	f000 b813 	b.w	8009adc <_close_r>
	...

08009ab8 <_write_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	; (8009ad8 <_write_r+0x20>)
 8009abc:	4604      	mov	r4, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f8 fb75 	bl	80021b6 <_write>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_write_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_write_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20000680 	.word	0x20000680

08009adc <_close_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d06      	ldr	r5, [pc, #24]	; (8009af8 <_close_r+0x1c>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	602b      	str	r3, [r5, #0]
 8009ae8:	f7f8 fb81 	bl	80021ee <_close>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_close_r+0x1a>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_close_r+0x1a>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20000680 	.word	0x20000680

08009afc <_fstat_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_fstat_r+0x20>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	4611      	mov	r1, r2
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	f7f8 fb7c 	bl	8002206 <_fstat>
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	d102      	bne.n	8009b18 <_fstat_r+0x1c>
 8009b12:	682b      	ldr	r3, [r5, #0]
 8009b14:	b103      	cbz	r3, 8009b18 <_fstat_r+0x1c>
 8009b16:	6023      	str	r3, [r4, #0]
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000680 	.word	0x20000680

08009b20 <_isatty_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	; (8009b3c <_isatty_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f8 fb7b 	bl	8002226 <_isatty>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_isatty_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_isatty_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000680 	.word	0x20000680

08009b40 <_lseek_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_lseek_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 fb74 	bl	800223c <_lseek>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_lseek_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_lseek_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20000680 	.word	0x20000680

08009b64 <_read_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	; (8009b84 <_read_r+0x20>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7f8 fb02 	bl	800217c <_read>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_read_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_read_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20000680 	.word	0x20000680

08009b88 <atan>:
 8009b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	ec55 4b10 	vmov	r4, r5, d0
 8009b90:	4bc3      	ldr	r3, [pc, #780]	; (8009ea0 <atan+0x318>)
 8009b92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b96:	429e      	cmp	r6, r3
 8009b98:	46ab      	mov	fp, r5
 8009b9a:	dd18      	ble.n	8009bce <atan+0x46>
 8009b9c:	4bc1      	ldr	r3, [pc, #772]	; (8009ea4 <atan+0x31c>)
 8009b9e:	429e      	cmp	r6, r3
 8009ba0:	dc01      	bgt.n	8009ba6 <atan+0x1e>
 8009ba2:	d109      	bne.n	8009bb8 <atan+0x30>
 8009ba4:	b144      	cbz	r4, 8009bb8 <atan+0x30>
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	462b      	mov	r3, r5
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 fb6d 	bl	800028c <__adddf3>
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	e006      	b.n	8009bc6 <atan+0x3e>
 8009bb8:	f1bb 0f00 	cmp.w	fp, #0
 8009bbc:	f300 8131 	bgt.w	8009e22 <atan+0x29a>
 8009bc0:	a59b      	add	r5, pc, #620	; (adr r5, 8009e30 <atan+0x2a8>)
 8009bc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bc6:	ec45 4b10 	vmov	d0, r4, r5
 8009bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	4bb6      	ldr	r3, [pc, #728]	; (8009ea8 <atan+0x320>)
 8009bd0:	429e      	cmp	r6, r3
 8009bd2:	dc14      	bgt.n	8009bfe <atan+0x76>
 8009bd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009bd8:	429e      	cmp	r6, r3
 8009bda:	dc0d      	bgt.n	8009bf8 <atan+0x70>
 8009bdc:	a396      	add	r3, pc, #600	; (adr r3, 8009e38 <atan+0x2b0>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	ee10 0a10 	vmov	r0, s0
 8009be6:	4629      	mov	r1, r5
 8009be8:	f7f6 fb50 	bl	800028c <__adddf3>
 8009bec:	4baf      	ldr	r3, [pc, #700]	; (8009eac <atan+0x324>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f7f6 ff92 	bl	8000b18 <__aeabi_dcmpgt>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <atan+0x3e>
 8009bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bfc:	e02b      	b.n	8009c56 <atan+0xce>
 8009bfe:	f000 f963 	bl	8009ec8 <fabs>
 8009c02:	4bab      	ldr	r3, [pc, #684]	; (8009eb0 <atan+0x328>)
 8009c04:	429e      	cmp	r6, r3
 8009c06:	ec55 4b10 	vmov	r4, r5, d0
 8009c0a:	f300 80bf 	bgt.w	8009d8c <atan+0x204>
 8009c0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c12:	429e      	cmp	r6, r3
 8009c14:	f300 80a0 	bgt.w	8009d58 <atan+0x1d0>
 8009c18:	ee10 2a10 	vmov	r2, s0
 8009c1c:	ee10 0a10 	vmov	r0, s0
 8009c20:	462b      	mov	r3, r5
 8009c22:	4629      	mov	r1, r5
 8009c24:	f7f6 fb32 	bl	800028c <__adddf3>
 8009c28:	4ba0      	ldr	r3, [pc, #640]	; (8009eac <atan+0x324>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	2200      	movs	r2, #0
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f7f6 fb25 	bl	800028c <__adddf3>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 fdff 	bl	800084c <__aeabi_ddiv>
 8009c4e:	f04f 0a00 	mov.w	sl, #0
 8009c52:	4604      	mov	r4, r0
 8009c54:	460d      	mov	r5, r1
 8009c56:	4622      	mov	r2, r4
 8009c58:	462b      	mov	r3, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fccb 	bl	80005f8 <__aeabi_dmul>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4680      	mov	r8, r0
 8009c68:	4689      	mov	r9, r1
 8009c6a:	f7f6 fcc5 	bl	80005f8 <__aeabi_dmul>
 8009c6e:	a374      	add	r3, pc, #464	; (adr r3, 8009e40 <atan+0x2b8>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	a372      	add	r3, pc, #456	; (adr r3, 8009e48 <atan+0x2c0>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fb03 	bl	800028c <__adddf3>
 8009c86:	4632      	mov	r2, r6
 8009c88:	463b      	mov	r3, r7
 8009c8a:	f7f6 fcb5 	bl	80005f8 <__aeabi_dmul>
 8009c8e:	a370      	add	r3, pc, #448	; (adr r3, 8009e50 <atan+0x2c8>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 fafa 	bl	800028c <__adddf3>
 8009c98:	4632      	mov	r2, r6
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	a36d      	add	r3, pc, #436	; (adr r3, 8009e58 <atan+0x2d0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 faf1 	bl	800028c <__adddf3>
 8009caa:	4632      	mov	r2, r6
 8009cac:	463b      	mov	r3, r7
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	a36b      	add	r3, pc, #428	; (adr r3, 8009e60 <atan+0x2d8>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fae8 	bl	800028c <__adddf3>
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	a368      	add	r3, pc, #416	; (adr r3, 8009e68 <atan+0x2e0>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fadf 	bl	800028c <__adddf3>
 8009cce:	4642      	mov	r2, r8
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	a366      	add	r3, pc, #408	; (adr r3, 8009e70 <atan+0x2e8>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	4680      	mov	r8, r0
 8009cde:	4689      	mov	r9, r1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fc88 	bl	80005f8 <__aeabi_dmul>
 8009ce8:	a363      	add	r3, pc, #396	; (adr r3, 8009e78 <atan+0x2f0>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 facb 	bl	8000288 <__aeabi_dsub>
 8009cf2:	4632      	mov	r2, r6
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	f7f6 fc7f 	bl	80005f8 <__aeabi_dmul>
 8009cfa:	a361      	add	r3, pc, #388	; (adr r3, 8009e80 <atan+0x2f8>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fac2 	bl	8000288 <__aeabi_dsub>
 8009d04:	4632      	mov	r2, r6
 8009d06:	463b      	mov	r3, r7
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	a35e      	add	r3, pc, #376	; (adr r3, 8009e88 <atan+0x300>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fab9 	bl	8000288 <__aeabi_dsub>
 8009d16:	4632      	mov	r2, r6
 8009d18:	463b      	mov	r3, r7
 8009d1a:	f7f6 fc6d 	bl	80005f8 <__aeabi_dmul>
 8009d1e:	a35c      	add	r3, pc, #368	; (adr r3, 8009e90 <atan+0x308>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fab0 	bl	8000288 <__aeabi_dsub>
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	f7f6 fc64 	bl	80005f8 <__aeabi_dmul>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 faa8 	bl	800028c <__adddf3>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	d14b      	bne.n	8009de6 <atan+0x25e>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fa99 	bl	8000288 <__aeabi_dsub>
 8009d56:	e72c      	b.n	8009bb2 <atan+0x2a>
 8009d58:	ee10 0a10 	vmov	r0, s0
 8009d5c:	4b53      	ldr	r3, [pc, #332]	; (8009eac <atan+0x324>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	4b51      	ldr	r3, [pc, #324]	; (8009eac <atan+0x324>)
 8009d68:	4606      	mov	r6, r0
 8009d6a:	460f      	mov	r7, r1
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 fa8b 	bl	800028c <__adddf3>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f7f6 fd65 	bl	800084c <__aeabi_ddiv>
 8009d82:	f04f 0a01 	mov.w	sl, #1
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	e764      	b.n	8009c56 <atan+0xce>
 8009d8c:	4b49      	ldr	r3, [pc, #292]	; (8009eb4 <atan+0x32c>)
 8009d8e:	429e      	cmp	r6, r3
 8009d90:	da1d      	bge.n	8009dce <atan+0x246>
 8009d92:	ee10 0a10 	vmov	r0, s0
 8009d96:	4b48      	ldr	r3, [pc, #288]	; (8009eb8 <atan+0x330>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fa74 	bl	8000288 <__aeabi_dsub>
 8009da0:	4b45      	ldr	r3, [pc, #276]	; (8009eb8 <atan+0x330>)
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	2200      	movs	r2, #0
 8009da8:	4620      	mov	r0, r4
 8009daa:	4629      	mov	r1, r5
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	4b3e      	ldr	r3, [pc, #248]	; (8009eac <atan+0x324>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	f7f6 fa6a 	bl	800028c <__adddf3>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fd44 	bl	800084c <__aeabi_ddiv>
 8009dc4:	f04f 0a02 	mov.w	sl, #2
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	e743      	b.n	8009c56 <atan+0xce>
 8009dce:	462b      	mov	r3, r5
 8009dd0:	ee10 2a10 	vmov	r2, s0
 8009dd4:	4939      	ldr	r1, [pc, #228]	; (8009ebc <atan+0x334>)
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f7f6 fd38 	bl	800084c <__aeabi_ddiv>
 8009ddc:	f04f 0a03 	mov.w	sl, #3
 8009de0:	4604      	mov	r4, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	e737      	b.n	8009c56 <atan+0xce>
 8009de6:	4b36      	ldr	r3, [pc, #216]	; (8009ec0 <atan+0x338>)
 8009de8:	4e36      	ldr	r6, [pc, #216]	; (8009ec4 <atan+0x33c>)
 8009dea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009dee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009df2:	e9da 2300 	ldrd	r2, r3, [sl]
 8009df6:	f7f6 fa47 	bl	8000288 <__aeabi_dsub>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	f7f6 fa43 	bl	8000288 <__aeabi_dsub>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e0a:	f7f6 fa3d 	bl	8000288 <__aeabi_dsub>
 8009e0e:	f1bb 0f00 	cmp.w	fp, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	460d      	mov	r5, r1
 8009e16:	f6bf aed6 	bge.w	8009bc6 <atan+0x3e>
 8009e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e1e:	461d      	mov	r5, r3
 8009e20:	e6d1      	b.n	8009bc6 <atan+0x3e>
 8009e22:	a51d      	add	r5, pc, #116	; (adr r5, 8009e98 <atan+0x310>)
 8009e24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e28:	e6cd      	b.n	8009bc6 <atan+0x3e>
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w
 8009e30:	54442d18 	.word	0x54442d18
 8009e34:	bff921fb 	.word	0xbff921fb
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	7e37e43c 	.word	0x7e37e43c
 8009e40:	e322da11 	.word	0xe322da11
 8009e44:	3f90ad3a 	.word	0x3f90ad3a
 8009e48:	24760deb 	.word	0x24760deb
 8009e4c:	3fa97b4b 	.word	0x3fa97b4b
 8009e50:	a0d03d51 	.word	0xa0d03d51
 8009e54:	3fb10d66 	.word	0x3fb10d66
 8009e58:	c54c206e 	.word	0xc54c206e
 8009e5c:	3fb745cd 	.word	0x3fb745cd
 8009e60:	920083ff 	.word	0x920083ff
 8009e64:	3fc24924 	.word	0x3fc24924
 8009e68:	5555550d 	.word	0x5555550d
 8009e6c:	3fd55555 	.word	0x3fd55555
 8009e70:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e74:	bfa2b444 	.word	0xbfa2b444
 8009e78:	52defd9a 	.word	0x52defd9a
 8009e7c:	3fadde2d 	.word	0x3fadde2d
 8009e80:	af749a6d 	.word	0xaf749a6d
 8009e84:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e88:	fe231671 	.word	0xfe231671
 8009e8c:	3fbc71c6 	.word	0x3fbc71c6
 8009e90:	9998ebc4 	.word	0x9998ebc4
 8009e94:	3fc99999 	.word	0x3fc99999
 8009e98:	54442d18 	.word	0x54442d18
 8009e9c:	3ff921fb 	.word	0x3ff921fb
 8009ea0:	440fffff 	.word	0x440fffff
 8009ea4:	7ff00000 	.word	0x7ff00000
 8009ea8:	3fdbffff 	.word	0x3fdbffff
 8009eac:	3ff00000 	.word	0x3ff00000
 8009eb0:	3ff2ffff 	.word	0x3ff2ffff
 8009eb4:	40038000 	.word	0x40038000
 8009eb8:	3ff80000 	.word	0x3ff80000
 8009ebc:	bff00000 	.word	0xbff00000
 8009ec0:	0800a398 	.word	0x0800a398
 8009ec4:	0800a378 	.word	0x0800a378

08009ec8 <fabs>:
 8009ec8:	ec51 0b10 	vmov	r0, r1, d0
 8009ecc:	ee10 2a10 	vmov	r2, s0
 8009ed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ed4:	ec43 2b10 	vmov	d0, r2, r3
 8009ed8:	4770      	bx	lr
	...

08009edc <_init>:
 8009edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ede:	bf00      	nop
 8009ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee2:	bc08      	pop	{r3}
 8009ee4:	469e      	mov	lr, r3
 8009ee6:	4770      	bx	lr

08009ee8 <_fini>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	bf00      	nop
 8009eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eee:	bc08      	pop	{r3}
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	4770      	bx	lr
