
Sun-Dial-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005bd0  08005bd0  00015bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c50  08005c50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c50  08005c50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c50  08005c50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000042c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f65e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206d  00000000  00000000  0002f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4b2  00000000  00000000  00033048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001162b  00000000  00000000  000514fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b799b  00000000  00000000  00062b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a4c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa0  00000000  00000000  0011a510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bb4 	.word	0x08005bb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005bb4 	.word	0x08005bb4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <enable_clocks>:

	//define sConfig struct type to be used in ADC_select functions
	ADC_ChannelConfTypeDef sConfig = {0};


void enable_clocks() {
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <enable_clocks+0x1c>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <enable_clocks+0x1c>)
 8000aea:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000aee:	6153      	str	r3, [r2, #20]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <initialise_board>:

void initialise_board() {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <initialise_board+0x20>)
 8000b08:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000b10:	801a      	strh	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	48001002 	.word	0x48001002

08000b24 <ADC_select_CH2>:

void ADC_select_CH2 (void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <ADC_select_CH2+0x40>)
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <ADC_select_CH2+0x44>)
 8000b50:	f001 fa5a 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <ADC_select_CH2+0x3a>
	{
	  Error_Handler();
 8000b5a:	f000 fb77 	bl	800124c <Error_Handler>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000480 	.word	0x20000480
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <ADC_select_CH3>:

void ADC_select_CH3 (void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <ADC_select_CH3+0x40>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <ADC_select_CH3+0x40>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <ADC_select_CH3+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <ADC_select_CH3+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <ADC_select_CH3+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <ADC_select_CH3+0x40>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	4905      	ldr	r1, [pc, #20]	; (8000bac <ADC_select_CH3+0x40>)
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <ADC_select_CH3+0x44>)
 8000b98:	f001 fa36 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <ADC_select_CH3+0x3a>
	{
	  Error_Handler();
 8000ba2:	f000 fb53 	bl	800124c <Error_Handler>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000480 	.word	0x20000480
 8000bb0:	2000008c 	.word	0x2000008c

08000bb4 <ADC_select_CH4>:

void ADC_select_CH4 (void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_4;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <ADC_select_CH4+0x40>)
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <ADC_select_CH4+0x44>)
 8000be0:	f001 fa12 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <ADC_select_CH4+0x3a>
	{
	  Error_Handler();
 8000bea:	f000 fb2f 	bl	800124c <Error_Handler>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000480 	.word	0x20000480
 8000bf8:	2000008c 	.word	0x2000008c

08000bfc <ADC_select_CH5>:

void ADC_select_CH5 (void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c02:	2205      	movs	r2, #5
 8000c04:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	4905      	ldr	r1, [pc, #20]	; (8000c3c <ADC_select_CH5+0x40>)
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <ADC_select_CH5+0x44>)
 8000c28:	f001 f9ee 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <ADC_select_CH5+0x3a>
	{
	  Error_Handler();
 8000c32:	f000 fb0b 	bl	800124c <Error_Handler>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000480 	.word	0x20000480
 8000c40:	2000008c 	.word	0x2000008c

08000c44 <ADC_select_CH6>:

void ADC_select_CH6 (void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c4a:	2206      	movs	r2, #6
 8000c4c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	4905      	ldr	r1, [pc, #20]	; (8000c84 <ADC_select_CH6+0x40>)
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <ADC_select_CH6+0x44>)
 8000c70:	f001 f9ca 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <ADC_select_CH6+0x3a>
	{
	  Error_Handler();
 8000c7a:	f000 fae7 	bl	800124c <Error_Handler>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000480 	.word	0x20000480
 8000c88:	2000008c 	.word	0x2000008c

08000c8c <ADC_select_CH7>:

void ADC_select_CH7 (void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_7;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c92:	2207      	movs	r2, #7
 8000c94:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <ADC_select_CH7+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <ADC_select_CH7+0x40>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <ADC_select_CH7+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <ADC_select_CH7+0x40>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb4:	4905      	ldr	r1, [pc, #20]	; (8000ccc <ADC_select_CH7+0x40>)
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <ADC_select_CH7+0x44>)
 8000cb8:	f001 f9a6 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <ADC_select_CH7+0x3a>
	{
	  Error_Handler();
 8000cc2:	f000 fac3 	bl	800124c <Error_Handler>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000480 	.word	0x20000480
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <ADC_select_CH8>:

void ADC_select_CH8 (void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_8;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <ADC_select_CH8+0x40>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <ADC_select_CH8+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4905      	ldr	r1, [pc, #20]	; (8000d14 <ADC_select_CH8+0x40>)
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <ADC_select_CH8+0x44>)
 8000d00:	f001 f982 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <ADC_select_CH8+0x3a>
	{
	  Error_Handler();
 8000d0a:	f000 fa9f 	bl	800124c <Error_Handler>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000480 	.word	0x20000480
 8000d18:	2000008c 	.word	0x2000008c

08000d1c <ADC_select_CH9>:

void ADC_select_CH9 (void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_9;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d22:	2209      	movs	r2, #9
 8000d24:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	605a      	str	r2, [r3, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	4905      	ldr	r1, [pc, #20]	; (8000d5c <ADC_select_CH9+0x40>)
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <ADC_select_CH9+0x44>)
 8000d48:	f001 f95e 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <ADC_select_CH9+0x3a>
	{
	  Error_Handler();
 8000d52:	f000 fa7b 	bl	800124c <Error_Handler>
	}
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000480 	.word	0x20000480
 8000d60:	2000008c 	.word	0x2000008c
 8000d64:	00000000 	.word	0x00000000

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b096      	sub	sp, #88	; 0x58
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	enable_clocks();
 8000d6e:	f7ff feb7 	bl	8000ae0 <enable_clocks>
	initialise_board();
 8000d72:	f7ff fec5 	bl	8000b00 <initialise_board>

	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d76:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <main+0x130>)
 8000d78:	64fb      	str	r3, [r7, #76]	; 0x4c
	*led_register = 0b10101010;
 8000d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7c:	22aa      	movs	r2, #170	; 0xaa
 8000d7e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fc2e 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f890 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f9e2 	bl	8001150 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8c:	f000 f940 	bl	8001010 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d90:	f000 f97e 	bl	8001090 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d94:	f000 f9ba 	bl	800110c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d98:	f000 f8ea 	bl	8000f70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // array of functions to select LDR channels
  void (*LDRChannels[8])() = {
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <main+0x134>)
 8000d9e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  &ADC_select_CH8,
		  &ADC_select_CH9
  };

  // Array to record LDR status
  int LDRs[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2220      	movs	r2, #32
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 ffda 	bl	8004d70 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // calibrate ADC1
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4838      	ldr	r0, [pc, #224]	; (8000ea0 <main+0x138>)
 8000dc0:	f001 f8af 	bl	8001f22 <HAL_ADCEx_Calibration_Start>

  while (1)
  {

	// Poll each LED in sequence
	for (int i = 0; i < 8; i++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8000dc8:	e036      	b.n	8000e38 <main+0xd0>
		LDRChannels[i]();
 8000dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	3358      	adds	r3, #88	; 0x58
 8000dd0:	443b      	add	r3, r7
 8000dd2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000dd6:	4798      	blx	r3
		HAL_ADC_Start(&hadc1);
 8000dd8:	4831      	ldr	r0, [pc, #196]	; (8000ea0 <main+0x138>)
 8000dda:	f000 fe47 	bl	8001a6c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de2:	482f      	ldr	r0, [pc, #188]	; (8000ea0 <main+0x138>)
 8000de4:	f000 ff8e 	bl	8001d04 <HAL_ADC_PollForConversion>
		int ADC_val = HAL_ADC_GetValue(&hadc1);
 8000de8:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <main+0x138>)
 8000dea:	f001 f88d 	bl	8001f08 <HAL_ADC_GetValue>
 8000dee:	4603      	mov	r3, r0
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
		HAL_ADC_Stop(&hadc1);
 8000df2:	482b      	ldr	r0, [pc, #172]	; (8000ea0 <main+0x138>)
 8000df4:	f000 ff50 	bl	8001c98 <HAL_ADC_Stop>

		// read the value from ADC, full range is 12 bits
		uint8_t scale = ADC_val / (0xfff / 8);  // divide the scale into 8 even partitions (for 8 leds)
 8000df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dfa:	4a2a      	ldr	r2, [pc, #168]	; (8000ea4 <main+0x13c>)
 8000dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000e00:	441a      	add	r2, r3
 8000e02:	1212      	asrs	r2, r2, #8
 8000e04:	17db      	asrs	r3, r3, #31
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		// Mark LED to be triggered
		if (scale > 2) {
 8000e0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d907      	bls.n	8000e24 <main+0xbc>
			LDRs[i] = 1;
 8000e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	3358      	adds	r3, #88	; 0x58
 8000e1a:	443b      	add	r3, r7
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f843 2c54 	str.w	r2, [r3, #-84]
 8000e22:	e006      	b.n	8000e32 <main+0xca>
		} else {
			LDRs[i] = 0;
 8000e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	3358      	adds	r3, #88	; 0x58
 8000e2a:	443b      	add	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int i = 0; i < 8; i++){
 8000e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e34:	3301      	adds	r3, #1
 8000e36:	657b      	str	r3, [r7, #84]	; 0x54
 8000e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	ddc5      	ble.n	8000dca <main+0x62>
		}
	}

	// activate all LEDs
	for (int i = 0; i < 8; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	653b      	str	r3, [r7, #80]	; 0x50
 8000e42:	e01f      	b.n	8000e84 <main+0x11c>
		if (LDRs[i] == 1){
 8000e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	3358      	adds	r3, #88	; 0x58
 8000e4a:	443b      	add	r3, r7
 8000e4c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d114      	bne.n	8000e7e <main+0x116>
			*led_register = pow(2, i);
 8000e54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000e56:	f7ff fb09 	bl	800046c <__aeabi_i2d>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	ec43 2b11 	vmov	d1, r2, r3
 8000e62:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000e90 <main+0x128>
 8000e66:	f003 ff8b 	bl	8004d80 <pow>
 8000e6a:	ec53 2b10 	vmov	r2, r3, d0
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fe15 	bl	8000aa0 <__aeabi_d2uiz>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8000e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e80:	3301      	adds	r3, #1
 8000e82:	653b      	str	r3, [r7, #80]	; 0x50
 8000e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	dddc      	ble.n	8000e44 <main+0xdc>
	for (int i = 0; i < 8; i++){
 8000e8a:	e79b      	b.n	8000dc4 <main+0x5c>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40000000 	.word	0x40000000
 8000e98:	48001015 	.word	0x48001015
 8000e9c:	08005bd0 	.word	0x08005bd0
 8000ea0:	2000008c 	.word	0x2000008c
 8000ea4:	80402011 	.word	0x80402011

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09e      	sub	sp, #120	; 0x78
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 ff5a 	bl	8004d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	223c      	movs	r2, #60	; 0x3c
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 ff4c 	bl	8004d70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000edc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fa4e 	bl	80033a4 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f0e:	f000 f99d 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fa76 	bl	8004420 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 f987 	bl	800124c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <SystemClock_Config+0xc4>)
 8000f40:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fc49 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f60:	f000 f974 	bl	800124c <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3778      	adds	r7, #120	; 0x78
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	000200a0 	.word	0x000200a0

08000f70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_ADC1_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_ADC1_Init+0x9c>)
 8000fdc:	f000 fb66 	bl	80016ac <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000fe6:	f000 f931 	bl	800124c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_ADC1_Init+0x9c>)
 8000ff4:	f001 faf4 	bl	80025e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ffe:	f000 f925 	bl	800124c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000008c 	.word	0x2000008c

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f001 ffb2 	bl	8002fb4 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 f8f9 	bl	800124c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f002 f838 	bl	80030d2 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 f8f0 	bl	800124c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f002 f87a 	bl	8003168 <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 f8e7 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000dc 	.word	0x200000dc
 8001088:	40005400 	.word	0x40005400
 800108c:	2000090e 	.word	0x2000090e

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_SPI1_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_SPI1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_SPI1_Init+0x74>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_SPI1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI1_Init+0x74>)
 80010aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_SPI1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_SPI1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_SPI1_Init+0x74>)
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI1_Init+0x74>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_SPI1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_SPI1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI1_Init+0x74>)
 80010de:	2207      	movs	r2, #7
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_SPI1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI1_Init+0x74>)
 80010ea:	2208      	movs	r2, #8
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_SPI1_Init+0x74>)
 80010f0:	f003 fd2c 	bl	8004b4c <HAL_SPI_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 f8a7 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000130 	.word	0x20000130
 8001108:	40013000 	.word	0x40013000

0800110c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <MX_USB_PCD_Init+0x40>)
 8001114:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 8001118:	2208      	movs	r2, #8
 800111a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 800111e:	2202      	movs	r2, #2
 8001120:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 8001124:	2202      	movs	r2, #2
 8001126:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_USB_PCD_Init+0x3c>)
 8001136:	f002 f863 	bl	8003200 <HAL_PCD_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001140:	f000 f884 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000194 	.word	0x20000194
 800114c:	40005c00 	.word	0x40005c00

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a36      	ldr	r2, [pc, #216]	; (8001244 <MX_GPIO_Init+0xf4>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <MX_GPIO_Init+0xf4>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a2a      	ldr	r2, [pc, #168]	; (8001244 <MX_GPIO_Init+0xf4>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <MX_GPIO_Init+0xf8>)
 80011e6:	f001 fecd 	bl	8002f84 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80011ea:	2337      	movs	r3, #55	; 0x37
 80011ec:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001200:	f001 fd46 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001204:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001208:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <MX_GPIO_Init+0xf8>)
 800121e:	f001 fd37 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f001 fd2a 	bl	8002c90 <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	48001000 	.word	0x48001000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_MspInit+0x44>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_MspInit+0x44>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_MspInit+0x44>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x44>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x44>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x44>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800128e:	2007      	movs	r0, #7
 8001290:	f001 fcca 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c0:	d154      	bne.n	800136c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	6153      	str	r3, [r2, #20]
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_ADC_MspInit+0xd4>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001322:	230f      	movs	r3, #15
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <HAL_ADC_MspInit+0xd8>)
 8001336:	f001 fcab 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800133a:	230e      	movs	r3, #14
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f001 fc9e 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001354:	2310      	movs	r3, #16
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_ADC_MspInit+0xdc>)
 8001368:	f001 fc92 	bl	8002c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000800 	.word	0x48000800
 800137c:	48001400 	.word	0x48001400

08001380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_I2C_MspInit+0x7c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d127      	bne.n	80013f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6153      	str	r3, [r2, #20]
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	2312      	movs	r3, #18
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ca:	2304      	movs	r3, #4
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_I2C_MspInit+0x84>)
 80013d6:	f001 fc5b 	bl	8002c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_I2C_MspInit+0x80>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40005400 	.word	0x40005400
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_SPI_MspInit+0x7c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d128      	bne.n	800147c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_SPI_MspInit+0x80>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_SPI_MspInit+0x80>)
 8001430:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_SPI_MspInit+0x80>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_SPI_MspInit+0x80>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_SPI_MspInit+0x80>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_SPI_MspInit+0x80>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800145a:	23e0      	movs	r3, #224	; 0xe0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800146a:	2305      	movs	r3, #5
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f001 fc0a 	bl	8002c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013000 	.word	0x40013000
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_PCD_MspInit+0x80>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d129      	bne.n	8001502 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6153      	str	r3, [r2, #20]
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80014c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80014d8:	230e      	movs	r3, #14
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 fbd3 	bl	8002c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_PCD_MspInit+0x84>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40005c00 	.word	0x40005c00
 8001510:	40021000 	.word	0x40021000

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f884 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <LoopForever+0xe>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <LoopForever+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f003 fbb5 	bl	8004d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7ff fbd3 	bl	8000d68 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d0:	08005c58 	.word	0x08005c58
  ldr r2, =_sbss
 80015d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015d8:	2000049c 	.word	0x2000049c

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f001 fb19 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fe2c 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fb23 	bl	8002c76 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f001 faf9 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000000 	.word	0x20000000
 8001664:	20000008 	.word	0x20000008
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	20000498 	.word	0x20000498

08001694 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;  
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000498 	.word	0x20000498

080016ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09a      	sub	sp, #104	; 0x68
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e1c9      	b.n	8001a60 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d176      	bne.n	80017cc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d152      	bne.n	800178c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fdcd 	bl	80012a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d13b      	bne.n	800178c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 f8b9 	bl	800288c <ADC_Disable>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d12f      	bne.n	800178c <HAL_ADC_Init+0xe0>
 800172c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12b      	bne.n	800178c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800173c:	f023 0302 	bic.w	r3, r3, #2
 8001740:	f043 0202 	orr.w	r2, r3, #2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001756:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001766:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001768:	4b86      	ldr	r3, [pc, #536]	; (8001984 <HAL_ADC_Init+0x2d8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a86      	ldr	r2, [pc, #536]	; (8001988 <HAL_ADC_Init+0x2dc>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9a      	lsrs	r2, r3, #18
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177e:	e002      	b.n	8001786 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3b01      	subs	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f9      	bne.n	8001780 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a8:	d110      	bne.n	80017cc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0312 	bic.w	r3, r3, #18
 80017b2:	f043 0210 	orr.w	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 8136 	bne.w	8001a46 <HAL_ADC_Init+0x39a>
 80017da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 8131 	bne.w	8001a46 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8129 	bne.w	8001a46 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017fc:	f043 0202 	orr.w	r2, r3, #2
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800180c:	d004      	beq.n	8001818 <HAL_ADC_Init+0x16c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_ADC_Init+0x2e0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_ADC_Init+0x170>
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_ADC_Init+0x2e4>)
 800181a:	e000      	b.n	800181e <HAL_ADC_Init+0x172>
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_ADC_Init+0x2e8>)
 800181e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001828:	d102      	bne.n	8001830 <HAL_ADC_Init+0x184>
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_ADC_Init+0x2e0>)
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e01a      	b.n	8001866 <HAL_ADC_Init+0x1ba>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_ADC_Init+0x2e0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d103      	bne.n	8001842 <HAL_ADC_Init+0x196>
 800183a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e011      	b.n	8001866 <HAL_ADC_Init+0x1ba>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_ADC_Init+0x2ec>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_ADC_Init+0x1a6>
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_ADC_Init+0x2f0>)
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e009      	b.n	8001866 <HAL_ADC_Init+0x1ba>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_ADC_Init+0x2f0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <HAL_ADC_Init+0x1b6>
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_ADC_Init+0x2ec>)
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e001      	b.n	8001866 <HAL_ADC_Init+0x1ba>
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_ADC_Init+0x1da>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Init+0x1da>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_ADC_Init+0x1dc>
 8001886:	2300      	movs	r3, #0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d11c      	bne.n	80018c6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800188c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800188e:	2b00      	cmp	r3, #0
 8001890:	d010      	beq.n	80018b4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_ADC_Init+0x202>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x202>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_Init+0x204>
 80018ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	035b      	lsls	r3, r3, #13
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018d0:	2a01      	cmp	r2, #1
 80018d2:	d002      	beq.n	80018da <HAL_ADC_Init+0x22e>
 80018d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d8:	e000      	b.n	80018dc <HAL_ADC_Init+0x230>
 80018da:	2200      	movs	r2, #0
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ec:	4313      	orrs	r3, r2
 80018ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11b      	bne.n	8001932 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7e5b      	ldrb	r3, [r3, #25]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	3b01      	subs	r3, #1
 8001908:	045a      	lsls	r2, r3, #17
 800190a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800190c:	4313      	orrs	r3, r2
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	663b      	str	r3, [r7, #96]	; 0x60
 8001914:	e00d      	b.n	8001932 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800191e:	f043 0220 	orr.w	r2, r3, #32
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	2b01      	cmp	r3, #1
 8001938:	d03a      	beq.n	80019b0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_ADC_Init+0x2ec>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_ADC_Init+0x2a2>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_ADC_Init+0x2f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d128      	bne.n	80019a0 <HAL_ADC_Init+0x2f4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001956:	d012      	beq.n	800197e <HAL_ADC_Init+0x2d2>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_Init+0x2cc>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800196a:	d002      	beq.n	8001972 <HAL_ADC_Init+0x2c6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	e018      	b.n	80019a4 <HAL_ADC_Init+0x2f8>
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	e015      	b.n	80019a4 <HAL_ADC_Init+0x2f8>
 8001978:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800197c:	e012      	b.n	80019a4 <HAL_ADC_Init+0x2f8>
 800197e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001982:	e00f      	b.n	80019a4 <HAL_ADC_Init+0x2f8>
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83
 800198c:	50000100 	.word	0x50000100
 8001990:	50000300 	.word	0x50000300
 8001994:	50000700 	.word	0x50000700
 8001998:	50000400 	.word	0x50000400
 800199c:	50000500 	.word	0x50000500
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019a8:	4313      	orrs	r3, r2
 80019aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ac:	4313      	orrs	r3, r2
 80019ae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d114      	bne.n	80019e8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019cc:	f023 0302 	bic.w	r3, r3, #2
 80019d0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e1b      	ldrb	r3, [r3, #24]
 80019d6:	039a      	lsls	r2, r3, #14
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4313      	orrs	r3, r2
 80019e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019e4:	4313      	orrs	r3, r2
 80019e6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_ADC_Init+0x3bc>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019f8:	430b      	orrs	r3, r1
 80019fa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10c      	bne.n	8001a1e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f023 010f 	bic.w	r1, r3, #15
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1c:	e007      	b.n	8001a2e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 020f 	bic.w	r2, r2, #15
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
 8001a44:	e00a      	b.n	8001a5c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f023 0312 	bic.w	r3, r3, #18
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3768      	adds	r7, #104	; 0x68
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	fff0c007 	.word	0xfff0c007

08001a6c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 80f9 	bne.w	8001c7a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_Start+0x2a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e0f4      	b.n	8001c80 <HAL_ADC_Start+0x214>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fe90 	bl	80027c4 <ADC_Enable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 80e0 	bne.w	8001c70 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001acc:	d004      	beq.n	8001ad8 <HAL_ADC_Start+0x6c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6d      	ldr	r2, [pc, #436]	; (8001c88 <HAL_ADC_Start+0x21c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d106      	bne.n	8001ae6 <HAL_ADC_Start+0x7a>
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_ADC_Start+0x220>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_ADC_Start+0x9a>
 8001ae4:	e005      	b.n	8001af2 <HAL_ADC_Start+0x86>
 8001ae6:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_ADC_Start+0x224>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_ADC_Start+0x9a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Start+0x9a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a64      	ldr	r2, [pc, #400]	; (8001c94 <HAL_ADC_Start+0x228>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d115      	bne.n	8001b32 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d036      	beq.n	8001b8e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b30:	e02d      	b.n	8001b8e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b46:	d004      	beq.n	8001b52 <HAL_ADC_Start+0xe6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_ADC_Start+0x21c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10a      	bne.n	8001b68 <HAL_ADC_Start+0xfc>
 8001b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e008      	b.n	8001b7a <HAL_ADC_Start+0x10e>
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_ADC_Start+0x228>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f023 0206 	bic.w	r2, r3, #6
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ba8:	e002      	b.n	8001bb0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	221c      	movs	r2, #28
 8001bbe:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d004      	beq.n	8001bd4 <HAL_ADC_Start+0x168>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <HAL_ADC_Start+0x21c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_Start+0x176>
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_ADC_Start+0x220>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03e      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001be0:	e005      	b.n	8001bee <HAL_ADC_Start+0x182>
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_ADC_Start+0x224>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d037      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Start+0x196>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <HAL_ADC_Start+0x21c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_Start+0x1a4>
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_ADC_Start+0x220>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d027      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001c0e:	e005      	b.n	8001c1c <HAL_ADC_Start+0x1b0>
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_ADC_Start+0x224>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d020      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c24:	d004      	beq.n	8001c30 <HAL_ADC_Start+0x1c4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_ADC_Start+0x21c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_Start+0x1d2>
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_ADC_Start+0x220>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	d010      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001c3c:	e005      	b.n	8001c4a <HAL_ADC_Start+0x1de>
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_ADC_Start+0x224>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2b09      	cmp	r3, #9
 8001c48:	d009      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_Start+0x1f2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_ADC_Start+0x228>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10f      	bne.n	8001c7e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0204 	orr.w	r2, r2, #4
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	e006      	b.n	8001c7e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c78:	e001      	b.n	8001c7e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50000100 	.word	0x50000100
 8001c8c:	50000300 	.word	0x50000300
 8001c90:	50000700 	.word	0x50000700
 8001c94:	50000400 	.word	0x50000400

08001c98 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Stop+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e023      	b.n	8001cfa <HAL_ADC_Stop+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001cba:	216c      	movs	r1, #108	; 0x6c
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fe4b 	bl	8002958 <ADC_ConversionStop>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fddd 	bl	800288c <ADC_Disable>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d102      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e03a      	b.n	8001d96 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d28:	d004      	beq.n	8001d34 <HAL_ADC_PollForConversion+0x30>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_ADC_PollForConversion+0x1f4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x34>
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_ADC_PollForConversion+0x1f8>)
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_PollForConversion+0x36>
 8001d38:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_ADC_PollForConversion+0x1fc>)
 8001d3a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d11d      	bne.n	8001d92 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0bf      	b.n	8001eee <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0ad      	b.n	8001eee <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001d92:	230c      	movs	r3, #12
 8001d94:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_PollForConversion+0xa6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_ADC_PollForConversion+0x1f4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_PollForConversion+0xb4>
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_ADC_PollForConversion+0x1f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0xd4>
 8001db6:	e005      	b.n	8001dc4 <HAL_ADC_PollForConversion+0xc0>
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <HAL_ADC_PollForConversion+0x1fc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0xd4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dcc:	d004      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0xd4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4c      	ldr	r2, [pc, #304]	; (8001f04 <HAL_ADC_PollForConversion+0x200>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d104      	bne.n	8001de2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e00f      	b.n	8001e02 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dea:	d004      	beq.n	8001df6 <HAL_ADC_PollForConversion+0xf2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_ADC_PollForConversion+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_PollForConversion+0xf8>
 8001df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_PollForConversion+0xfa>
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_ADC_PollForConversion+0x200>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e02:	f7ff fc47 	bl	8001694 <HAL_GetTick>
 8001e06:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e08:	e021      	b.n	8001e4e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d01d      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_ADC_PollForConversion+0x124>
 8001e18:	f7ff fc3c 	bl	8001694 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d212      	bcs.n	8001e4e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0204 	orr.w	r2, r3, #4
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0d6      	beq.n	8001e0a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d131      	bne.n	8001eda <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d12c      	bne.n	8001eda <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d125      	bne.n	8001eda <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d112      	bne.n	8001ec2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d112      	bne.n	8001eda <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec0:	e00b      	b.n	8001eda <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	50000100 	.word	0x50000100
 8001efc:	50000300 	.word	0x50000300
 8001f00:	50000700 	.word	0x50000700
 8001f04:	50000400 	.word	0x50000400

08001f08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_ADCEx_Calibration_Start+0x1c>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e05f      	b.n	8001ffe <HAL_ADCEx_Calibration_Start+0xdc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fca0 	bl	800288c <ADC_Disable>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d14e      	bne.n	8001ff4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001f6a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f80:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f90:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001f92:	f7ff fb7f 	bl	8001694 <HAL_GetTick>
 8001f96:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f98:	e01c      	b.n	8001fd4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f9a:	f7ff fb7b 	bl	8001694 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b0a      	cmp	r3, #10
 8001fa6:	d915      	bls.n	8001fd4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f023 0312 	bic.w	r3, r3, #18
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e014      	b.n	8001ffe <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fe2:	d0da      	beq.n	8001f9a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f023 0303 	bic.w	r3, r3, #3
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b09b      	sub	sp, #108	; 0x6c
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22>
 8002026:	2302      	movs	r3, #2
 8002028:	e2ca      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x5b8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 82ae 	bne.w	800259e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d81c      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	461a      	mov	r2, r3
 800205e:	231f      	movs	r3, #31
 8002060:	4093      	lsls	r3, r2
 8002062:	43db      	mvns	r3, r3
 8002064:	4019      	ands	r1, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
 8002082:	e063      	b.n	800214c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b09      	cmp	r3, #9
 800208a:	d81e      	bhi.n	80020ca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	3b1e      	subs	r3, #30
 80020a0:	221f      	movs	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4019      	ands	r1, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
 80020c8:	e040      	b.n	800214c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b0e      	cmp	r3, #14
 80020d0:	d81e      	bhi.n	8002110 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	3b3c      	subs	r3, #60	; 0x3c
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4019      	ands	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	3b3c      	subs	r3, #60	; 0x3c
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
 800210e:	e01d      	b.n	800214c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	3b5a      	subs	r3, #90	; 0x5a
 8002124:	221f      	movs	r2, #31
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	4019      	ands	r1, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	3b5a      	subs	r3, #90	; 0x5a
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 80e5 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d91c      	bls.n	800219e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1e      	subs	r3, #30
 8002176:	2207      	movs	r2, #7
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1e      	subs	r3, #30
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	619a      	str	r2, [r3, #24]
 800219c:	e019      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6959      	ldr	r1, [r3, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d84f      	bhi.n	8002294 <HAL_ADC_ConfigChannel+0x28c>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_ADC_ConfigChannel+0x1f4>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800222f 	.word	0x0800222f
 8002204:	08002251 	.word	0x08002251
 8002208:	08002273 	.word	0x08002273
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002212:	4b9a      	ldr	r3, [pc, #616]	; (800247c <HAL_ADC_ConfigChannel+0x474>)
 8002214:	4013      	ands	r3, r2
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	0691      	lsls	r1, r2, #26
 800221c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800221e:	430a      	orrs	r2, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800222c:	e07e      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002234:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_ADC_ConfigChannel+0x474>)
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	0691      	lsls	r1, r2, #26
 800223e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002240:	430a      	orrs	r2, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800224c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800224e:	e06d      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002256:	4b89      	ldr	r3, [pc, #548]	; (800247c <HAL_ADC_ConfigChannel+0x474>)
 8002258:	4013      	ands	r3, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	0691      	lsls	r1, r2, #26
 8002260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002262:	430a      	orrs	r2, r1
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002270:	e05c      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002278:	4b80      	ldr	r3, [pc, #512]	; (800247c <HAL_ADC_ConfigChannel+0x474>)
 800227a:	4013      	ands	r3, r2
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	0691      	lsls	r1, r2, #26
 8002282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002284:	430a      	orrs	r2, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002290:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002292:	e04b      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022da:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022fe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	069b      	lsls	r3, r3, #26
 8002310:	429a      	cmp	r2, r3
 8002312:	d10a      	bne.n	800232a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002322:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002324:	e001      	b.n	800232a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002326:	bf00      	nop
 8002328:	e000      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
      break;
 800232a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <HAL_ADC_ConfigChannel+0x344>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x344>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_ADC_ConfigChannel+0x346>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 8130 	bne.w	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d00f      	beq.n	800237c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800237a:	e049      	b.n	8002410 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b09      	cmp	r3, #9
 800239c:	d91c      	bls.n	80023d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6999      	ldr	r1, [r3, #24]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	3b1b      	subs	r3, #27
 80023b0:	2207      	movs	r2, #7
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4019      	ands	r1, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6898      	ldr	r0, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1b      	subs	r3, #27
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	e01b      	b.n	8002410 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6959      	ldr	r1, [r3, #20]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	fa00 f203 	lsl.w	r2, r0, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002418:	d004      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x41c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_ADC_ConfigChannel+0x478>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x420>
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_ADC_ConfigChannel+0x47c>)
 8002426:	e000      	b.n	800242a <HAL_ADC_ConfigChannel+0x422>
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_ADC_ConfigChannel+0x480>)
 800242a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d105      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002444:	2b11      	cmp	r3, #17
 8002446:	d105      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002458:	2b12      	cmp	r3, #18
 800245a:	f040 80ab 	bne.w	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 80a4 	bne.w	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002474:	d10a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x484>
 8002476:	4b02      	ldr	r3, [pc, #8]	; (8002480 <HAL_ADC_ConfigChannel+0x478>)
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e022      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4ba>
 800247c:	83fff000 	.word	0x83fff000
 8002480:	50000100 	.word	0x50000100
 8002484:	50000300 	.word	0x50000300
 8002488:	50000700 	.word	0x50000700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a4e      	ldr	r2, [pc, #312]	; (80025cc <HAL_ADC_ConfigChannel+0x5c4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d103      	bne.n	800249e <HAL_ADC_ConfigChannel+0x496>
 8002496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e011      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4ba>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d102      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x4a6>
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e009      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4ba>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d102      	bne.n	80024be <HAL_ADC_ConfigChannel+0x4b6>
 80024b8:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e001      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4ba>
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x4da>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x4da>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x4dc>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d150      	bne.n	800258a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_ADC_ConfigChannel+0x502>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x502>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_ADC_ConfigChannel+0x504>
 800250a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d13c      	bne.n	800258a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b10      	cmp	r3, #16
 8002516:	d11d      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x54c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002520:	d118      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800252a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_ADC_ConfigChannel+0x5d4>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	0c9a      	lsrs	r2, r3, #18
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002544:	e002      	b.n	800254c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3b01      	subs	r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002552:	e02e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b11      	cmp	r3, #17
 800255a:	d10b      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x56c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002564:	d106      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d11a      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002586:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002588:	e013      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800259c:	e00a      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	376c      	adds	r7, #108	; 0x6c
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	50000100 	.word	0x50000100
 80025d0:	50000400 	.word	0x50000400
 80025d4:	50000500 	.word	0x50000500
 80025d8:	20000000 	.word	0x20000000
 80025dc:	431bde83 	.word	0x431bde83

080025e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b099      	sub	sp, #100	; 0x64
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f8:	d102      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	e01a      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d103      	bne.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800260a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	e011      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800261c:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	e009      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d102      	bne.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	e001      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b0      	b.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800264a:	2302      	movs	r3, #2
 800264c:	e0a9      	b.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 808d 	bne.w	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 8086 	bne.w	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800267c:	d004      	beq.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800268a:	e000      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800268c:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800268e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d040      	beq.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026aa:	035b      	lsls	r3, r3, #13
 80026ac:	430b      	orrs	r3, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d15c      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80026f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d14b      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002704:	f023 030f 	bic.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	6811      	ldr	r1, [r2, #0]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	430a      	orrs	r2, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002716:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002718:	e03c      	b.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800271a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d123      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002768:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800276e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002776:	f023 030f 	bic.w	r3, r3, #15
 800277a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800277e:	e009      	b.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002792:	e000      	b.n	8002796 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002794:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800279e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80027a2:	4618      	mov	r0, r3
 80027a4:	3764      	adds	r7, #100	; 0x64
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	50000100 	.word	0x50000100
 80027b4:	50000400 	.word	0x50000400
 80027b8:	50000500 	.word	0x50000500
 80027bc:	50000300 	.word	0x50000300
 80027c0:	50000700 	.word	0x50000700

080027c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d108      	bne.n	80027f0 <ADC_Enable+0x2c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <ADC_Enable+0x2c>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <ADC_Enable+0x2e>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d143      	bne.n	800287e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <ADC_Enable+0xc4>)
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f043 0210 	orr.w	r2, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e02f      	b.n	8002880 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002830:	f7fe ff30 	bl	8001694 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002836:	e01b      	b.n	8002870 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002838:	f7fe ff2c 	bl	8001694 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d914      	bls.n	8002870 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d00d      	beq.n	8002870 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e007      	b.n	8002880 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d1dc      	bne.n	8002838 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	8000003f 	.word	0x8000003f

0800288c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d108      	bne.n	80028b8 <ADC_Disable+0x2c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <ADC_Disable+0x2c>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <ADC_Disable+0x2e>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d047      	beq.n	800294e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030d 	and.w	r3, r3, #13
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10f      	bne.n	80028ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0202 	orr.w	r2, r2, #2
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2203      	movs	r2, #3
 80028e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fed6 	bl	8001694 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ea:	e029      	b.n	8002940 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e023      	b.n	8002950 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002908:	f7fe fec4 	bl	8001694 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d914      	bls.n	8002940 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0210 	orr.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d0dc      	beq.n	8002908 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 809b 	beq.w	8002ab4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298c:	d12a      	bne.n	80029e4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002992:	2b01      	cmp	r3, #1
 8002994:	d126      	bne.n	80029e4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800299a:	2b01      	cmp	r3, #1
 800299c:	d122      	bne.n	80029e4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800299e:	230c      	movs	r3, #12
 80029a0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029a2:	e014      	b.n	80029ce <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <ADC_ConversionStop+0x168>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d90d      	bls.n	80029c8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0210 	orr.w	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e076      	b.n	8002ab6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	3301      	adds	r3, #1
 80029cc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d1e3      	bne.n	80029a4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b60      	cmp	r3, #96	; 0x60
 80029e8:	d015      	beq.n	8002a16 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d10e      	bne.n	8002a16 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0210 	orr.w	r2, r2, #16
 8002a14:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d015      	beq.n	8002a48 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d10e      	bne.n	8002a48 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b60      	cmp	r3, #96	; 0x60
 8002a4c:	d005      	beq.n	8002a5a <ADC_ConversionStop+0x102>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b6c      	cmp	r3, #108	; 0x6c
 8002a52:	d105      	bne.n	8002a60 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a54:	230c      	movs	r3, #12
 8002a56:	617b      	str	r3, [r7, #20]
        break;
 8002a58:	e005      	b.n	8002a66 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	617b      	str	r3, [r7, #20]
        break;
 8002a5e:	e002      	b.n	8002a66 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a60:	2304      	movs	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]
        break;
 8002a64:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fe15 	bl	8001694 <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a6c:	e01b      	b.n	8002aa6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a6e:	f7fe fe11 	bl	8001694 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b0b      	cmp	r3, #11
 8002a7a:	d914      	bls.n	8002aa6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1dc      	bne.n	8002a6e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	000993ff 	.word	0x000993ff

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff47 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff5c 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffb0 	bl	8002be4 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9e:	e154      	b.n	8002f4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8146 	beq.w	8002f44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d005      	beq.n	8002cd0 <HAL_GPIO_Init+0x40>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d130      	bne.n	8002d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d06:	2201      	movs	r2, #1
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0201 	and.w	r2, r3, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d017      	beq.n	8002d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d123      	bne.n	8002dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	6939      	ldr	r1, [r7, #16]
 8002dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80a0 	beq.w	8002f44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_GPIO_Init+0x2d8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_GPIO_Init+0x2d8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_GPIO_Init+0x2d8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <HAL_GPIO_Init+0x2dc>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e46:	d019      	beq.n	8002e7c <HAL_GPIO_Init+0x1ec>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a49      	ldr	r2, [pc, #292]	; (8002f70 <HAL_GPIO_Init+0x2e0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d013      	beq.n	8002e78 <HAL_GPIO_Init+0x1e8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_GPIO_Init+0x2e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00d      	beq.n	8002e74 <HAL_GPIO_Init+0x1e4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <HAL_GPIO_Init+0x1e0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_GPIO_Init+0x2ec>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_GPIO_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e008      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e70:	2303      	movs	r3, #3
 8002e72:	e004      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e002      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e8e:	4937      	ldr	r1, [pc, #220]	; (8002f6c <HAL_GPIO_Init+0x2dc>)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9c:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f aea3 	bne.w	8002ca0 <HAL_GPIO_Init+0x10>
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	48000400 	.word	0x48000400
 8002f74:	48000800 	.word	0x48000800
 8002f78:	48000c00 	.word	0x48000c00
 8002f7c:	48001000 	.word	0x48001000
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e081      	b.n	80030ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f9d0 	bl	8001380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003004:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003014:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	e006      	b.n	800303c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800303a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d104      	bne.n	800304e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69d9      	ldr	r1, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d138      	bne.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e032      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	; 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003124:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d139      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003188:	2302      	movs	r3, #2
 800318a:	e033      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b08b      	sub	sp, #44	; 0x2c
 8003204:	af06      	add	r7, sp, #24
 8003206:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0c4      	b.n	800339c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe f930 	bl	800148c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fd32 	bl	8004ca2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e040      	b.n	80032c6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3301      	adds	r3, #1
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3303      	adds	r3, #3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3338      	adds	r3, #56	; 0x38
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3340      	adds	r3, #64	; 0x40
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3b9      	bcc.n	8003244 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e044      	b.n	8003360 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3301      	adds	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3b5      	bcc.n	80032d6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	687e      	ldr	r6, [r7, #4]
 8003372:	466d      	mov	r5, sp
 8003374:	f106 0410 	add.w	r4, r6, #16
 8003378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	1d33      	adds	r3, r6, #4
 8003382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003384:	6838      	ldr	r0, [r7, #0]
 8003386:	f001 fca7 	bl	8004cd8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f001 b823 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 817d 	beq.w	80036da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033e0:	4bbc      	ldr	r3, [pc, #752]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d00c      	beq.n	8003406 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033ec:	4bb9      	ldr	r3, [pc, #740]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d15c      	bne.n	80034b2 <HAL_RCC_OscConfig+0x10e>
 80033f8:	4bb6      	ldr	r3, [pc, #728]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d155      	bne.n	80034b2 <HAL_RCC_OscConfig+0x10e>
 8003406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800340a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800341a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_RCC_OscConfig+0x94>
 8003432:	4ba8      	ldr	r3, [pc, #672]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	e015      	b.n	8003464 <HAL_RCC_OscConfig+0xc0>
 8003438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003454:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003460:	4b9c      	ldr	r3, [pc, #624]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003468:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800346c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003470:	fa92 f2a2 	rbit	r2, r2
 8003474:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003478:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	f042 0220 	orr.w	r2, r2, #32
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f002 021f 	and.w	r2, r2, #31
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f202 	lsl.w	r2, r1, r2
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 811f 	beq.w	80036d8 <HAL_RCC_OscConfig+0x334>
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8116 	bne.w	80036d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f000 bfaf 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12e>
 80034c4:	4b83      	ldr	r3, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a82      	ldr	r2, [pc, #520]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e036      	b.n	8003540 <HAL_RCC_OscConfig+0x19c>
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x158>
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a78      	ldr	r2, [pc, #480]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80034f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e021      	b.n	8003540 <HAL_RCC_OscConfig+0x19c>
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x184>
 800350e:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0x19c>
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a69      	ldr	r2, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a66      	ldr	r2, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003540:	4b64      	ldr	r3, [pc, #400]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f023 020f 	bic.w	r2, r3, #15
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	495f      	ldr	r1, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 8003556:	4313      	orrs	r3, r2
 8003558:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d059      	beq.n	800361e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe f893 	bl	8001694 <HAL_GetTick>
 800356e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe f88e 	bl	8001694 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d902      	bls.n	800358a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	f000 bf43 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 800358a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800358e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800359e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_OscConfig+0x218>
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	e015      	b.n	80035e8 <HAL_RCC_OscConfig+0x244>
 80035bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035e4:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035f4:	fa92 f2a2 	rbit	r2, r2
 80035f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003600:	fab2 f282 	clz	r2, r2
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f002 021f 	and.w	r2, r2, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ab      	beq.n	8003574 <HAL_RCC_OscConfig+0x1d0>
 800361c:	e05d      	b.n	80036da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe f839 	bl	8001694 <HAL_GetTick>
 8003622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe f834 	bl	8001694 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d902      	bls.n	800363e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	f000 bee9 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 800363e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003642:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003652:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_RCC_OscConfig+0x2cc>
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	e015      	b.n	800369c <HAL_RCC_OscConfig+0x2f8>
 8003670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003674:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003688:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800368c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCC_OscConfig+0x330>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036a8:	fa92 f2a2 	rbit	r2, r2
 80036ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036b4:	fab2 f282 	clz	r2, r2
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f042 0220 	orr.w	r2, r2, #32
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	f002 021f 	and.w	r2, r2, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ab      	bne.n	8003628 <HAL_RCC_OscConfig+0x284>
 80036d0:	e003      	b.n	80036da <HAL_RCC_OscConfig+0x336>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 817d 	beq.w	80039ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036f0:	4ba6      	ldr	r3, [pc, #664]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036fc:	4ba3      	ldr	r3, [pc, #652]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d172      	bne.n	80037ee <HAL_RCC_OscConfig+0x44a>
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d16c      	bne.n	80037ee <HAL_RCC_OscConfig+0x44a>
 8003714:	2302      	movs	r3, #2
 8003716:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003726:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x3a0>
 800373e:	4b93      	ldr	r3, [pc, #588]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e013      	b.n	800376c <HAL_RCC_OscConfig+0x3c8>
 8003744:	2302      	movs	r3, #2
 8003746:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003756:	2302      	movs	r3, #2
 8003758:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800375c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003768:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2202      	movs	r2, #2
 800376e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003772:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003776:	fa92 f2a2 	rbit	r2, r2
 800377a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800377e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003782:	fab2 f282 	clz	r2, r2
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f002 021f 	and.w	r2, r2, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x410>
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f000 be2e 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	21f8      	movs	r1, #248	; 0xf8
 80037ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037d2:	fa91 f1a1 	rbit	r1, r1
 80037d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037de:	fab1 f181 	clz	r1, r1
 80037e2:	b2c9      	uxtb	r1, r1
 80037e4:	408b      	lsls	r3, r1
 80037e6:	4969      	ldr	r1, [pc, #420]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ec:	e0fd      	b.n	80039ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8088 	beq.w	8003910 <HAL_RCC_OscConfig+0x56c>
 8003800:	2301      	movs	r3, #1
 8003802:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003812:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	461a      	mov	r2, r3
 8003828:	2301      	movs	r3, #1
 800382a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd ff32 	bl	8001694 <HAL_GetTick>
 8003830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd ff2d 	bl	8001694 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	f000 bde2 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 800384c:	2302      	movs	r3, #2
 800384e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800385e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_RCC_OscConfig+0x4d8>
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x500>
 800387c:	2302      	movs	r3, #2
 800387e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800388e:	2302      	movs	r3, #2
 8003890:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003894:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2202      	movs	r2, #2
 80038a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038ae:	fa92 f2a2 	rbit	r2, r2
 80038b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0af      	beq.n	8003836 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	21f8      	movs	r1, #248	; 0xf8
 80038ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038f4:	fa91 f1a1 	rbit	r1, r1
 80038f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003900:	fab1 f181 	clz	r1, r1
 8003904:	b2c9      	uxtb	r1, r1
 8003906:	408b      	lsls	r3, r1
 8003908:	4920      	ldr	r1, [pc, #128]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
 800390e:	e06c      	b.n	80039ea <HAL_RCC_OscConfig+0x646>
 8003910:	2301      	movs	r3, #1
 8003912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	461a      	mov	r2, r3
 8003938:	2300      	movs	r3, #0
 800393a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd feaa 	bl	8001694 <HAL_GetTick>
 8003940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003946:	f7fd fea5 	bl	8001694 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	f000 bd5a 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 800395c:	2302      	movs	r3, #2
 800395e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800396e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d104      	bne.n	8003990 <HAL_RCC_OscConfig+0x5ec>
 8003986:	4b01      	ldr	r3, [pc, #4]	; (800398c <HAL_RCC_OscConfig+0x5e8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	e015      	b.n	80039b8 <HAL_RCC_OscConfig+0x614>
 800398c:	40021000 	.word	0x40021000
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039a2:	2302      	movs	r3, #2
 80039a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039b4:	4bc8      	ldr	r3, [pc, #800]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2202      	movs	r2, #2
 80039ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f042 0220 	orr.w	r2, r2, #32
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f002 021f 	and.w	r2, r2, #31
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ad      	bne.n	8003946 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8110 	beq.w	8003c20 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d079      	beq.n	8003b04 <HAL_RCC_OscConfig+0x760>
 8003a10:	2301      	movs	r3, #1
 8003a12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4bab      	ldr	r3, [pc, #684]	; (8003cdc <HAL_RCC_OscConfig+0x938>)
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	461a      	mov	r2, r3
 8003a36:	2301      	movs	r3, #1
 8003a38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fe2b 	bl	8001694 <HAL_GetTick>
 8003a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fd fe26 	bl	8001694 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d902      	bls.n	8003a5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f000 bcdb 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a74:	2202      	movs	r2, #2
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	fa93 f2a3 	rbit	r2, r3
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a98:	2202      	movs	r2, #2
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ab2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fa93 f1a3 	rbit	r1, r3
 8003ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ada:	6019      	str	r1, [r3, #0]
  return result;
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0a0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x6a0>
 8003b02:	e08d      	b.n	8003c20 <HAL_RCC_OscConfig+0x87c>
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	fa93 f2a3 	rbit	r2, r3
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b26:	601a      	str	r2, [r3, #0]
  return result;
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <HAL_RCC_OscConfig+0x938>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	461a      	mov	r2, r3
 8003b42:	2300      	movs	r3, #0
 8003b44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fda5 	bl	8001694 <HAL_GetTick>
 8003b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fd fda0 	bl	8001694 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d902      	bls.n	8003b66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	f000 bc55 	b.w	8004410 <HAL_RCC_OscConfig+0x106c>
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fa93 f2a3 	rbit	r2, r3
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	fa93 f2a3 	rbit	r2, r3
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bde:	2102      	movs	r1, #2
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fa93 f1a3 	rbit	r1, r3
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003bf8:	6019      	str	r1, [r3, #0]
  return result;
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d197      	bne.n	8003b50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 81a1 	beq.w	8003f78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3c:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
 8003c54:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <HAL_RCC_OscConfig+0x93c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11a      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <HAL_RCC_OscConfig+0x93c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_RCC_OscConfig+0x93c>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd fd01 	bl	8001694 <HAL_GetTick>
 8003c92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	e009      	b.n	8003cac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fd fcfc 	bl	8001694 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e3b1      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x93c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ef      	beq.n	8003c98 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x940>
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a02      	ldr	r2, [pc, #8]	; (8003cd8 <HAL_RCC_OscConfig+0x934>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6213      	str	r3, [r2, #32]
 8003cd4:	e03c      	b.n	8003d50 <HAL_RCC_OscConfig+0x9ac>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	10908120 	.word	0x10908120
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x96a>
 8003cf4:	4bc1      	ldr	r3, [pc, #772]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4ac0      	ldr	r2, [pc, #768]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	6213      	str	r3, [r2, #32]
 8003d00:	4bbe      	ldr	r3, [pc, #760]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4abd      	ldr	r2, [pc, #756]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d06:	f023 0304 	bic.w	r3, r3, #4
 8003d0a:	6213      	str	r3, [r2, #32]
 8003d0c:	e020      	b.n	8003d50 <HAL_RCC_OscConfig+0x9ac>
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x994>
 8003d1e:	4bb7      	ldr	r3, [pc, #732]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4ab6      	ldr	r2, [pc, #728]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6213      	str	r3, [r2, #32]
 8003d2a:	4bb4      	ldr	r3, [pc, #720]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4ab3      	ldr	r2, [pc, #716]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6213      	str	r3, [r2, #32]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x9ac>
 8003d38:	4bb0      	ldr	r3, [pc, #704]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4aaf      	ldr	r2, [pc, #700]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6213      	str	r3, [r2, #32]
 8003d44:	4bad      	ldr	r3, [pc, #692]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4aac      	ldr	r2, [pc, #688]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8081 	beq.w	8003e64 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fc97 	bl	8001694 <HAL_GetTick>
 8003d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fc92 	bl	8001694 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e345      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
 8003d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	fa93 f2a3 	rbit	r2, r3
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fa93 f2a3 	rbit	r2, r3
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003dca:	601a      	str	r2, [r3, #0]
  return result;
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003dd4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_OscConfig+0xa4c>
 8003dea:	4b84      	ldr	r3, [pc, #528]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	e013      	b.n	8003e18 <HAL_RCC_OscConfig+0xa74>
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003df8:	2202      	movs	r2, #2
 8003dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	fa93 f2a3 	rbit	r2, r3
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e20:	2102      	movs	r1, #2
 8003e22:	6011      	str	r1, [r2, #0]
 8003e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	fa92 f1a2 	rbit	r1, r2
 8003e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e3a:	6011      	str	r1, [r2, #0]
  return result;
 8003e3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e40:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	fab2 f282 	clz	r2, r2
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f002 021f 	and.w	r2, r2, #31
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d084      	beq.n	8003d6c <HAL_RCC_OscConfig+0x9c8>
 8003e62:	e07f      	b.n	8003f64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e64:	f7fd fc16 	bl	8001694 <HAL_GetTick>
 8003e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd fc11 	bl	8001694 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e2c4      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e8e:	2202      	movs	r2, #2
 8003e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ecc:	601a      	str	r2, [r3, #0]
  return result;
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ed6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_OscConfig+0xb4e>
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	e013      	b.n	8003f1a <HAL_RCC_OscConfig+0xb76>
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003efa:	2202      	movs	r2, #2
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	fa93 f2a3 	rbit	r2, r3
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f22:	2102      	movs	r1, #2
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	fa92 f1a2 	rbit	r1, r2
 8003f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f3c:	6011      	str	r1, [r2, #0]
  return result;
 8003f3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d184      	bne.n	8003e6e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f64:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8242 	beq.w	800440e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_RCC_OscConfig+0xc58>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	f000 8213 	beq.w	80043be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	f040 8162 	bne.w	800426e <HAL_RCC_OscConfig+0xeca>
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	fa93 f2a3 	rbit	r2, r3
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fce:	601a      	str	r2, [r3, #0]
  return result;
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fb50 	bl	8001694 <HAL_GetTick>
 8003ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff8:	e00c      	b.n	8004014 <HAL_RCC_OscConfig+0xc70>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fb48 	bl	8001694 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1fd      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
 8004014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004018:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800401c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	fa93 f2a3 	rbit	r2, r3
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004038:	601a      	str	r2, [r3, #0]
  return result;
 800403a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004042:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_RCC_OscConfig+0xcba>
 8004058:	4bb0      	ldr	r3, [pc, #704]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	e027      	b.n	80040ae <HAL_RCC_OscConfig+0xd0a>
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800408c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	4b9c      	ldr	r3, [pc, #624]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ba:	6011      	str	r1, [r2, #0]
 80040bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	fa92 f1a2 	rbit	r1, r2
 80040ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040d2:	6011      	str	r1, [r2, #0]
  return result;
 80040d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f042 0220 	orr.w	r2, r2, #32
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f002 021f 	and.w	r2, r2, #31
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d182      	bne.n	8004000 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fa:	4b88      	ldr	r3, [pc, #544]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	430b      	orrs	r3, r1
 800411c:	497f      	ldr	r1, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800412a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800412e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	fa93 f2a3 	rbit	r2, r3
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004146:	601a      	str	r2, [r3, #0]
  return result;
 8004148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004150:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800415c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	461a      	mov	r2, r3
 8004164:	2301      	movs	r3, #1
 8004166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd fa94 	bl	8001694 <HAL_GetTick>
 800416c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004170:	e009      	b.n	8004186 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd fa8f 	bl	8001694 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e144      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800418e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041aa:	601a      	str	r2, [r3, #0]
  return result;
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80041b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_OscConfig+0xe2c>
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e027      	b.n	8004220 <HAL_RCC_OscConfig+0xe7c>
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fa93 f2a3 	rbit	r2, r3
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80041fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	fa93 f2a3 	rbit	r2, r3
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004224:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004232:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	fa92 f1a2 	rbit	r1, r2
 800423c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004240:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004244:	6011      	str	r1, [r2, #0]
  return result;
 8004246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800424a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	fab2 f282 	clz	r2, r2
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f042 0220 	orr.w	r2, r2, #32
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	f002 021f 	and.w	r2, r2, #31
 8004260:	2101      	movs	r1, #1
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d082      	beq.n	8004172 <HAL_RCC_OscConfig+0xdce>
 800426c:	e0cf      	b.n	800440e <HAL_RCC_OscConfig+0x106a>
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004280:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	fa93 f2a3 	rbit	r2, r3
 800428a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004292:	601a      	str	r2, [r3, #0]
  return result;
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800429c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd f9ee 	bl	8001694 <HAL_GetTick>
 80042b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042bc:	e009      	b.n	80042d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042be:	f7fd f9e9 	bl	8001694 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e09e      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	fa93 f2a3 	rbit	r2, r3
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80042f6:	601a      	str	r2, [r3, #0]
  return result;
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004300:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d104      	bne.n	8004320 <HAL_RCC_OscConfig+0xf7c>
 8004316:	4b01      	ldr	r3, [pc, #4]	; (800431c <HAL_RCC_OscConfig+0xf78>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	e029      	b.n	8004370 <HAL_RCC_OscConfig+0xfcc>
 800431c:	40021000 	.word	0x40021000
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800434e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	fa93 f2a3 	rbit	r2, r3
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	4b2b      	ldr	r3, [pc, #172]	; (800441c <HAL_RCC_OscConfig+0x1078>)
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004374:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004382:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	fa92 f1a2 	rbit	r1, r2
 800438c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004390:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004394:	6011      	str	r1, [r2, #0]
  return result;
 8004396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800439a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	f002 021f 	and.w	r2, r2, #31
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d180      	bne.n	80042be <HAL_RCC_OscConfig+0xf1a>
 80043bc:	e027      	b.n	800440e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e01e      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_OscConfig+0x1078>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10b      	bne.n	800440a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004406:	429a      	cmp	r2, r3
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000

08004420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b09e      	sub	sp, #120	; 0x78
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e162      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b90      	ldr	r3, [pc, #576]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d910      	bls.n	8004468 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b8d      	ldr	r3, [pc, #564]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 0207 	bic.w	r2, r3, #7
 800444e:	498b      	ldr	r1, [pc, #556]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e14a      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	497f      	ldr	r1, [pc, #508]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80dc 	beq.w	800464c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d13c      	bne.n	8004516 <HAL_RCC_ClockConfig+0xf6>
 800449c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ac:	fab3 f383 	clz	r3, r3
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d102      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xa6>
 80044c0:	4b6f      	ldr	r3, [pc, #444]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	e00f      	b.n	80044e6 <HAL_RCC_ClockConfig+0xc6>
 80044c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	667b      	str	r3, [r7, #100]	; 0x64
 80044d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
 80044da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e2:	4b67      	ldr	r3, [pc, #412]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ee:	fa92 f2a2 	rbit	r2, r2
 80044f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80044f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044f6:	fab2 f282 	clz	r2, r2
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f042 0220 	orr.w	r2, r2, #32
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f002 021f 	and.w	r2, r2, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d17b      	bne.n	800460a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0f3      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d13c      	bne.n	8004598 <HAL_RCC_ClockConfig+0x178>
 800451e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800452c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_ClockConfig+0x128>
 8004542:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e00f      	b.n	8004568 <HAL_RCC_ClockConfig+0x148>
 8004548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
 8004556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455a:	643b      	str	r3, [r7, #64]	; 0x40
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004564:	4b46      	ldr	r3, [pc, #280]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800456c:	63ba      	str	r2, [r7, #56]	; 0x38
 800456e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004570:	fa92 f2a2 	rbit	r2, r2
 8004574:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	f042 0220 	orr.w	r2, r2, #32
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	f002 021f 	and.w	r2, r2, #31
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d13a      	bne.n	800460a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b2      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
 8004598:	2302      	movs	r3, #2
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x1a0>
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e00d      	b.n	80045dc <HAL_RCC_ClockConfig+0x1bc>
 80045c0:	2302      	movs	r3, #2
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	2302      	movs	r3, #2
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2202      	movs	r2, #2
 80045de:	61ba      	str	r2, [r7, #24]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	fa92 f2a2 	rbit	r2, r2
 80045e6:	617a      	str	r2, [r7, #20]
  return result;
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	fab2 f282 	clz	r2, r2
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	f042 0220 	orr.w	r2, r2, #32
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f002 021f 	and.w	r2, r2, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e079      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	491a      	ldr	r1, [pc, #104]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fd f83a 	bl	8001694 <HAL_GetTick>
 8004620:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd f836 	bl	8001694 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e061      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <HAL_RCC_ClockConfig+0x260>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d214      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 0207 	bic.w	r2, r3, #7
 8004662:	4906      	ldr	r1, [pc, #24]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_ClockConfig+0x25c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e040      	b.n	80046fe <HAL_RCC_ClockConfig+0x2de>
 800467c:	40022000 	.word	0x40022000
 8004680:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCC_ClockConfig+0x2e8>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	491a      	ldr	r1, [pc, #104]	; (8004708 <HAL_RCC_ClockConfig+0x2e8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x2e8>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4912      	ldr	r1, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x2e8>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046c2:	f000 f829 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046c6:	4601      	mov	r1, r0
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCC_ClockConfig+0x2e8>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d0:	22f0      	movs	r2, #240	; 0xf0
 80046d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	fa92 f2a2 	rbit	r2, r2
 80046da:	60fa      	str	r2, [r7, #12]
  return result;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fab2 f282 	clz	r2, r2
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	40d3      	lsrs	r3, r2
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x2ec>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	fa21 f303 	lsr.w	r3, r1, r3
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <HAL_RCC_ClockConfig+0x2f0>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_RCC_ClockConfig+0x2f4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc ff88 	bl	800160c <HAL_InitTick>
  
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3778      	adds	r7, #120	; 0x78
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	08005bf0 	.word	0x08005bf0
 8004710:	20000000 	.word	0x20000000
 8004714:	20000004 	.word	0x20000004

08004718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b08b      	sub	sp, #44	; 0x2c
 800471c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x30>
 8004742:	2b08      	cmp	r3, #8
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x36>
 8004746:	e03c      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004748:	4b24      	ldr	r3, [pc, #144]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800474a:	623b      	str	r3, [r7, #32]
      break;
 800474c:	e03c      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004754:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004758:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	fa92 f2a2 	rbit	r2, r2
 8004760:	607a      	str	r2, [r7, #4]
  return result;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	40d3      	lsrs	r3, r2
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004772:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	220f      	movs	r2, #15
 800477c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	fa92 f2a2 	rbit	r2, r2
 8004784:	60fa      	str	r2, [r7, #12]
  return result;
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	fab2 f282 	clz	r2, r2
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	40d3      	lsrs	r3, r2
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	e004      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	623b      	str	r3, [r7, #32]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80047c4:	623b      	str	r3, [r7, #32]
      break;
 80047c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c8:	6a3b      	ldr	r3, [r7, #32]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	372c      	adds	r7, #44	; 0x2c
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	007a1200 	.word	0x007a1200
 80047e0:	08005c00 	.word	0x08005c00
 80047e4:	08005c10 	.word	0x08005c10
 80047e8:	003d0900 	.word	0x003d0900

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b092      	sub	sp, #72	; 0x48
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80d4 	beq.w	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004810:	4b4e      	ldr	r3, [pc, #312]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10e      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481c:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4a4a      	ldr	r2, [pc, #296]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	61d3      	str	r3, [r2, #28]
 8004828:	4b48      	ldr	r3, [pc, #288]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004846:	4b42      	ldr	r3, [pc, #264]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a41      	ldr	r2, [pc, #260]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fc ff1f 	bl	8001694 <HAL_GetTick>
 8004856:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fc ff1b 	bl	8001694 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b64      	cmp	r3, #100	; 0x64
 8004866:	d901      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e169      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8084 	beq.w	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004894:	429a      	cmp	r2, r3
 8004896:	d07c      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004898:	4b2c      	ldr	r3, [pc, #176]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	461a      	mov	r2, r3
 80048c2:	2301      	movs	r3, #1
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	461a      	mov	r2, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ea:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04b      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fc fecb 	bl	8001694 <HAL_GetTick>
 80048fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004900:	e00a      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fc fec7 	bl	8001694 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e113      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004918:	2302      	movs	r3, #2
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	2302      	movs	r3, #2
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	61fb      	str	r3, [r7, #28]
  return result;
 8004930:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d108      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004946:	4b01      	ldr	r3, [pc, #4]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	e00d      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800494c:	40021000 	.word	0x40021000
 8004950:	40007000 	.word	0x40007000
 8004954:	10908100 	.word	0x10908100
 8004958:	2302      	movs	r3, #2
 800495a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	4b78      	ldr	r3, [pc, #480]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2202      	movs	r2, #2
 800496a:	613a      	str	r2, [r7, #16]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	fa92 f2a2 	rbit	r2, r2
 8004972:	60fa      	str	r2, [r7, #12]
  return result;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	fab2 f282 	clz	r2, r2
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	f002 021f 	and.w	r2, r2, #31
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f202 	lsl.w	r2, r1, r2
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0b7      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004992:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b66      	ldr	r3, [pc, #408]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4a65      	ldr	r2, [pc, #404]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c4:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	495d      	ldr	r1, [pc, #372]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e2:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4956      	ldr	r1, [pc, #344]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a00:	4b51      	ldr	r3, [pc, #324]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	494e      	ldr	r1, [pc, #312]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f023 0210 	bic.w	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4947      	ldr	r1, [pc, #284]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a3c:	4b42      	ldr	r3, [pc, #264]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	493f      	ldr	r1, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f023 0220 	bic.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4938      	ldr	r1, [pc, #224]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	4930      	ldr	r1, [pc, #192]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	4929      	ldr	r1, [pc, #164]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4921      	ldr	r1, [pc, #132]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	491a      	ldr	r1, [pc, #104]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	4912      	ldr	r1, [pc, #72]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	490b      	ldr	r1, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3748      	adds	r7, #72	; 0x48
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e09d      	b.n	8004c9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6e:	d009      	beq.n	8004b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fc32 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc4:	d902      	bls.n	8004bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e002      	b.n	8004bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bda:	d007      	beq.n	8004bec <HAL_SPI_Init+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 0204 	and.w	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c68:	ea42 0103 	orr.w	r1, r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004caa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cd8:	b084      	sub	sp, #16
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	f107 0014 	add.w	r0, r7, #20
 8004ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	b004      	add	sp, #16
 8004d18:	4770      	bx	lr
	...

08004d1c <__errno>:
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <__errno+0x8>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	2000000c 	.word	0x2000000c

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4d0d      	ldr	r5, [pc, #52]	; (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	; (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1b64      	subs	r4, r4, r5
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2600      	movs	r6, #0
 8004d34:	42a6      	cmp	r6, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4d0b      	ldr	r5, [pc, #44]	; (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	; (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f000 ff3a 	bl	8005bb4 <_init>
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2600      	movs	r6, #0
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d50:	4798      	blx	r3
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5a:	4798      	blx	r3
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08005c50 	.word	0x08005c50
 8004d64:	08005c50 	.word	0x08005c50
 8004d68:	08005c50 	.word	0x08005c50
 8004d6c:	08005c54 	.word	0x08005c54

08004d70 <memset>:
 8004d70:	4402      	add	r2, r0
 8004d72:	4603      	mov	r3, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d100      	bne.n	8004d7a <memset+0xa>
 8004d78:	4770      	bx	lr
 8004d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7e:	e7f9      	b.n	8004d74 <memset+0x4>

08004d80 <pow>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	ed2d 8b02 	vpush	{d8}
 8004d86:	eeb0 8a40 	vmov.f32	s16, s0
 8004d8a:	eef0 8a60 	vmov.f32	s17, s1
 8004d8e:	ec55 4b11 	vmov	r4, r5, d1
 8004d92:	f000 f865 	bl	8004e60 <__ieee754_pow>
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	ec57 6b10 	vmov	r6, r7, d0
 8004da2:	f7fb fe67 	bl	8000a74 <__aeabi_dcmpun>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d13b      	bne.n	8004e22 <pow+0xa2>
 8004daa:	ec51 0b18 	vmov	r0, r1, d8
 8004dae:	2200      	movs	r2, #0
 8004db0:	2300      	movs	r3, #0
 8004db2:	f7fb fe2d 	bl	8000a10 <__aeabi_dcmpeq>
 8004db6:	b1b8      	cbz	r0, 8004de8 <pow+0x68>
 8004db8:	2200      	movs	r2, #0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f7fb fe26 	bl	8000a10 <__aeabi_dcmpeq>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d146      	bne.n	8004e56 <pow+0xd6>
 8004dc8:	ec45 4b10 	vmov	d0, r4, r5
 8004dcc:	f000 fe61 	bl	8005a92 <finite>
 8004dd0:	b338      	cbz	r0, 8004e22 <pow+0xa2>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb fe23 	bl	8000a24 <__aeabi_dcmplt>
 8004dde:	b300      	cbz	r0, 8004e22 <pow+0xa2>
 8004de0:	f7ff ff9c 	bl	8004d1c <__errno>
 8004de4:	2322      	movs	r3, #34	; 0x22
 8004de6:	e01b      	b.n	8004e20 <pow+0xa0>
 8004de8:	ec47 6b10 	vmov	d0, r6, r7
 8004dec:	f000 fe51 	bl	8005a92 <finite>
 8004df0:	b9e0      	cbnz	r0, 8004e2c <pow+0xac>
 8004df2:	eeb0 0a48 	vmov.f32	s0, s16
 8004df6:	eef0 0a68 	vmov.f32	s1, s17
 8004dfa:	f000 fe4a 	bl	8005a92 <finite>
 8004dfe:	b1a8      	cbz	r0, 8004e2c <pow+0xac>
 8004e00:	ec45 4b10 	vmov	d0, r4, r5
 8004e04:	f000 fe45 	bl	8005a92 <finite>
 8004e08:	b180      	cbz	r0, 8004e2c <pow+0xac>
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4639      	mov	r1, r7
 8004e12:	f7fb fe2f 	bl	8000a74 <__aeabi_dcmpun>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d0e2      	beq.n	8004de0 <pow+0x60>
 8004e1a:	f7ff ff7f 	bl	8004d1c <__errno>
 8004e1e:	2321      	movs	r3, #33	; 0x21
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	ecbd 8b02 	vpop	{d8}
 8004e26:	ec47 6b10 	vmov	d0, r6, r7
 8004e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fdec 	bl	8000a10 <__aeabi_dcmpeq>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0f2      	beq.n	8004e22 <pow+0xa2>
 8004e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004e40:	eef0 0a68 	vmov.f32	s1, s17
 8004e44:	f000 fe25 	bl	8005a92 <finite>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0ea      	beq.n	8004e22 <pow+0xa2>
 8004e4c:	ec45 4b10 	vmov	d0, r4, r5
 8004e50:	f000 fe1f 	bl	8005a92 <finite>
 8004e54:	e7c3      	b.n	8004dde <pow+0x5e>
 8004e56:	4f01      	ldr	r7, [pc, #4]	; (8004e5c <pow+0xdc>)
 8004e58:	2600      	movs	r6, #0
 8004e5a:	e7e2      	b.n	8004e22 <pow+0xa2>
 8004e5c:	3ff00000 	.word	0x3ff00000

08004e60 <__ieee754_pow>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ed2d 8b06 	vpush	{d8-d10}
 8004e68:	b089      	sub	sp, #36	; 0x24
 8004e6a:	ed8d 1b00 	vstr	d1, [sp]
 8004e6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004e72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004e76:	ea58 0102 	orrs.w	r1, r8, r2
 8004e7a:	ec57 6b10 	vmov	r6, r7, d0
 8004e7e:	d115      	bne.n	8004eac <__ieee754_pow+0x4c>
 8004e80:	19b3      	adds	r3, r6, r6
 8004e82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004e86:	4152      	adcs	r2, r2
 8004e88:	4299      	cmp	r1, r3
 8004e8a:	4b89      	ldr	r3, [pc, #548]	; (80050b0 <__ieee754_pow+0x250>)
 8004e8c:	4193      	sbcs	r3, r2
 8004e8e:	f080 84d2 	bcs.w	8005836 <__ieee754_pow+0x9d6>
 8004e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e96:	4630      	mov	r0, r6
 8004e98:	4639      	mov	r1, r7
 8004e9a:	f7fb f99b 	bl	80001d4 <__adddf3>
 8004e9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ea2:	b009      	add	sp, #36	; 0x24
 8004ea4:	ecbd 8b06 	vpop	{d8-d10}
 8004ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eac:	4b81      	ldr	r3, [pc, #516]	; (80050b4 <__ieee754_pow+0x254>)
 8004eae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	ee10 aa10 	vmov	sl, s0
 8004eb8:	463d      	mov	r5, r7
 8004eba:	dc06      	bgt.n	8004eca <__ieee754_pow+0x6a>
 8004ebc:	d101      	bne.n	8004ec2 <__ieee754_pow+0x62>
 8004ebe:	2e00      	cmp	r6, #0
 8004ec0:	d1e7      	bne.n	8004e92 <__ieee754_pow+0x32>
 8004ec2:	4598      	cmp	r8, r3
 8004ec4:	dc01      	bgt.n	8004eca <__ieee754_pow+0x6a>
 8004ec6:	d10f      	bne.n	8004ee8 <__ieee754_pow+0x88>
 8004ec8:	b172      	cbz	r2, 8004ee8 <__ieee754_pow+0x88>
 8004eca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004ece:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004ed2:	ea55 050a 	orrs.w	r5, r5, sl
 8004ed6:	d1dc      	bne.n	8004e92 <__ieee754_pow+0x32>
 8004ed8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004ee2:	4152      	adcs	r2, r2
 8004ee4:	429d      	cmp	r5, r3
 8004ee6:	e7d0      	b.n	8004e8a <__ieee754_pow+0x2a>
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	da3b      	bge.n	8004f64 <__ieee754_pow+0x104>
 8004eec:	4b72      	ldr	r3, [pc, #456]	; (80050b8 <__ieee754_pow+0x258>)
 8004eee:	4598      	cmp	r8, r3
 8004ef0:	dc51      	bgt.n	8004f96 <__ieee754_pow+0x136>
 8004ef2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004ef6:	4598      	cmp	r8, r3
 8004ef8:	f340 84ac 	ble.w	8005854 <__ieee754_pow+0x9f4>
 8004efc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f04:	2b14      	cmp	r3, #20
 8004f06:	dd0f      	ble.n	8004f28 <__ieee754_pow+0xc8>
 8004f08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f0c:	fa22 f103 	lsr.w	r1, r2, r3
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f040 849d 	bne.w	8005854 <__ieee754_pow+0x9f4>
 8004f1a:	f001 0101 	and.w	r1, r1, #1
 8004f1e:	f1c1 0302 	rsb	r3, r1, #2
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	b182      	cbz	r2, 8004f48 <__ieee754_pow+0xe8>
 8004f26:	e05f      	b.n	8004fe8 <__ieee754_pow+0x188>
 8004f28:	2a00      	cmp	r2, #0
 8004f2a:	d15b      	bne.n	8004fe4 <__ieee754_pow+0x184>
 8004f2c:	f1c3 0314 	rsb	r3, r3, #20
 8004f30:	fa48 f103 	asr.w	r1, r8, r3
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	4543      	cmp	r3, r8
 8004f3a:	f040 8488 	bne.w	800584e <__ieee754_pow+0x9ee>
 8004f3e:	f001 0101 	and.w	r1, r1, #1
 8004f42:	f1c1 0302 	rsb	r3, r1, #2
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <__ieee754_pow+0x25c>)
 8004f4a:	4598      	cmp	r8, r3
 8004f4c:	d132      	bne.n	8004fb4 <__ieee754_pow+0x154>
 8004f4e:	f1b9 0f00 	cmp.w	r9, #0
 8004f52:	f280 8478 	bge.w	8005846 <__ieee754_pow+0x9e6>
 8004f56:	4959      	ldr	r1, [pc, #356]	; (80050bc <__ieee754_pow+0x25c>)
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f7fb fc19 	bl	8000794 <__aeabi_ddiv>
 8004f62:	e79c      	b.n	8004e9e <__ieee754_pow+0x3e>
 8004f64:	2300      	movs	r3, #0
 8004f66:	9304      	str	r3, [sp, #16]
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d13d      	bne.n	8004fe8 <__ieee754_pow+0x188>
 8004f6c:	4b51      	ldr	r3, [pc, #324]	; (80050b4 <__ieee754_pow+0x254>)
 8004f6e:	4598      	cmp	r8, r3
 8004f70:	d1ea      	bne.n	8004f48 <__ieee754_pow+0xe8>
 8004f72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004f76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004f7a:	ea53 030a 	orrs.w	r3, r3, sl
 8004f7e:	f000 845a 	beq.w	8005836 <__ieee754_pow+0x9d6>
 8004f82:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <__ieee754_pow+0x260>)
 8004f84:	429c      	cmp	r4, r3
 8004f86:	dd08      	ble.n	8004f9a <__ieee754_pow+0x13a>
 8004f88:	f1b9 0f00 	cmp.w	r9, #0
 8004f8c:	f2c0 8457 	blt.w	800583e <__ieee754_pow+0x9de>
 8004f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f94:	e783      	b.n	8004e9e <__ieee754_pow+0x3e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e7e5      	b.n	8004f66 <__ieee754_pow+0x106>
 8004f9a:	f1b9 0f00 	cmp.w	r9, #0
 8004f9e:	f04f 0000 	mov.w	r0, #0
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	f6bf af7a 	bge.w	8004e9e <__ieee754_pow+0x3e>
 8004faa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004fae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004fb2:	e774      	b.n	8004e9e <__ieee754_pow+0x3e>
 8004fb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004fb8:	d106      	bne.n	8004fc8 <__ieee754_pow+0x168>
 8004fba:	4632      	mov	r2, r6
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb fabd 	bl	8000540 <__aeabi_dmul>
 8004fc6:	e76a      	b.n	8004e9e <__ieee754_pow+0x3e>
 8004fc8:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <__ieee754_pow+0x264>)
 8004fca:	4599      	cmp	r9, r3
 8004fcc:	d10c      	bne.n	8004fe8 <__ieee754_pow+0x188>
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	db0a      	blt.n	8004fe8 <__ieee754_pow+0x188>
 8004fd2:	ec47 6b10 	vmov	d0, r6, r7
 8004fd6:	b009      	add	sp, #36	; 0x24
 8004fd8:	ecbd 8b06 	vpop	{d8-d10}
 8004fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	f000 bc6c 	b.w	80058bc <__ieee754_sqrt>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	ec47 6b10 	vmov	d0, r6, r7
 8004fec:	f000 fd48 	bl	8005a80 <fabs>
 8004ff0:	ec51 0b10 	vmov	r0, r1, d0
 8004ff4:	f1ba 0f00 	cmp.w	sl, #0
 8004ff8:	d129      	bne.n	800504e <__ieee754_pow+0x1ee>
 8004ffa:	b124      	cbz	r4, 8005006 <__ieee754_pow+0x1a6>
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <__ieee754_pow+0x25c>)
 8004ffe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005002:	429a      	cmp	r2, r3
 8005004:	d123      	bne.n	800504e <__ieee754_pow+0x1ee>
 8005006:	f1b9 0f00 	cmp.w	r9, #0
 800500a:	da05      	bge.n	8005018 <__ieee754_pow+0x1b8>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	2000      	movs	r0, #0
 8005012:	492a      	ldr	r1, [pc, #168]	; (80050bc <__ieee754_pow+0x25c>)
 8005014:	f7fb fbbe 	bl	8000794 <__aeabi_ddiv>
 8005018:	2d00      	cmp	r5, #0
 800501a:	f6bf af40 	bge.w	8004e9e <__ieee754_pow+0x3e>
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005024:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005028:	4323      	orrs	r3, r4
 800502a:	d108      	bne.n	800503e <__ieee754_pow+0x1de>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	f7fb f8cc 	bl	80001d0 <__aeabi_dsub>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	e78f      	b.n	8004f5e <__ieee754_pow+0xfe>
 800503e:	9b04      	ldr	r3, [sp, #16]
 8005040:	2b01      	cmp	r3, #1
 8005042:	f47f af2c 	bne.w	8004e9e <__ieee754_pow+0x3e>
 8005046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800504a:	4619      	mov	r1, r3
 800504c:	e727      	b.n	8004e9e <__ieee754_pow+0x3e>
 800504e:	0feb      	lsrs	r3, r5, #31
 8005050:	3b01      	subs	r3, #1
 8005052:	9306      	str	r3, [sp, #24]
 8005054:	9a06      	ldr	r2, [sp, #24]
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	d102      	bne.n	8005062 <__ieee754_pow+0x202>
 800505c:	4632      	mov	r2, r6
 800505e:	463b      	mov	r3, r7
 8005060:	e7e6      	b.n	8005030 <__ieee754_pow+0x1d0>
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <__ieee754_pow+0x268>)
 8005064:	4598      	cmp	r8, r3
 8005066:	f340 80fb 	ble.w	8005260 <__ieee754_pow+0x400>
 800506a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800506e:	4598      	cmp	r8, r3
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <__ieee754_pow+0x260>)
 8005072:	dd0c      	ble.n	800508e <__ieee754_pow+0x22e>
 8005074:	429c      	cmp	r4, r3
 8005076:	dc0f      	bgt.n	8005098 <__ieee754_pow+0x238>
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	da0f      	bge.n	800509e <__ieee754_pow+0x23e>
 800507e:	2000      	movs	r0, #0
 8005080:	b009      	add	sp, #36	; 0x24
 8005082:	ecbd 8b06 	vpop	{d8-d10}
 8005086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	f000 bcf0 	b.w	8005a6e <__math_oflow>
 800508e:	429c      	cmp	r4, r3
 8005090:	dbf2      	blt.n	8005078 <__ieee754_pow+0x218>
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <__ieee754_pow+0x25c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	dd19      	ble.n	80050cc <__ieee754_pow+0x26c>
 8005098:	f1b9 0f00 	cmp.w	r9, #0
 800509c:	dcef      	bgt.n	800507e <__ieee754_pow+0x21e>
 800509e:	2000      	movs	r0, #0
 80050a0:	b009      	add	sp, #36	; 0x24
 80050a2:	ecbd 8b06 	vpop	{d8-d10}
 80050a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	f000 bcd7 	b.w	8005a5c <__math_uflow>
 80050ae:	bf00      	nop
 80050b0:	fff00000 	.word	0xfff00000
 80050b4:	7ff00000 	.word	0x7ff00000
 80050b8:	433fffff 	.word	0x433fffff
 80050bc:	3ff00000 	.word	0x3ff00000
 80050c0:	3fefffff 	.word	0x3fefffff
 80050c4:	3fe00000 	.word	0x3fe00000
 80050c8:	41e00000 	.word	0x41e00000
 80050cc:	4b60      	ldr	r3, [pc, #384]	; (8005250 <__ieee754_pow+0x3f0>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	f7fb f87e 	bl	80001d0 <__aeabi_dsub>
 80050d4:	a354      	add	r3, pc, #336	; (adr r3, 8005228 <__ieee754_pow+0x3c8>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	4604      	mov	r4, r0
 80050dc:	460d      	mov	r5, r1
 80050de:	f7fb fa2f 	bl	8000540 <__aeabi_dmul>
 80050e2:	a353      	add	r3, pc, #332	; (adr r3, 8005230 <__ieee754_pow+0x3d0>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb fa26 	bl	8000540 <__aeabi_dmul>
 80050f4:	4b57      	ldr	r3, [pc, #348]	; (8005254 <__ieee754_pow+0x3f4>)
 80050f6:	4682      	mov	sl, r0
 80050f8:	468b      	mov	fp, r1
 80050fa:	2200      	movs	r2, #0
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb fa1e 	bl	8000540 <__aeabi_dmul>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	a14b      	add	r1, pc, #300	; (adr r1, 8005238 <__ieee754_pow+0x3d8>)
 800510a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800510e:	f7fb f85f 	bl	80001d0 <__aeabi_dsub>
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	f7fb fa13 	bl	8000540 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	2000      	movs	r0, #0
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <__ieee754_pow+0x3f8>)
 8005122:	f7fb f855 	bl	80001d0 <__aeabi_dsub>
 8005126:	4622      	mov	r2, r4
 8005128:	4680      	mov	r8, r0
 800512a:	4689      	mov	r9, r1
 800512c:	462b      	mov	r3, r5
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fa05 	bl	8000540 <__aeabi_dmul>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4640      	mov	r0, r8
 800513c:	4649      	mov	r1, r9
 800513e:	f7fb f9ff 	bl	8000540 <__aeabi_dmul>
 8005142:	a33f      	add	r3, pc, #252	; (adr r3, 8005240 <__ieee754_pow+0x3e0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f9fa 	bl	8000540 <__aeabi_dmul>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f83c 	bl	80001d0 <__aeabi_dsub>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4680      	mov	r8, r0
 800515e:	4689      	mov	r9, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb f836 	bl	80001d4 <__adddf3>
 8005168:	2000      	movs	r0, #0
 800516a:	4632      	mov	r2, r6
 800516c:	463b      	mov	r3, r7
 800516e:	4604      	mov	r4, r0
 8005170:	460d      	mov	r5, r1
 8005172:	f7fb f82d 	bl	80001d0 <__aeabi_dsub>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f7fb f827 	bl	80001d0 <__aeabi_dsub>
 8005182:	9b04      	ldr	r3, [sp, #16]
 8005184:	9a06      	ldr	r2, [sp, #24]
 8005186:	3b01      	subs	r3, #1
 8005188:	4313      	orrs	r3, r2
 800518a:	4682      	mov	sl, r0
 800518c:	468b      	mov	fp, r1
 800518e:	f040 81e7 	bne.w	8005560 <__ieee754_pow+0x700>
 8005192:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005248 <__ieee754_pow+0x3e8>
 8005196:	eeb0 8a47 	vmov.f32	s16, s14
 800519a:	eef0 8a67 	vmov.f32	s17, s15
 800519e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051a2:	2600      	movs	r6, #0
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ac:	f7fb f810 	bl	80001d0 <__aeabi_dsub>
 80051b0:	4622      	mov	r2, r4
 80051b2:	462b      	mov	r3, r5
 80051b4:	f7fb f9c4 	bl	8000540 <__aeabi_dmul>
 80051b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	4650      	mov	r0, sl
 80051c2:	4659      	mov	r1, fp
 80051c4:	f7fb f9bc 	bl	8000540 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4640      	mov	r0, r8
 80051ce:	4649      	mov	r1, r9
 80051d0:	f7fb f800 	bl	80001d4 <__adddf3>
 80051d4:	4632      	mov	r2, r6
 80051d6:	463b      	mov	r3, r7
 80051d8:	4680      	mov	r8, r0
 80051da:	4689      	mov	r9, r1
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb f9ae 	bl	8000540 <__aeabi_dmul>
 80051e4:	460b      	mov	r3, r1
 80051e6:	4604      	mov	r4, r0
 80051e8:	460d      	mov	r5, r1
 80051ea:	4602      	mov	r2, r0
 80051ec:	4649      	mov	r1, r9
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7fa fff0 	bl	80001d4 <__adddf3>
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <__ieee754_pow+0x3fc>)
 80051f6:	4299      	cmp	r1, r3
 80051f8:	ec45 4b19 	vmov	d9, r4, r5
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	468b      	mov	fp, r1
 8005202:	f340 82f1 	ble.w	80057e8 <__ieee754_pow+0x988>
 8005206:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800520a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800520e:	4303      	orrs	r3, r0
 8005210:	f000 81e4 	beq.w	80055dc <__ieee754_pow+0x77c>
 8005214:	ec51 0b18 	vmov	r0, r1, d8
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fc02 	bl	8000a24 <__aeabi_dcmplt>
 8005220:	3800      	subs	r0, #0
 8005222:	bf18      	it	ne
 8005224:	2001      	movne	r0, #1
 8005226:	e72b      	b.n	8005080 <__ieee754_pow+0x220>
 8005228:	60000000 	.word	0x60000000
 800522c:	3ff71547 	.word	0x3ff71547
 8005230:	f85ddf44 	.word	0xf85ddf44
 8005234:	3e54ae0b 	.word	0x3e54ae0b
 8005238:	55555555 	.word	0x55555555
 800523c:	3fd55555 	.word	0x3fd55555
 8005240:	652b82fe 	.word	0x652b82fe
 8005244:	3ff71547 	.word	0x3ff71547
 8005248:	00000000 	.word	0x00000000
 800524c:	bff00000 	.word	0xbff00000
 8005250:	3ff00000 	.word	0x3ff00000
 8005254:	3fd00000 	.word	0x3fd00000
 8005258:	3fe00000 	.word	0x3fe00000
 800525c:	408fffff 	.word	0x408fffff
 8005260:	4bd5      	ldr	r3, [pc, #852]	; (80055b8 <__ieee754_pow+0x758>)
 8005262:	402b      	ands	r3, r5
 8005264:	2200      	movs	r2, #0
 8005266:	b92b      	cbnz	r3, 8005274 <__ieee754_pow+0x414>
 8005268:	4bd4      	ldr	r3, [pc, #848]	; (80055bc <__ieee754_pow+0x75c>)
 800526a:	f7fb f969 	bl	8000540 <__aeabi_dmul>
 800526e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005272:	460c      	mov	r4, r1
 8005274:	1523      	asrs	r3, r4, #20
 8005276:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800527a:	4413      	add	r3, r2
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	4bd0      	ldr	r3, [pc, #832]	; (80055c0 <__ieee754_pow+0x760>)
 8005280:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005284:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005288:	429c      	cmp	r4, r3
 800528a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800528e:	dd08      	ble.n	80052a2 <__ieee754_pow+0x442>
 8005290:	4bcc      	ldr	r3, [pc, #816]	; (80055c4 <__ieee754_pow+0x764>)
 8005292:	429c      	cmp	r4, r3
 8005294:	f340 8162 	ble.w	800555c <__ieee754_pow+0x6fc>
 8005298:	9b05      	ldr	r3, [sp, #20]
 800529a:	3301      	adds	r3, #1
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80052a2:	2400      	movs	r4, #0
 80052a4:	00e3      	lsls	r3, r4, #3
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	4bc7      	ldr	r3, [pc, #796]	; (80055c8 <__ieee754_pow+0x768>)
 80052aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052ae:	ed93 7b00 	vldr	d7, [r3]
 80052b2:	4629      	mov	r1, r5
 80052b4:	ec53 2b17 	vmov	r2, r3, d7
 80052b8:	eeb0 9a47 	vmov.f32	s18, s14
 80052bc:	eef0 9a67 	vmov.f32	s19, s15
 80052c0:	4682      	mov	sl, r0
 80052c2:	f7fa ff85 	bl	80001d0 <__aeabi_dsub>
 80052c6:	4652      	mov	r2, sl
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	462b      	mov	r3, r5
 80052ce:	ec51 0b19 	vmov	r0, r1, d9
 80052d2:	f7fa ff7f 	bl	80001d4 <__adddf3>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	2000      	movs	r0, #0
 80052dc:	49bb      	ldr	r1, [pc, #748]	; (80055cc <__ieee754_pow+0x76c>)
 80052de:	f7fb fa59 	bl	8000794 <__aeabi_ddiv>
 80052e2:	ec41 0b1a 	vmov	d10, r0, r1
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fb f927 	bl	8000540 <__aeabi_dmul>
 80052f2:	2300      	movs	r3, #0
 80052f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80052fe:	46ab      	mov	fp, r5
 8005300:	106d      	asrs	r5, r5, #1
 8005302:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005306:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800530a:	ec41 0b18 	vmov	d8, r0, r1
 800530e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005312:	2200      	movs	r2, #0
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	f7fb f910 	bl	8000540 <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4630      	mov	r0, r6
 8005326:	4639      	mov	r1, r7
 8005328:	f7fa ff52 	bl	80001d0 <__aeabi_dsub>
 800532c:	ec53 2b19 	vmov	r2, r3, d9
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fa ff4a 	bl	80001d0 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4650      	mov	r0, sl
 8005342:	4659      	mov	r1, fp
 8005344:	f7fa ff44 	bl	80001d0 <__aeabi_dsub>
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	f7fb f8f8 	bl	8000540 <__aeabi_dmul>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	f7fa ff3a 	bl	80001d0 <__aeabi_dsub>
 800535c:	ec53 2b1a 	vmov	r2, r3, d10
 8005360:	f7fb f8ee 	bl	8000540 <__aeabi_dmul>
 8005364:	ec53 2b18 	vmov	r2, r3, d8
 8005368:	ec41 0b19 	vmov	d9, r0, r1
 800536c:	ec51 0b18 	vmov	r0, r1, d8
 8005370:	f7fb f8e6 	bl	8000540 <__aeabi_dmul>
 8005374:	a37c      	add	r3, pc, #496	; (adr r3, 8005568 <__ieee754_pow+0x708>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	4604      	mov	r4, r0
 800537c:	460d      	mov	r5, r1
 800537e:	f7fb f8df 	bl	8000540 <__aeabi_dmul>
 8005382:	a37b      	add	r3, pc, #492	; (adr r3, 8005570 <__ieee754_pow+0x710>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fa ff24 	bl	80001d4 <__adddf3>
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	f7fb f8d6 	bl	8000540 <__aeabi_dmul>
 8005394:	a378      	add	r3, pc, #480	; (adr r3, 8005578 <__ieee754_pow+0x718>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fa ff1b 	bl	80001d4 <__adddf3>
 800539e:	4622      	mov	r2, r4
 80053a0:	462b      	mov	r3, r5
 80053a2:	f7fb f8cd 	bl	8000540 <__aeabi_dmul>
 80053a6:	a376      	add	r3, pc, #472	; (adr r3, 8005580 <__ieee754_pow+0x720>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fa ff12 	bl	80001d4 <__adddf3>
 80053b0:	4622      	mov	r2, r4
 80053b2:	462b      	mov	r3, r5
 80053b4:	f7fb f8c4 	bl	8000540 <__aeabi_dmul>
 80053b8:	a373      	add	r3, pc, #460	; (adr r3, 8005588 <__ieee754_pow+0x728>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff09 	bl	80001d4 <__adddf3>
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f7fb f8bb 	bl	8000540 <__aeabi_dmul>
 80053ca:	a371      	add	r3, pc, #452	; (adr r3, 8005590 <__ieee754_pow+0x730>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa ff00 	bl	80001d4 <__adddf3>
 80053d4:	4622      	mov	r2, r4
 80053d6:	4606      	mov	r6, r0
 80053d8:	460f      	mov	r7, r1
 80053da:	462b      	mov	r3, r5
 80053dc:	4620      	mov	r0, r4
 80053de:	4629      	mov	r1, r5
 80053e0:	f7fb f8ae 	bl	8000540 <__aeabi_dmul>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4630      	mov	r0, r6
 80053ea:	4639      	mov	r1, r7
 80053ec:	f7fb f8a8 	bl	8000540 <__aeabi_dmul>
 80053f0:	4642      	mov	r2, r8
 80053f2:	4604      	mov	r4, r0
 80053f4:	460d      	mov	r5, r1
 80053f6:	464b      	mov	r3, r9
 80053f8:	ec51 0b18 	vmov	r0, r1, d8
 80053fc:	f7fa feea 	bl	80001d4 <__adddf3>
 8005400:	ec53 2b19 	vmov	r2, r3, d9
 8005404:	f7fb f89c 	bl	8000540 <__aeabi_dmul>
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	f7fa fee2 	bl	80001d4 <__adddf3>
 8005410:	4642      	mov	r2, r8
 8005412:	4682      	mov	sl, r0
 8005414:	468b      	mov	fp, r1
 8005416:	464b      	mov	r3, r9
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb f890 	bl	8000540 <__aeabi_dmul>
 8005420:	4b6b      	ldr	r3, [pc, #428]	; (80055d0 <__ieee754_pow+0x770>)
 8005422:	2200      	movs	r2, #0
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	f7fa fed4 	bl	80001d4 <__adddf3>
 800542c:	4652      	mov	r2, sl
 800542e:	465b      	mov	r3, fp
 8005430:	f7fa fed0 	bl	80001d4 <__adddf3>
 8005434:	2000      	movs	r0, #0
 8005436:	4604      	mov	r4, r0
 8005438:	460d      	mov	r5, r1
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f7fb f87d 	bl	8000540 <__aeabi_dmul>
 8005446:	4b62      	ldr	r3, [pc, #392]	; (80055d0 <__ieee754_pow+0x770>)
 8005448:	4680      	mov	r8, r0
 800544a:	4689      	mov	r9, r1
 800544c:	2200      	movs	r2, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fa febd 	bl	80001d0 <__aeabi_dsub>
 8005456:	4632      	mov	r2, r6
 8005458:	463b      	mov	r3, r7
 800545a:	f7fa feb9 	bl	80001d0 <__aeabi_dsub>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4650      	mov	r0, sl
 8005464:	4659      	mov	r1, fp
 8005466:	f7fa feb3 	bl	80001d0 <__aeabi_dsub>
 800546a:	ec53 2b18 	vmov	r2, r3, d8
 800546e:	f7fb f867 	bl	8000540 <__aeabi_dmul>
 8005472:	4622      	mov	r2, r4
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	462b      	mov	r3, r5
 800547a:	ec51 0b19 	vmov	r0, r1, d9
 800547e:	f7fb f85f 	bl	8000540 <__aeabi_dmul>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fa fea3 	bl	80001d4 <__adddf3>
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4640      	mov	r0, r8
 8005498:	4649      	mov	r1, r9
 800549a:	f7fa fe9b 	bl	80001d4 <__adddf3>
 800549e:	a33e      	add	r3, pc, #248	; (adr r3, 8005598 <__ieee754_pow+0x738>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	2000      	movs	r0, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	460d      	mov	r5, r1
 80054aa:	f7fb f849 	bl	8000540 <__aeabi_dmul>
 80054ae:	4642      	mov	r2, r8
 80054b0:	ec41 0b18 	vmov	d8, r0, r1
 80054b4:	464b      	mov	r3, r9
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fa fe89 	bl	80001d0 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fa fe83 	bl	80001d0 <__aeabi_dsub>
 80054ca:	a335      	add	r3, pc, #212	; (adr r3, 80055a0 <__ieee754_pow+0x740>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fb f836 	bl	8000540 <__aeabi_dmul>
 80054d4:	a334      	add	r3, pc, #208	; (adr r3, 80055a8 <__ieee754_pow+0x748>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	4606      	mov	r6, r0
 80054dc:	460f      	mov	r7, r1
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb f82d 	bl	8000540 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fa fe71 	bl	80001d4 <__adddf3>
 80054f2:	9a07      	ldr	r2, [sp, #28]
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <__ieee754_pow+0x774>)
 80054f6:	4413      	add	r3, r2
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fa fe6a 	bl	80001d4 <__adddf3>
 8005500:	4682      	mov	sl, r0
 8005502:	9805      	ldr	r0, [sp, #20]
 8005504:	468b      	mov	fp, r1
 8005506:	f7fa ffb1 	bl	800046c <__aeabi_i2d>
 800550a:	9a07      	ldr	r2, [sp, #28]
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <__ieee754_pow+0x778>)
 800550e:	4413      	add	r3, r2
 8005510:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	4652      	mov	r2, sl
 800551a:	465b      	mov	r3, fp
 800551c:	ec51 0b18 	vmov	r0, r1, d8
 8005520:	f7fa fe58 	bl	80001d4 <__adddf3>
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	f7fa fe54 	bl	80001d4 <__adddf3>
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	f7fa fe50 	bl	80001d4 <__adddf3>
 8005534:	2000      	movs	r0, #0
 8005536:	4632      	mov	r2, r6
 8005538:	463b      	mov	r3, r7
 800553a:	4604      	mov	r4, r0
 800553c:	460d      	mov	r5, r1
 800553e:	f7fa fe47 	bl	80001d0 <__aeabi_dsub>
 8005542:	4642      	mov	r2, r8
 8005544:	464b      	mov	r3, r9
 8005546:	f7fa fe43 	bl	80001d0 <__aeabi_dsub>
 800554a:	ec53 2b18 	vmov	r2, r3, d8
 800554e:	f7fa fe3f 	bl	80001d0 <__aeabi_dsub>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4650      	mov	r0, sl
 8005558:	4659      	mov	r1, fp
 800555a:	e610      	b.n	800517e <__ieee754_pow+0x31e>
 800555c:	2401      	movs	r4, #1
 800555e:	e6a1      	b.n	80052a4 <__ieee754_pow+0x444>
 8005560:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80055b0 <__ieee754_pow+0x750>
 8005564:	e617      	b.n	8005196 <__ieee754_pow+0x336>
 8005566:	bf00      	nop
 8005568:	4a454eef 	.word	0x4a454eef
 800556c:	3fca7e28 	.word	0x3fca7e28
 8005570:	93c9db65 	.word	0x93c9db65
 8005574:	3fcd864a 	.word	0x3fcd864a
 8005578:	a91d4101 	.word	0xa91d4101
 800557c:	3fd17460 	.word	0x3fd17460
 8005580:	518f264d 	.word	0x518f264d
 8005584:	3fd55555 	.word	0x3fd55555
 8005588:	db6fabff 	.word	0xdb6fabff
 800558c:	3fdb6db6 	.word	0x3fdb6db6
 8005590:	33333303 	.word	0x33333303
 8005594:	3fe33333 	.word	0x3fe33333
 8005598:	e0000000 	.word	0xe0000000
 800559c:	3feec709 	.word	0x3feec709
 80055a0:	dc3a03fd 	.word	0xdc3a03fd
 80055a4:	3feec709 	.word	0x3feec709
 80055a8:	145b01f5 	.word	0x145b01f5
 80055ac:	be3e2fe0 	.word	0xbe3e2fe0
 80055b0:	00000000 	.word	0x00000000
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	7ff00000 	.word	0x7ff00000
 80055bc:	43400000 	.word	0x43400000
 80055c0:	0003988e 	.word	0x0003988e
 80055c4:	000bb679 	.word	0x000bb679
 80055c8:	08005c20 	.word	0x08005c20
 80055cc:	3ff00000 	.word	0x3ff00000
 80055d0:	40080000 	.word	0x40080000
 80055d4:	08005c40 	.word	0x08005c40
 80055d8:	08005c30 	.word	0x08005c30
 80055dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80058b4 <__ieee754_pow+0xa54>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fdf5 	bl	80001d4 <__adddf3>
 80055ea:	4622      	mov	r2, r4
 80055ec:	ec41 0b1a 	vmov	d10, r0, r1
 80055f0:	462b      	mov	r3, r5
 80055f2:	4630      	mov	r0, r6
 80055f4:	4639      	mov	r1, r7
 80055f6:	f7fa fdeb 	bl	80001d0 <__aeabi_dsub>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	ec51 0b1a 	vmov	r0, r1, d10
 8005602:	f7fb fa2d 	bl	8000a60 <__aeabi_dcmpgt>
 8005606:	2800      	cmp	r0, #0
 8005608:	f47f ae04 	bne.w	8005214 <__ieee754_pow+0x3b4>
 800560c:	4aa4      	ldr	r2, [pc, #656]	; (80058a0 <__ieee754_pow+0xa40>)
 800560e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005612:	4293      	cmp	r3, r2
 8005614:	f340 8108 	ble.w	8005828 <__ieee754_pow+0x9c8>
 8005618:	151b      	asrs	r3, r3, #20
 800561a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800561e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005622:	fa4a f303 	asr.w	r3, sl, r3
 8005626:	445b      	add	r3, fp
 8005628:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800562c:	4e9d      	ldr	r6, [pc, #628]	; (80058a4 <__ieee754_pow+0xa44>)
 800562e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005632:	4116      	asrs	r6, r2
 8005634:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005638:	2000      	movs	r0, #0
 800563a:	ea23 0106 	bic.w	r1, r3, r6
 800563e:	f1c2 0214 	rsb	r2, r2, #20
 8005642:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005646:	fa4a fa02 	asr.w	sl, sl, r2
 800564a:	f1bb 0f00 	cmp.w	fp, #0
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4620      	mov	r0, r4
 8005654:	4629      	mov	r1, r5
 8005656:	bfb8      	it	lt
 8005658:	f1ca 0a00 	rsblt	sl, sl, #0
 800565c:	f7fa fdb8 	bl	80001d0 <__aeabi_dsub>
 8005660:	ec41 0b19 	vmov	d9, r0, r1
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	ec51 0b19 	vmov	r0, r1, d9
 800566c:	f7fa fdb2 	bl	80001d4 <__adddf3>
 8005670:	a37b      	add	r3, pc, #492	; (adr r3, 8005860 <__ieee754_pow+0xa00>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	2000      	movs	r0, #0
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	f7fa ff60 	bl	8000540 <__aeabi_dmul>
 8005680:	ec53 2b19 	vmov	r2, r3, d9
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	4620      	mov	r0, r4
 800568a:	4629      	mov	r1, r5
 800568c:	f7fa fda0 	bl	80001d0 <__aeabi_dsub>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	f7fa fd9a 	bl	80001d0 <__aeabi_dsub>
 800569c:	a372      	add	r3, pc, #456	; (adr r3, 8005868 <__ieee754_pow+0xa08>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa ff4d 	bl	8000540 <__aeabi_dmul>
 80056a6:	a372      	add	r3, pc, #456	; (adr r3, 8005870 <__ieee754_pow+0xa10>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa ff44 	bl	8000540 <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fa fd88 	bl	80001d4 <__adddf3>
 80056c4:	4604      	mov	r4, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fa fd80 	bl	80001d4 <__adddf3>
 80056d4:	4632      	mov	r2, r6
 80056d6:	463b      	mov	r3, r7
 80056d8:	4680      	mov	r8, r0
 80056da:	4689      	mov	r9, r1
 80056dc:	f7fa fd78 	bl	80001d0 <__aeabi_dsub>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fa fd72 	bl	80001d0 <__aeabi_dsub>
 80056ec:	4642      	mov	r2, r8
 80056ee:	4606      	mov	r6, r0
 80056f0:	460f      	mov	r7, r1
 80056f2:	464b      	mov	r3, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fa ff22 	bl	8000540 <__aeabi_dmul>
 80056fc:	a35e      	add	r3, pc, #376	; (adr r3, 8005878 <__ieee754_pow+0xa18>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	4604      	mov	r4, r0
 8005704:	460d      	mov	r5, r1
 8005706:	f7fa ff1b 	bl	8000540 <__aeabi_dmul>
 800570a:	a35d      	add	r3, pc, #372	; (adr r3, 8005880 <__ieee754_pow+0xa20>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fd5e 	bl	80001d0 <__aeabi_dsub>
 8005714:	4622      	mov	r2, r4
 8005716:	462b      	mov	r3, r5
 8005718:	f7fa ff12 	bl	8000540 <__aeabi_dmul>
 800571c:	a35a      	add	r3, pc, #360	; (adr r3, 8005888 <__ieee754_pow+0xa28>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fd57 	bl	80001d4 <__adddf3>
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f7fa ff09 	bl	8000540 <__aeabi_dmul>
 800572e:	a358      	add	r3, pc, #352	; (adr r3, 8005890 <__ieee754_pow+0xa30>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f7fa fd4c 	bl	80001d0 <__aeabi_dsub>
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	f7fa ff00 	bl	8000540 <__aeabi_dmul>
 8005740:	a355      	add	r3, pc, #340	; (adr r3, 8005898 <__ieee754_pow+0xa38>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fd45 	bl	80001d4 <__adddf3>
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f7fa fef7 	bl	8000540 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f7fa fd39 	bl	80001d0 <__aeabi_dsub>
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4640      	mov	r0, r8
 8005768:	4649      	mov	r1, r9
 800576a:	f7fa fee9 	bl	8000540 <__aeabi_dmul>
 800576e:	2200      	movs	r2, #0
 8005770:	ec41 0b19 	vmov	d9, r0, r1
 8005774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fa fd28 	bl	80001d0 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	ec51 0b19 	vmov	r0, r1, d9
 8005788:	f7fb f804 	bl	8000794 <__aeabi_ddiv>
 800578c:	4632      	mov	r2, r6
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	463b      	mov	r3, r7
 8005794:	4640      	mov	r0, r8
 8005796:	4649      	mov	r1, r9
 8005798:	f7fa fed2 	bl	8000540 <__aeabi_dmul>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	f7fa fd18 	bl	80001d4 <__adddf3>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fa fd10 	bl	80001d0 <__aeabi_dsub>
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	f7fa fd0c 	bl	80001d0 <__aeabi_dsub>
 80057b8:	460b      	mov	r3, r1
 80057ba:	4602      	mov	r2, r0
 80057bc:	493a      	ldr	r1, [pc, #232]	; (80058a8 <__ieee754_pow+0xa48>)
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fa fd06 	bl	80001d0 <__aeabi_dsub>
 80057c4:	ec41 0b10 	vmov	d0, r0, r1
 80057c8:	ee10 3a90 	vmov	r3, s1
 80057cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80057d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d4:	da2b      	bge.n	800582e <__ieee754_pow+0x9ce>
 80057d6:	4650      	mov	r0, sl
 80057d8:	f000 f966 	bl	8005aa8 <scalbn>
 80057dc:	ec51 0b10 	vmov	r0, r1, d0
 80057e0:	ec53 2b18 	vmov	r2, r3, d8
 80057e4:	f7ff bbed 	b.w	8004fc2 <__ieee754_pow+0x162>
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <__ieee754_pow+0xa4c>)
 80057ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80057ee:	429e      	cmp	r6, r3
 80057f0:	f77f af0c 	ble.w	800560c <__ieee754_pow+0x7ac>
 80057f4:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <__ieee754_pow+0xa50>)
 80057f6:	440b      	add	r3, r1
 80057f8:	4303      	orrs	r3, r0
 80057fa:	d009      	beq.n	8005810 <__ieee754_pow+0x9b0>
 80057fc:	ec51 0b18 	vmov	r0, r1, d8
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	f7fb f90e 	bl	8000a24 <__aeabi_dcmplt>
 8005808:	3800      	subs	r0, #0
 800580a:	bf18      	it	ne
 800580c:	2001      	movne	r0, #1
 800580e:	e447      	b.n	80050a0 <__ieee754_pow+0x240>
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa fcdc 	bl	80001d0 <__aeabi_dsub>
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	f7fb f916 	bl	8000a4c <__aeabi_dcmpge>
 8005820:	2800      	cmp	r0, #0
 8005822:	f43f aef3 	beq.w	800560c <__ieee754_pow+0x7ac>
 8005826:	e7e9      	b.n	80057fc <__ieee754_pow+0x99c>
 8005828:	f04f 0a00 	mov.w	sl, #0
 800582c:	e71a      	b.n	8005664 <__ieee754_pow+0x804>
 800582e:	ec51 0b10 	vmov	r0, r1, d0
 8005832:	4619      	mov	r1, r3
 8005834:	e7d4      	b.n	80057e0 <__ieee754_pow+0x980>
 8005836:	491c      	ldr	r1, [pc, #112]	; (80058a8 <__ieee754_pow+0xa48>)
 8005838:	2000      	movs	r0, #0
 800583a:	f7ff bb30 	b.w	8004e9e <__ieee754_pow+0x3e>
 800583e:	2000      	movs	r0, #0
 8005840:	2100      	movs	r1, #0
 8005842:	f7ff bb2c 	b.w	8004e9e <__ieee754_pow+0x3e>
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7ff bb28 	b.w	8004e9e <__ieee754_pow+0x3e>
 800584e:	9204      	str	r2, [sp, #16]
 8005850:	f7ff bb7a 	b.w	8004f48 <__ieee754_pow+0xe8>
 8005854:	2300      	movs	r3, #0
 8005856:	f7ff bb64 	b.w	8004f22 <__ieee754_pow+0xc2>
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
 8005860:	00000000 	.word	0x00000000
 8005864:	3fe62e43 	.word	0x3fe62e43
 8005868:	fefa39ef 	.word	0xfefa39ef
 800586c:	3fe62e42 	.word	0x3fe62e42
 8005870:	0ca86c39 	.word	0x0ca86c39
 8005874:	be205c61 	.word	0xbe205c61
 8005878:	72bea4d0 	.word	0x72bea4d0
 800587c:	3e663769 	.word	0x3e663769
 8005880:	c5d26bf1 	.word	0xc5d26bf1
 8005884:	3ebbbd41 	.word	0x3ebbbd41
 8005888:	af25de2c 	.word	0xaf25de2c
 800588c:	3f11566a 	.word	0x3f11566a
 8005890:	16bebd93 	.word	0x16bebd93
 8005894:	3f66c16c 	.word	0x3f66c16c
 8005898:	5555553e 	.word	0x5555553e
 800589c:	3fc55555 	.word	0x3fc55555
 80058a0:	3fe00000 	.word	0x3fe00000
 80058a4:	000fffff 	.word	0x000fffff
 80058a8:	3ff00000 	.word	0x3ff00000
 80058ac:	4090cbff 	.word	0x4090cbff
 80058b0:	3f6f3400 	.word	0x3f6f3400
 80058b4:	652b82fe 	.word	0x652b82fe
 80058b8:	3c971547 	.word	0x3c971547

080058bc <__ieee754_sqrt>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	ec55 4b10 	vmov	r4, r5, d0
 80058c4:	4e55      	ldr	r6, [pc, #340]	; (8005a1c <__ieee754_sqrt+0x160>)
 80058c6:	43ae      	bics	r6, r5
 80058c8:	ee10 0a10 	vmov	r0, s0
 80058cc:	ee10 3a10 	vmov	r3, s0
 80058d0:	462a      	mov	r2, r5
 80058d2:	4629      	mov	r1, r5
 80058d4:	d110      	bne.n	80058f8 <__ieee754_sqrt+0x3c>
 80058d6:	ee10 2a10 	vmov	r2, s0
 80058da:	462b      	mov	r3, r5
 80058dc:	f7fa fe30 	bl	8000540 <__aeabi_dmul>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc74 	bl	80001d4 <__adddf3>
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	ec45 4b10 	vmov	d0, r4, r5
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	dc10      	bgt.n	800591e <__ieee754_sqrt+0x62>
 80058fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005900:	4330      	orrs	r0, r6
 8005902:	d0f5      	beq.n	80058f0 <__ieee754_sqrt+0x34>
 8005904:	b15d      	cbz	r5, 800591e <__ieee754_sqrt+0x62>
 8005906:	ee10 2a10 	vmov	r2, s0
 800590a:	462b      	mov	r3, r5
 800590c:	ee10 0a10 	vmov	r0, s0
 8005910:	f7fa fc5e 	bl	80001d0 <__aeabi_dsub>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	f7fa ff3c 	bl	8000794 <__aeabi_ddiv>
 800591c:	e7e6      	b.n	80058ec <__ieee754_sqrt+0x30>
 800591e:	1512      	asrs	r2, r2, #20
 8005920:	d074      	beq.n	8005a0c <__ieee754_sqrt+0x150>
 8005922:	07d4      	lsls	r4, r2, #31
 8005924:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005928:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800592c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005930:	bf5e      	ittt	pl
 8005932:	0fda      	lsrpl	r2, r3, #31
 8005934:	005b      	lslpl	r3, r3, #1
 8005936:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800593a:	2400      	movs	r4, #0
 800593c:	0fda      	lsrs	r2, r3, #31
 800593e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005942:	107f      	asrs	r7, r7, #1
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	2516      	movs	r5, #22
 8005948:	4620      	mov	r0, r4
 800594a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800594e:	1886      	adds	r6, r0, r2
 8005950:	428e      	cmp	r6, r1
 8005952:	bfde      	ittt	le
 8005954:	1b89      	suble	r1, r1, r6
 8005956:	18b0      	addle	r0, r6, r2
 8005958:	18a4      	addle	r4, r4, r2
 800595a:	0049      	lsls	r1, r1, #1
 800595c:	3d01      	subs	r5, #1
 800595e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005962:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005966:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800596a:	d1f0      	bne.n	800594e <__ieee754_sqrt+0x92>
 800596c:	462a      	mov	r2, r5
 800596e:	f04f 0e20 	mov.w	lr, #32
 8005972:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005976:	4281      	cmp	r1, r0
 8005978:	eb06 0c05 	add.w	ip, r6, r5
 800597c:	dc02      	bgt.n	8005984 <__ieee754_sqrt+0xc8>
 800597e:	d113      	bne.n	80059a8 <__ieee754_sqrt+0xec>
 8005980:	459c      	cmp	ip, r3
 8005982:	d811      	bhi.n	80059a8 <__ieee754_sqrt+0xec>
 8005984:	f1bc 0f00 	cmp.w	ip, #0
 8005988:	eb0c 0506 	add.w	r5, ip, r6
 800598c:	da43      	bge.n	8005a16 <__ieee754_sqrt+0x15a>
 800598e:	2d00      	cmp	r5, #0
 8005990:	db41      	blt.n	8005a16 <__ieee754_sqrt+0x15a>
 8005992:	f100 0801 	add.w	r8, r0, #1
 8005996:	1a09      	subs	r1, r1, r0
 8005998:	459c      	cmp	ip, r3
 800599a:	bf88      	it	hi
 800599c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80059a0:	eba3 030c 	sub.w	r3, r3, ip
 80059a4:	4432      	add	r2, r6
 80059a6:	4640      	mov	r0, r8
 80059a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80059ac:	f1be 0e01 	subs.w	lr, lr, #1
 80059b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80059b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059bc:	d1db      	bne.n	8005976 <__ieee754_sqrt+0xba>
 80059be:	430b      	orrs	r3, r1
 80059c0:	d006      	beq.n	80059d0 <__ieee754_sqrt+0x114>
 80059c2:	1c50      	adds	r0, r2, #1
 80059c4:	bf13      	iteet	ne
 80059c6:	3201      	addne	r2, #1
 80059c8:	3401      	addeq	r4, #1
 80059ca:	4672      	moveq	r2, lr
 80059cc:	f022 0201 	bicne.w	r2, r2, #1
 80059d0:	1063      	asrs	r3, r4, #1
 80059d2:	0852      	lsrs	r2, r2, #1
 80059d4:	07e1      	lsls	r1, r4, #31
 80059d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80059da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80059de:	bf48      	it	mi
 80059e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80059e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80059e8:	4614      	mov	r4, r2
 80059ea:	e781      	b.n	80058f0 <__ieee754_sqrt+0x34>
 80059ec:	0ad9      	lsrs	r1, r3, #11
 80059ee:	3815      	subs	r0, #21
 80059f0:	055b      	lsls	r3, r3, #21
 80059f2:	2900      	cmp	r1, #0
 80059f4:	d0fa      	beq.n	80059ec <__ieee754_sqrt+0x130>
 80059f6:	02cd      	lsls	r5, r1, #11
 80059f8:	d50a      	bpl.n	8005a10 <__ieee754_sqrt+0x154>
 80059fa:	f1c2 0420 	rsb	r4, r2, #32
 80059fe:	fa23 f404 	lsr.w	r4, r3, r4
 8005a02:	1e55      	subs	r5, r2, #1
 8005a04:	4093      	lsls	r3, r2
 8005a06:	4321      	orrs	r1, r4
 8005a08:	1b42      	subs	r2, r0, r5
 8005a0a:	e78a      	b.n	8005922 <__ieee754_sqrt+0x66>
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	e7f0      	b.n	80059f2 <__ieee754_sqrt+0x136>
 8005a10:	0049      	lsls	r1, r1, #1
 8005a12:	3201      	adds	r2, #1
 8005a14:	e7ef      	b.n	80059f6 <__ieee754_sqrt+0x13a>
 8005a16:	4680      	mov	r8, r0
 8005a18:	e7bd      	b.n	8005996 <__ieee754_sqrt+0xda>
 8005a1a:	bf00      	nop
 8005a1c:	7ff00000 	.word	0x7ff00000

08005a20 <with_errno>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	460d      	mov	r5, r1
 8005a26:	4616      	mov	r6, r2
 8005a28:	f7ff f978 	bl	8004d1c <__errno>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	6006      	str	r6, [r0, #0]
 8005a30:	4620      	mov	r0, r4
 8005a32:	bd70      	pop	{r4, r5, r6, pc}

08005a34 <xflow>:
 8005a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a36:	4614      	mov	r4, r2
 8005a38:	461d      	mov	r5, r3
 8005a3a:	b108      	cbz	r0, 8005a40 <xflow+0xc>
 8005a3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	e9cd 2300 	strd	r2, r3, [sp]
 8005a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7fa fd78 	bl	8000540 <__aeabi_dmul>
 8005a50:	2222      	movs	r2, #34	; 0x22
 8005a52:	b003      	add	sp, #12
 8005a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a58:	f7ff bfe2 	b.w	8005a20 <with_errno>

08005a5c <__math_uflow>:
 8005a5c:	b508      	push	{r3, lr}
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a64:	f7ff ffe6 	bl	8005a34 <xflow>
 8005a68:	ec41 0b10 	vmov	d0, r0, r1
 8005a6c:	bd08      	pop	{r3, pc}

08005a6e <__math_oflow>:
 8005a6e:	b508      	push	{r3, lr}
 8005a70:	2200      	movs	r2, #0
 8005a72:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a76:	f7ff ffdd 	bl	8005a34 <xflow>
 8005a7a:	ec41 0b10 	vmov	d0, r0, r1
 8005a7e:	bd08      	pop	{r3, pc}

08005a80 <fabs>:
 8005a80:	ec51 0b10 	vmov	r0, r1, d0
 8005a84:	ee10 2a10 	vmov	r2, s0
 8005a88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a8c:	ec43 2b10 	vmov	d0, r2, r3
 8005a90:	4770      	bx	lr

08005a92 <finite>:
 8005a92:	b082      	sub	sp, #8
 8005a94:	ed8d 0b00 	vstr	d0, [sp]
 8005a98:	9801      	ldr	r0, [sp, #4]
 8005a9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005aa2:	0fc0      	lsrs	r0, r0, #31
 8005aa4:	b002      	add	sp, #8
 8005aa6:	4770      	bx	lr

08005aa8 <scalbn>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	ec55 4b10 	vmov	r4, r5, d0
 8005aae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	b99a      	cbnz	r2, 8005ae0 <scalbn+0x38>
 8005ab8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005abc:	4323      	orrs	r3, r4
 8005abe:	d036      	beq.n	8005b2e <scalbn+0x86>
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <scalbn+0x100>)
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	ee10 0a10 	vmov	r0, s0
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f7fa fd39 	bl	8000540 <__aeabi_dmul>
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <scalbn+0x104>)
 8005ad0:	429e      	cmp	r6, r3
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	460d      	mov	r5, r1
 8005ad6:	da10      	bge.n	8005afa <scalbn+0x52>
 8005ad8:	a32b      	add	r3, pc, #172	; (adr r3, 8005b88 <scalbn+0xe0>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	e03a      	b.n	8005b56 <scalbn+0xae>
 8005ae0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005ae4:	428a      	cmp	r2, r1
 8005ae6:	d10c      	bne.n	8005b02 <scalbn+0x5a>
 8005ae8:	ee10 2a10 	vmov	r2, s0
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa fb70 	bl	80001d4 <__adddf3>
 8005af4:	4604      	mov	r4, r0
 8005af6:	460d      	mov	r5, r1
 8005af8:	e019      	b.n	8005b2e <scalbn+0x86>
 8005afa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005afe:	460b      	mov	r3, r1
 8005b00:	3a36      	subs	r2, #54	; 0x36
 8005b02:	4432      	add	r2, r6
 8005b04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	dd08      	ble.n	8005b1e <scalbn+0x76>
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	a120      	add	r1, pc, #128	; (adr r1, 8005b90 <scalbn+0xe8>)
 8005b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b14:	da1c      	bge.n	8005b50 <scalbn+0xa8>
 8005b16:	a120      	add	r1, pc, #128	; (adr r1, 8005b98 <scalbn+0xf0>)
 8005b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b1c:	e018      	b.n	8005b50 <scalbn+0xa8>
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	dd08      	ble.n	8005b34 <scalbn+0x8c>
 8005b22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b2e:	ec45 4b10 	vmov	d0, r4, r5
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b38:	da19      	bge.n	8005b6e <scalbn+0xc6>
 8005b3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b3e:	429e      	cmp	r6, r3
 8005b40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005b44:	dd0a      	ble.n	8005b5c <scalbn+0xb4>
 8005b46:	a112      	add	r1, pc, #72	; (adr r1, 8005b90 <scalbn+0xe8>)
 8005b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e2      	bne.n	8005b16 <scalbn+0x6e>
 8005b50:	a30f      	add	r3, pc, #60	; (adr r3, 8005b90 <scalbn+0xe8>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fcf3 	bl	8000540 <__aeabi_dmul>
 8005b5a:	e7cb      	b.n	8005af4 <scalbn+0x4c>
 8005b5c:	a10a      	add	r1, pc, #40	; (adr r1, 8005b88 <scalbn+0xe0>)
 8005b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0b8      	beq.n	8005ad8 <scalbn+0x30>
 8005b66:	a10e      	add	r1, pc, #56	; (adr r1, 8005ba0 <scalbn+0xf8>)
 8005b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b6c:	e7b4      	b.n	8005ad8 <scalbn+0x30>
 8005b6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b72:	3236      	adds	r2, #54	; 0x36
 8005b74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <scalbn+0x108>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	e7e8      	b.n	8005b56 <scalbn+0xae>
 8005b84:	f3af 8000 	nop.w
 8005b88:	c2f8f359 	.word	0xc2f8f359
 8005b8c:	01a56e1f 	.word	0x01a56e1f
 8005b90:	8800759c 	.word	0x8800759c
 8005b94:	7e37e43c 	.word	0x7e37e43c
 8005b98:	8800759c 	.word	0x8800759c
 8005b9c:	fe37e43c 	.word	0xfe37e43c
 8005ba0:	c2f8f359 	.word	0xc2f8f359
 8005ba4:	81a56e1f 	.word	0x81a56e1f
 8005ba8:	43500000 	.word	0x43500000
 8005bac:	ffff3cb0 	.word	0xffff3cb0
 8005bb0:	3c900000 	.word	0x3c900000

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
