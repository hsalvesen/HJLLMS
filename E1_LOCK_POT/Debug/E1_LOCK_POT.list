
E1_LOCK_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009518  08009518  00019518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08009620  08009620  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009620  08009620  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          000004c8  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000570  20000570  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160bf  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002acb  00000000  00000000  00036197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f978  00000000  00000000  0003b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001874d  00000000  00000000  0005aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f1a  00000000  00000000  00073165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013507f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a0  00000000  00000000  001350d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094fc 	.word	0x080094fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080094fc 	.word	0x080094fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <enable_clocks+0x1c>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <enable_clocks+0x1c>)
 8000b92:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000b96:	6153      	str	r3, [r2, #20]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <initialise_board+0x20>)
 8000bb0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f245 5255 	movw	r2, #21845	; 0x5555
 8000bb8:	801a      	strh	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	48001002 	.word	0x48001002

08000bcc <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_TIM_IC_CaptureCallback+0x62>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7f1b      	ldrb	r3, [r3, #28]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d123      	bne.n	8000c2e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000be6:	2100      	movs	r1, #0
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f006 fa43 	bl	8007074 <HAL_TIM_ReadCapturedValue>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f002 ffbf 	bl	8003b7c <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d103      	bne.n	8000c0c <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c08:	8013      	strh	r3, [r2, #0]
 8000c0a:	e006      	b.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c18:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c26:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c2c:	8013      	strh	r3, [r2, #0]
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012c00 	.word	0x40012c00
 8000c3c:	20000554 	.word	0x20000554
 8000c40:	20000556 	.word	0x20000556
 8000c44:	20000550 	.word	0x20000550
 8000c48:	20000552 	.word	0x20000552
 8000c4c:	00000000 	.word	0x00000000

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b0b6      	sub	sp, #216	; 0xd8
 8000c54:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000c56:	4bc9      	ldr	r3, [pc, #804]	; (8000f7c <main+0x32c>)
 8000c58:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c5c:	461d      	mov	r5, r3
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c66:	6020      	str	r0, [r4, #0]
 8000c68:	3404      	adds	r4, #4
 8000c6a:	7021      	strb	r1, [r4, #0]
 8000c6c:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8000c70:	222b      	movs	r2, #43	; 0x2b
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 f8b1 	bl	8007ddc <memset>

	enable_clocks();
 8000c7a:	f7ff ff85 	bl	8000b88 <enable_clocks>
	initialise_board();
 8000c7e:	f7ff ff93 	bl	8000ba8 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000c82:	4bbf      	ldr	r3, [pc, #764]	; (8000f80 <main+0x330>)
 8000c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	49be      	ldr	r1, [pc, #760]	; (8000f84 <main+0x334>)
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f000 ff93 	bl	8001bb8 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	volatile uint16_t vertical_PWM = 1000;
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	volatile uint16_t horizontal_PWM = 1000;
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f001 fab8 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 fbfc 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f000 fe4c 	bl	800194c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb4:	f000 fcce 	bl	8001654 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cb8:	f000 fd0c 	bl	80016d4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000cbc:	f000 fe24 	bl	8001908 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000cc0:	f000 fdbc 	bl	800183c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000cc4:	f000 fd44 	bl	8001750 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cc8:	f000 fc54 	bl	8001574 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	48ae      	ldr	r0, [pc, #696]	; (8000f88 <main+0x338>)
 8000cd0:	f005 fb92 	bl	80063f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	48ac      	ldr	r0, [pc, #688]	; (8000f88 <main+0x338>)
 8000cd8:	f005 fb8e 	bl	80063f8 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	48ab      	ldr	r0, [pc, #684]	; (8000f8c <main+0x33c>)
 8000ce0:	f005 fcec 	bl	80066bc <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000cfe:	48a4      	ldr	r0, [pc, #656]	; (8000f90 <main+0x340>)
 8000d00:	f000 fea8 	bl	8001a54 <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	21c4      	movs	r1, #196	; 0xc4
 8000d1e:	489c      	ldr	r0, [pc, #624]	; (8000f90 <main+0x340>)
 8000d20:	f002 ffec 	bl	8003cfc <HAL_I2C_Mem_Write>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	uint8_t PWM_direction_clockwise = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f001 fad9 	bl	80022e8 <HAL_Delay>

	uint8_t current_state = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	uint8_t led_on = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	uint32_t led_timestamp = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	uint32_t state_timestamp[5] = {0, 0, 0, 0, 0};
 8000d48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
	uint32_t predefined_angles_degrees[5] = {135, 45, 180, 0, 90};
 8000d58:	4b8e      	ldr	r3, [pc, #568]	; (8000f94 <main+0x344>)
 8000d5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000d5e:	461d      	mov	r5, r3
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	6023      	str	r3, [r4, #0]
	uint32_t predefined_angles_adc[5] = {0, 0, 0, 0, 0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
	uint32_t upper_calibration = 3800;
 8000d78:	f640 63d8 	movw	r3, #3800	; 0xed8
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint32_t lower_calibration = 1200;
 8000d80:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint32_t tolerance = 200;
 8000d88:	23c8      	movs	r3, #200	; 0xc8
 8000d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	for (uint32_t i = 0; i < 5; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000d94:	e036      	b.n	8000e04 <main+0x1b4>
	{
		predefined_angles_adc[i] = predefined_angles_degrees[i]*(upper_calibration - lower_calibration) / 180.0 + lower_calibration;
 8000d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	33c8      	adds	r3, #200	; 0xc8
 8000d9e:	443b      	add	r3, r7
 8000da0:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8000da4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000da8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb9e 	bl	80004f4 <__aeabi_ui2d>
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	4b76      	ldr	r3, [pc, #472]	; (8000f98 <main+0x348>)
 8000dbe:	f7ff fd3d 	bl	800083c <__aeabi_ddiv>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4614      	mov	r4, r2
 8000dc8:	461d      	mov	r5, r3
 8000dca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000dce:	f7ff fb91 	bl	80004f4 <__aeabi_ui2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fa4f 	bl	800027c <__adddf3>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff feaf 	bl	8000b48 <__aeabi_d2uiz>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	33c8      	adds	r3, #200	; 0xc8
 8000df4:	443b      	add	r3, r7
 8000df6:	f843 2cb4 	str.w	r2, [r3, #-180]
	for (uint32_t i = 0; i < 5; i++)
 8000dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d9c4      	bls.n	8000d96 <main+0x146>
	}

	while (1)
	{
	    uint32_t adcValue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	    HAL_ADC_Start(&hadc1); // Start ADC1 (or the appropriate ADCx for your specific microcontroller)
 8000e12:	4862      	ldr	r0, [pc, #392]	; (8000f9c <main+0x34c>)
 8000e14:	f001 fc6c 	bl	80026f0 <HAL_ADC_Start>
	    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000e18:	210a      	movs	r1, #10
 8000e1a:	4860      	ldr	r0, [pc, #384]	; (8000f9c <main+0x34c>)
 8000e1c:	f001 fdb4 	bl	8002988 <HAL_ADC_PollForConversion>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d104      	bne.n	8000e30 <main+0x1e0>
	    {
	        adcValue = HAL_ADC_GetValue(&hadc1); // Read the ADC value
 8000e26:	485d      	ldr	r0, [pc, #372]	; (8000f9c <main+0x34c>)
 8000e28:	f001 feb0 	bl	8002b8c <HAL_ADC_GetValue>
 8000e2c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	    }
	    HAL_ADC_Stop(&hadc1);
 8000e30:	485a      	ldr	r0, [pc, #360]	; (8000f9c <main+0x34c>)
 8000e32:	f001 fd73 	bl	800291c <HAL_ADC_Stop>

	    switch (current_state)
 8000e36:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	f200 8184 	bhi.w	8001148 <main+0x4f8>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <main+0x1f8>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e5d 	.word	0x08000e5d
 8000e4c:	08000eed 	.word	0x08000eed
 8000e50:	08000fa1 	.word	0x08000fa1
 8000e54:	08001031 	.word	0x08001031
 8000e58:	080010c1 	.word	0x080010c1
	    {
	    // 135 degrees
	    case 0:
	        if (adcValue >= (predefined_angles_adc[0] - tolerance) && adcValue <= (predefined_angles_adc[0] + tolerance))
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d334      	bcc.n	8000ed6 <main+0x286>
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e72:	4413      	add	r3, r2
 8000e74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d82c      	bhi.n	8000ed6 <main+0x286>
	        {
	            if (state_timestamp[current_state] == 0)
 8000e7c:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	33c8      	adds	r3, #200	; 0xc8
 8000e84:	443b      	add	r3, r7
 8000e86:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <main+0x254>
	            {
	                state_timestamp[current_state] = HAL_GetTick();
 8000e8e:	f897 40c6 	ldrb.w	r4, [r7, #198]	; 0xc6
 8000e92:	f001 fa1d 	bl	80022d0 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	00a3      	lsls	r3, r4, #2
 8000e9a:	33c8      	adds	r3, #200	; 0xc8
 8000e9c:	443b      	add	r3, r7
 8000e9e:	f843 2c8c 	str.w	r2, [r3, #-140]
	            if (state_timestamp[current_state] == 0)
 8000ea2:	e021      	b.n	8000ee8 <main+0x298>
	            }
	            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000ea4:	f001 fa14 	bl	80022d0 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	33c8      	adds	r3, #200	; 0xc8
 8000eb2:	443b      	add	r3, r7
 8000eb4:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ebe:	d913      	bls.n	8000ee8 <main+0x298>
	            {
	                current_state = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	                led_on = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	                led_timestamp = HAL_GetTick();
 8000ecc:	f001 fa00 	bl	80022d0 <HAL_GetTick>
 8000ed0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	            if (state_timestamp[current_state] == 0)
 8000ed4:	e008      	b.n	8000ee8 <main+0x298>
	            }
	        }
	        else
	        {
	            state_timestamp[current_state] = 0;
 8000ed6:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	33c8      	adds	r3, #200	; 0xc8
 8000ede:	443b      	add	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f843 2c8c 	str.w	r2, [r3, #-140]
	        }
	        break;
 8000ee6:	e130      	b.n	800114a <main+0x4fa>
	            if (state_timestamp[current_state] == 0)
 8000ee8:	bf00      	nop
	        break;
 8000eea:	e12e      	b.n	800114a <main+0x4fa>
	    // 45 degrees
	    case 1:
	    	if (adcValue >= (predefined_angles_adc[1] - tolerance) && adcValue <= (predefined_angles_adc[1] + tolerance))
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d334      	bcc.n	8000f66 <main+0x316>
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f02:	4413      	add	r3, r2
 8000f04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d82c      	bhi.n	8000f66 <main+0x316>
	        {
	            if (state_timestamp[current_state] == 0)
 8000f0c:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	33c8      	adds	r3, #200	; 0xc8
 8000f14:	443b      	add	r3, r7
 8000f16:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10a      	bne.n	8000f34 <main+0x2e4>
	            {
	                state_timestamp[current_state] = HAL_GetTick();
 8000f1e:	f897 40c6 	ldrb.w	r4, [r7, #198]	; 0xc6
 8000f22:	f001 f9d5 	bl	80022d0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	00a3      	lsls	r3, r4, #2
 8000f2a:	33c8      	adds	r3, #200	; 0xc8
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f843 2c8c 	str.w	r2, [r3, #-140]
	            if (state_timestamp[current_state] == 0)
 8000f32:	e021      	b.n	8000f78 <main+0x328>
	            }
	            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000f34:	f001 f9cc 	bl	80022d0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	33c8      	adds	r3, #200	; 0xc8
 8000f42:	443b      	add	r3, r7
 8000f44:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f4e:	d913      	bls.n	8000f78 <main+0x328>
	            {
	                current_state = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	                led_on = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	                led_timestamp = HAL_GetTick();
 8000f5c:	f001 f9b8 	bl	80022d0 <HAL_GetTick>
 8000f60:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	            if (state_timestamp[current_state] == 0)
 8000f64:	e008      	b.n	8000f78 <main+0x328>
	            }
	        }
	        else
	        {
	            state_timestamp[current_state] = 0;
 8000f66:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	33c8      	adds	r3, #200	; 0xc8
 8000f6e:	443b      	add	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	f843 2c8c 	str.w	r2, [r3, #-140]
	        }
	        break;
 8000f76:	e0e8      	b.n	800114a <main+0x4fa>
	            if (state_timestamp[current_state] == 0)
 8000f78:	bf00      	nop
	        break;
 8000f7a:	e0e6      	b.n	800114a <main+0x4fa>
 8000f7c:	08009530 	.word	0x08009530
 8000f80:	48001015 	.word	0x48001015
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000218 	.word	0x20000218
 8000f8c:	200001cc 	.word	0x200001cc
 8000f90:	20000114 	.word	0x20000114
 8000f94:	08009570 	.word	0x08009570
 8000f98:	40668000 	.word	0x40668000
 8000f9c:	200000c4 	.word	0x200000c4
	    // 	180 degrees
	    case 2:
	    	if (adcValue >= (predefined_angles_adc[2] - tolerance) && adcValue <= (predefined_angles_adc[2] + tolerance))
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d334      	bcc.n	800101a <main+0x3ca>
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d82c      	bhi.n	800101a <main+0x3ca>
	        {
	            if (state_timestamp[current_state] == 0)
 8000fc0:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	33c8      	adds	r3, #200	; 0xc8
 8000fc8:	443b      	add	r3, r7
 8000fca:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10a      	bne.n	8000fe8 <main+0x398>
	            {
	                state_timestamp[current_state] = HAL_GetTick();
 8000fd2:	f897 40c6 	ldrb.w	r4, [r7, #198]	; 0xc6
 8000fd6:	f001 f97b 	bl	80022d0 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	00a3      	lsls	r3, r4, #2
 8000fde:	33c8      	adds	r3, #200	; 0xc8
 8000fe0:	443b      	add	r3, r7
 8000fe2:	f843 2c8c 	str.w	r2, [r3, #-140]
	            if (state_timestamp[current_state] == 0)
 8000fe6:	e021      	b.n	800102c <main+0x3dc>
	            }
	            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000fe8:	f001 f972 	bl	80022d0 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	33c8      	adds	r3, #200	; 0xc8
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001002:	d913      	bls.n	800102c <main+0x3dc>
	            {
	                current_state = 3;
 8001004:	2303      	movs	r3, #3
 8001006:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	                led_on = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	                led_timestamp = HAL_GetTick();
 8001010:	f001 f95e 	bl	80022d0 <HAL_GetTick>
 8001014:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	            if (state_timestamp[current_state] == 0)
 8001018:	e008      	b.n	800102c <main+0x3dc>
	            }
	        }
	        else
	        {
	            state_timestamp[current_state] = 0;
 800101a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	33c8      	adds	r3, #200	; 0xc8
 8001022:	443b      	add	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	f843 2c8c 	str.w	r2, [r3, #-140]
	        }
	        break;
 800102a:	e08e      	b.n	800114a <main+0x4fa>
	            if (state_timestamp[current_state] == 0)
 800102c:	bf00      	nop
	        break;
 800102e:	e08c      	b.n	800114a <main+0x4fa>
	    // 0 degrees
	    case 3:
	    	if (adcValue >= (predefined_angles_adc[3] - tolerance) && adcValue <= (predefined_angles_adc[3] + tolerance))
 8001030:	6a3a      	ldr	r2, [r7, #32]
 8001032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800103c:	429a      	cmp	r2, r3
 800103e:	d334      	bcc.n	80010aa <main+0x45a>
 8001040:	6a3a      	ldr	r2, [r7, #32]
 8001042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001046:	4413      	add	r3, r2
 8001048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800104c:	429a      	cmp	r2, r3
 800104e:	d82c      	bhi.n	80010aa <main+0x45a>
	        {
	            if (state_timestamp[current_state] == 0)
 8001050:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	33c8      	adds	r3, #200	; 0xc8
 8001058:	443b      	add	r3, r7
 800105a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10a      	bne.n	8001078 <main+0x428>
	            {
	                state_timestamp[current_state] = HAL_GetTick();
 8001062:	f897 40c6 	ldrb.w	r4, [r7, #198]	; 0xc6
 8001066:	f001 f933 	bl	80022d0 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	00a3      	lsls	r3, r4, #2
 800106e:	33c8      	adds	r3, #200	; 0xc8
 8001070:	443b      	add	r3, r7
 8001072:	f843 2c8c 	str.w	r2, [r3, #-140]
	            if (state_timestamp[current_state] == 0)
 8001076:	e021      	b.n	80010bc <main+0x46c>
	            }
	            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8001078:	f001 f92a 	bl	80022d0 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	33c8      	adds	r3, #200	; 0xc8
 8001086:	443b      	add	r3, r7
 8001088:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001092:	d913      	bls.n	80010bc <main+0x46c>
	            {
	                current_state = 4;
 8001094:	2304      	movs	r3, #4
 8001096:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	                led_on = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	                led_timestamp = HAL_GetTick();
 80010a0:	f001 f916 	bl	80022d0 <HAL_GetTick>
 80010a4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	            if (state_timestamp[current_state] == 0)
 80010a8:	e008      	b.n	80010bc <main+0x46c>
	            }
	        }
	        else
	        {
	            state_timestamp[current_state] = 0;
 80010aa:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	33c8      	adds	r3, #200	; 0xc8
 80010b2:	443b      	add	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	f843 2c8c 	str.w	r2, [r3, #-140]
	        }
	        break;
 80010ba:	e046      	b.n	800114a <main+0x4fa>
	            if (state_timestamp[current_state] == 0)
 80010bc:	bf00      	nop
	        break;
 80010be:	e044      	b.n	800114a <main+0x4fa>
	    // 90 degrees
	    case 4:
	    	if (adcValue >= (predefined_angles_adc[4] - tolerance) && adcValue <= (predefined_angles_adc[4] + tolerance))
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d330      	bcc.n	8001132 <main+0x4e2>
 80010d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010d6:	4413      	add	r3, r2
 80010d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80010dc:	429a      	cmp	r2, r3
 80010de:	d828      	bhi.n	8001132 <main+0x4e2>
	        {
	            if (state_timestamp[current_state] == 0)
 80010e0:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	33c8      	adds	r3, #200	; 0xc8
 80010e8:	443b      	add	r3, r7
 80010ea:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10a      	bne.n	8001108 <main+0x4b8>
	            {
	                state_timestamp[current_state] = HAL_GetTick();
 80010f2:	f897 40c6 	ldrb.w	r4, [r7, #198]	; 0xc6
 80010f6:	f001 f8eb 	bl	80022d0 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	00a3      	lsls	r3, r4, #2
 80010fe:	33c8      	adds	r3, #200	; 0xc8
 8001100:	443b      	add	r3, r7
 8001102:	f843 2c8c 	str.w	r2, [r3, #-140]
	            if (state_timestamp[current_state] == 0)
 8001106:	e01d      	b.n	8001144 <main+0x4f4>
	            }
	            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8001108:	f001 f8e2 	bl	80022d0 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	33c8      	adds	r3, #200	; 0xc8
 8001116:	443b      	add	r3, r7
 8001118:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d90f      	bls.n	8001144 <main+0x4f4>
	            {
	                current_state = 5;
 8001124:	2305      	movs	r3, #5
 8001126:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	                led_on = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	            if (state_timestamp[current_state] == 0)
 8001130:	e008      	b.n	8001144 <main+0x4f4>
	            }
	        }
	        else
	              {
	                  state_timestamp[current_state] = 0;
 8001132:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	33c8      	adds	r3, #200	; 0xc8
 800113a:	443b      	add	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	f843 2c8c 	str.w	r2, [r3, #-140]
	              }
	              break;
 8001142:	e002      	b.n	800114a <main+0x4fa>
	            if (state_timestamp[current_state] == 0)
 8001144:	bf00      	nop
	              break;
 8001146:	e000      	b.n	800114a <main+0x4fa>
	          default:
	              break;
 8001148:	bf00      	nop
	          }

		  if (led_on)
 800114a:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01b      	beq.n	800118a <main+0x53a>
		  {
			  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET); // Turn on the LED
 8001152:	2201      	movs	r2, #1
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	489e      	ldr	r0, [pc, #632]	; (80013d0 <main+0x780>)
 8001158:	f002 fd28 	bl	8003bac <HAL_GPIO_WritePin>
			  if (led_on == 1 && HAL_GetTick() - led_timestamp >= 3000) // Check if 3 seconds have passed and led_on is not 2
 800115c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001160:	2b01      	cmp	r3, #1
 8001162:	d117      	bne.n	8001194 <main+0x544>
 8001164:	f001 f8b4 	bl	80022d0 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001174:	4293      	cmp	r3, r2
 8001176:	d90d      	bls.n	8001194 <main+0x544>
			  {
				  led_on = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
				  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 800117e:	2200      	movs	r2, #0
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	4893      	ldr	r0, [pc, #588]	; (80013d0 <main+0x780>)
 8001184:	f002 fd12 	bl	8003bac <HAL_GPIO_WritePin>
 8001188:	e004      	b.n	8001194 <main+0x544>
			  }
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	4890      	ldr	r0, [pc, #576]	; (80013d0 <main+0x780>)
 8001190:	f002 fd0c 	bl	8003bac <HAL_GPIO_WritePin>
		  }



		if (PWM_direction_clockwise == 1) {
 8001194:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10e      	bne.n	80011ba <main+0x56a>
			vertical_PWM += 3;
 800119c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3303      	adds	r3, #3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			horizontal_PWM += 3;
 80011aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3303      	adds	r3, #3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80011b8:	e00d      	b.n	80011d6 <main+0x586>
		}
		else {
			vertical_PWM -= 3;
 80011ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b03      	subs	r3, #3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			horizontal_PWM -= 3;
 80011c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3b03      	subs	r3, #3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		}

		if (vertical_PWM > 1900) {
 80011d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f240 726c 	movw	r2, #1900	; 0x76c
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d906      	bls.n	80011f2 <main+0x5a2>
			vertical_PWM = 1900;
 80011e4:	f240 736c 	movw	r3, #1900	; 0x76c
 80011e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			PWM_direction_clockwise = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		if (vertical_PWM < 1200) {
 80011f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80011fc:	d206      	bcs.n	800120c <main+0x5bc>
			vertical_PWM = 1200;
 80011fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001202:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			PWM_direction_clockwise = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}

		TIM2->CCR1 = vertical_PWM;
 800120c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001210:	b29a      	uxth	r2, r3
 8001212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 8001218:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800121c:	b29a      	uxth	r2, r3
 800121e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001222:	639a      	str	r2, [r3, #56]	; 0x38

		uint8_t xMSB = 0x00;
 8001224:	2300      	movs	r3, #0
 8001226:	74fb      	strb	r3, [r7, #19]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8001228:	230a      	movs	r3, #10
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f107 0313 	add.w	r3, r7, #19
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2229      	movs	r2, #41	; 0x29
 800123a:	21d3      	movs	r1, #211	; 0xd3
 800123c:	4865      	ldr	r0, [pc, #404]	; (80013d4 <main+0x784>)
 800123e:	f002 fe71 	bl	8003f24 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8001246:	230a      	movs	r3, #10
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f107 0312 	add.w	r3, r7, #18
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	21d3      	movs	r1, #211	; 0xd3
 800125a:	485e      	ldr	r0, [pc, #376]	; (80013d4 <main+0x784>)
 800125c:	f002 fe62 	bl	8003f24 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	7cbb      	ldrb	r3, [r7, #18]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		uint8_t yMSB = 0x00;
 8001270:	2300      	movs	r3, #0
 8001272:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8001274:	230a      	movs	r3, #10
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	f107 0311 	add.w	r3, r7, #17
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	222b      	movs	r2, #43	; 0x2b
 8001286:	21d3      	movs	r1, #211	; 0xd3
 8001288:	4852      	ldr	r0, [pc, #328]	; (80013d4 <main+0x784>)
 800128a:	f002 fe4b 	bl	8003f24 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	743b      	strb	r3, [r7, #16]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8001292:	230a      	movs	r3, #10
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	222a      	movs	r2, #42	; 0x2a
 80012a4:	21d3      	movs	r1, #211	; 0xd3
 80012a6:	484b      	ldr	r0, [pc, #300]	; (80013d4 <main+0x784>)
 80012a8:	f002 fe3c 	bl	8003f24 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	7c3b      	ldrb	r3, [r7, #16]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

		uint8_t zMSB = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 80012c0:	230a      	movs	r3, #10
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 030f 	add.w	r3, r7, #15
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	222d      	movs	r2, #45	; 0x2d
 80012d2:	21d3      	movs	r1, #211	; 0xd3
 80012d4:	483f      	ldr	r0, [pc, #252]	; (80013d4 <main+0x784>)
 80012d6:	f002 fe25 	bl	8003f24 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 80012de:	230a      	movs	r3, #10
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030e 	add.w	r3, r7, #14
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	222c      	movs	r2, #44	; 0x2c
 80012f0:	21d3      	movs	r1, #211	; 0xd3
 80012f2:	4838      	ldr	r0, [pc, #224]	; (80013d4 <main+0x784>)
 80012f4:	f002 fe16 	bl	8003f24 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
//			led_register->led_groups.led_pair_2 = 1;
//		else
//			led_register->led_groups.led_pair_2 = 2;


		uint8_t lidar_value = 0x03;
 8001308:	2303      	movs	r3, #3
 800130a:	737b      	strb	r3, [r7, #13]
		return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 030d 	add.w	r3, r7, #13
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	21c4      	movs	r1, #196	; 0xc4
 8001320:	482c      	ldr	r0, [pc, #176]	; (80013d4 <main+0x784>)
 8001322:	f002 fceb 	bl	8003cfc <HAL_I2C_Mem_Write>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		lidar_value = 0xff;
 800132c:	23ff      	movs	r3, #255	; 0xff
 800132e:	737b      	strb	r3, [r7, #13]

		uint8_t lidar_MSBa = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	733b      	strb	r3, [r7, #12]
		uint8_t lidar_LSBa = 0x00;
 8001334:	2300      	movs	r3, #0
 8001336:	72fb      	strb	r3, [r7, #11]

		volatile uint16_t lidar_distance = 0xff;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	813b      	strh	r3, [r7, #8]

		uint16_t timeout;

		while ((lidar_value & 0x01) != 0x00) {
 800133c:	e041      	b.n	80013c2 <main+0x772>
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 800133e:	2364      	movs	r3, #100	; 0x64
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030d 	add.w	r3, r7, #13
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2201      	movs	r2, #1
 8001350:	21c5      	movs	r1, #197	; 0xc5
 8001352:	4820      	ldr	r0, [pc, #128]	; (80013d4 <main+0x784>)
 8001354:	f002 fde6 	bl	8003f24 <HAL_I2C_Mem_Read>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	220f      	movs	r2, #15
 8001370:	21c5      	movs	r1, #197	; 0xc5
 8001372:	4818      	ldr	r0, [pc, #96]	; (80013d4 <main+0x784>)
 8001374:	f002 fdd6 	bl	8003f24 <HAL_I2C_Mem_Read>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 030b 	add.w	r3, r7, #11
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2210      	movs	r2, #16
 8001390:	21c5      	movs	r1, #197	; 0xc5
 8001392:	4810      	ldr	r0, [pc, #64]	; (80013d4 <main+0x784>)
 8001394:	f002 fdc6 	bl	8003f24 <HAL_I2C_Mem_Read>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	813b      	strh	r3, [r7, #8]
			timeout += 1;
 80013b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80013b4:	3301      	adds	r3, #1
 80013b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			if (timeout > 0xff)
 80013ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d80a      	bhi.n	80013d8 <main+0x788>
		while ((lidar_value & 0x01) != 0x00) {
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1b8      	bne.n	800133e <main+0x6ee>
 80013cc:	e005      	b.n	80013da <main+0x78a>
 80013ce:	bf00      	nop
 80013d0:	48001000 	.word	0x48001000
 80013d4:	20000114 	.word	0x20000114
				break;
 80013d8:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 80013da:	893b      	ldrh	r3, [r7, #8]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <main+0x848>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		if (lidar_ranges > 3)
 80013ec:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d902      	bls.n	80013fa <main+0x7aa>
			lidar_ranges = 3;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5

		uint8_t led_values = pow(2, lidar_ranges);
 80013fa:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f878 	bl	80004f4 <__aeabi_ui2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	ec43 2b11 	vmov	d1, r2, r3
 800140c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001490 <main+0x840>
 8001410:	f007 f95a 	bl	80086c8 <pow>
 8001414:	ec53 2b10 	vmov	r2, r3, d0
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fb94 	bl	8000b48 <__aeabi_d2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99

//		led_register->led_groups.led_set_of_4 = led_values;

		volatile int read_values_now = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]

		if (last_period > 4000)
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <main+0x84c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001432:	d903      	bls.n	800143c <main+0x7ec>
			last_period = 5000;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <main+0x84c>)
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 800143c:	893b      	ldrh	r3, [r7, #8]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001444:	d902      	bls.n	800144c <main+0x7fc>
			lidar_distance = 5500;
 8001446:	f241 537c 	movw	r3, #5500	; 0x157c
 800144a:	813b      	strh	r3, [r7, #8]

		sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", last_period, lidar_distance*10, roll_rate, pitch_rate, yaw_rate);
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <main+0x84c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	461c      	mov	r4, r3
 8001452:	893b      	ldrh	r3, [r7, #8]
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	461d      	mov	r5, r3
 8001462:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001466:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 800146a:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 800146e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001472:	9102      	str	r1, [sp, #8]
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	462b      	mov	r3, r5
 800147a:	4622      	mov	r2, r4
 800147c:	4908      	ldr	r1, [pc, #32]	; (80014a0 <main+0x850>)
 800147e:	f006 fcb5 	bl	8007dec <siprintf>

		SerialOutputString(string_to_send, &USART1_PORT);
 8001482:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001486:	4907      	ldr	r1, [pc, #28]	; (80014a4 <main+0x854>)
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fc22 	bl	8001cd2 <SerialOutputString>
	{
 800148e:	e4bd      	b.n	8000e0c <main+0x1bc>
 8001490:	00000000 	.word	0x00000000
 8001494:	40000000 	.word	0x40000000
 8001498:	51eb851f 	.word	0x51eb851f
 800149c:	20000556 	.word	0x20000556
 80014a0:	08009518 	.word	0x08009518
 80014a4:	20000000 	.word	0x20000000

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09e      	sub	sp, #120	; 0x78
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b2:	2228      	movs	r2, #40	; 0x28
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 fc90 	bl	8007ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	223c      	movs	r2, #60	; 0x3c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 fc82 	bl	8007ddc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014d8:	2303      	movs	r3, #3
 80014da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e6:	2301      	movs	r3, #1
 80014e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ea:	2310      	movs	r3, #16
 80014ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fa4a 	bl	800499c <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800150e:	f000 fa9b 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001528:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fa72 	bl	8005a18 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800153a:	f000 fa85 	bl	8001a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <SystemClock_Config+0xc8>)
 8001540:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fc43 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001564:	f000 fa70 	bl	8001a48 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3778      	adds	r7, #120	; 0x78
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	000210a0 	.word	0x000210a0

08001574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <MX_ADC1_Init+0xdc>)
 8001598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800159c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f0:	4817      	ldr	r0, [pc, #92]	; (8001650 <MX_ADC1_Init+0xdc>)
 80015f2:	f000 fe9d 	bl	8002330 <HAL_ADC_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fa24 	bl	8001a48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <MX_ADC1_Init+0xdc>)
 800160c:	f001 fdb8 	bl	8003180 <HAL_ADCEx_MultiModeConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001616:	f000 fa17 	bl	8001a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800161a:	2303      	movs	r3, #3
 800161c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800161e:	2301      	movs	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_ADC1_Init+0xdc>)
 8001638:	f001 fab6 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001642:	f000 fa01 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000c4 	.word	0x200000c4

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_I2C1_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_I2C1_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <MX_I2C1_Init+0x7c>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_I2C1_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001690:	f002 faa4 	bl	8003bdc <HAL_I2C_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169a:	f000 f9d5 	bl	8001a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <MX_I2C1_Init+0x74>)
 80016a2:	f003 f811 	bl	80046c8 <HAL_I2CEx_ConfigAnalogFilter>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 f9cc 	bl	8001a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_I2C1_Init+0x74>)
 80016b4:	f003 f853 	bl	800475e <HAL_I2CEx_ConfigDigitalFilter>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 f9c3 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000114 	.word	0x20000114
 80016cc:	40005400 	.word	0x40005400
 80016d0:	2000090e 	.word	0x2000090e

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_SPI1_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_SPI1_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_SPI1_Init+0x74>)
 80016e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_SPI1_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI1_Init+0x74>)
 80016ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_SPI1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI1_Init+0x74>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI1_Init+0x74>)
 800170a:	2208      	movs	r2, #8
 800170c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI1_Init+0x74>)
 8001722:	2207      	movs	r2, #7
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x74>)
 800172e:	2208      	movs	r2, #8
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_SPI1_Init+0x74>)
 8001734:	f004 fd06 	bl	8006144 <HAL_SPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f983 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000168 	.word	0x20000168
 800174c:	40013000 	.word	0x40013000

08001750 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_TIM1_Init+0xe4>)
 800177e:	4a2e      	ldr	r2, [pc, #184]	; (8001838 <MX_TIM1_Init+0xe8>)
 8001780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <MX_TIM1_Init+0xe4>)
 8001784:	222f      	movs	r2, #47	; 0x2f
 8001786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <MX_TIM1_Init+0xe4>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_TIM1_Init+0xe4>)
 8001790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001794:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <MX_TIM1_Init+0xe4>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MX_TIM1_Init+0xe4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MX_TIM1_Init+0xe4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <MX_TIM1_Init+0xe4>)
 80017aa:	f004 fd76 	bl	800629a <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80017b4:	f000 f948 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4619      	mov	r1, r3
 80017c4:	481b      	ldr	r0, [pc, #108]	; (8001834 <MX_TIM1_Init+0xe4>)
 80017c6:	f005 fb8b 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017d0:	f000 f93a 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017d4:	4817      	ldr	r0, [pc, #92]	; (8001834 <MX_TIM1_Init+0xe4>)
 80017d6:	f004 ff0f 	bl	80065f8 <HAL_TIM_IC_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80017e0:	f000 f932 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <MX_TIM1_Init+0xe4>)
 80017f8:	f006 f9ec 	bl	8007bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001802:	f000 f921 	bl	8001a48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001806:	230a      	movs	r3, #10
 8001808:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM1_Init+0xe4>)
 800181e:	f005 f9ae 	bl	8006b7e <HAL_TIM_IC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001828:	f000 f90e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	; 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200001cc 	.word	0x200001cc
 8001838:	40012c00 	.word	0x40012c00

0800183c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <MX_TIM2_Init+0xc8>)
 8001862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <MX_TIM2_Init+0xc8>)
 800186a:	222f      	movs	r2, #47	; 0x2f
 800186c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <MX_TIM2_Init+0xc8>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <MX_TIM2_Init+0xc8>)
 8001876:	f644 6220 	movw	r2, #20000	; 0x4e20
 800187a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_TIM2_Init+0xc8>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_TIM2_Init+0xc8>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001888:	481e      	ldr	r0, [pc, #120]	; (8001904 <MX_TIM2_Init+0xc8>)
 800188a:	f004 fd5d 	bl	8006348 <HAL_TIM_PWM_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001894:	f000 f8d8 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4817      	ldr	r0, [pc, #92]	; (8001904 <MX_TIM2_Init+0xc8>)
 80018a8:	f006 f994 	bl	8007bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018b2:	f000 f8c9 	bl	8001a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b6:	2360      	movs	r3, #96	; 0x60
 80018b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80018ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM2_Init+0xc8>)
 80018d0:	f005 f9f2 	bl	8006cb8 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018da:	f000 f8b5 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2204      	movs	r2, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM2_Init+0xc8>)
 80018e6:	f005 f9e7 	bl	8006cb8 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80018f0:	f000 f8aa 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM2_Init+0xc8>)
 80018f6:	f000 fb67 	bl	8001fc8 <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000218 	.word	0x20000218

08001908 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <MX_USB_PCD_Init+0x40>)
 8001910:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 8001914:	2208      	movs	r2, #8
 8001916:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 800191a:	2202      	movs	r2, #2
 800191c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 8001920:	2202      	movs	r2, #2
 8001922:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_USB_PCD_Init+0x3c>)
 8001932:	f002 ff60 	bl	80047f6 <HAL_PCD_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800193c:	f000 f884 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000264 	.word	0x20000264
 8001948:	40005c00 	.word	0x40005c00

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <MX_GPIO_Init+0xf4>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001984:	6153      	str	r3, [r2, #20]
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <MX_GPIO_Init+0xf4>)
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199c:	6153      	str	r3, [r2, #20]
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_GPIO_Init+0xf4>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|LD3_Pin|LD5_Pin
 80019da:	2200      	movs	r2, #0
 80019dc:	f64f 6188 	movw	r1, #65160	; 0xfe88
 80019e0:	4818      	ldr	r0, [pc, #96]	; (8001a44 <MX_GPIO_Init+0xf8>)
 80019e2:	f002 f8e3 	bl	8003bac <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80019e6:	2337      	movs	r3, #55	; 0x37
 80019e8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4812      	ldr	r0, [pc, #72]	; (8001a44 <MX_GPIO_Init+0xf8>)
 80019fc:	f001 ff44 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|LD3_Pin|LD5_Pin
 8001a00:	f64f 6388 	movw	r3, #65160	; 0xfe88
 8001a04:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <MX_GPIO_Init+0xf8>)
 8001a1a:	f001 ff35 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f001 ff28 	bl	8003888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48001000 	.word	0x48001000

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a50:	e7fe      	b.n	8001a50 <Error_Handler+0x8>
	...

08001a54 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0d2      	sub	sp, #328	; 0x148
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a62:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8001a88:	230f      	movs	r3, #15
 8001a8a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8001a8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a92:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001a96:	230a      	movs	r3, #10
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	f207 1319 	addw	r3, r7, #281	; 0x119
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	21d2      	movs	r1, #210	; 0xd2
 8001aaa:	6800      	ldr	r0, [r0, #0]
 8001aac:	f002 f926 	bl	8003cfc <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001ab6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001aba:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001abe:	230a      	movs	r3, #10
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2221      	movs	r2, #33	; 0x21
 8001ad0:	21d2      	movs	r1, #210	; 0xd2
 8001ad2:	6800      	ldr	r0, [r0, #0]
 8001ad4:	f002 f912 	bl	8003cfc <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001ad8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001adc:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	2222      	movs	r2, #34	; 0x22
 8001af2:	21d2      	movs	r1, #210	; 0xd2
 8001af4:	6800      	ldr	r0, [r0, #0]
 8001af6:	f002 f901 	bl	8003cfc <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 8001afa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001afe:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b02:	230a      	movs	r3, #10
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	f207 131b 	addw	r3, r7, #283	; 0x11b
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	2220      	movs	r2, #32
 8001b14:	21d3      	movs	r1, #211	; 0xd3
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	f002 fa04 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 8001b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b20:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b24:	230a      	movs	r3, #10
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2301      	movs	r3, #1
 8001b34:	2221      	movs	r2, #33	; 0x21
 8001b36:	21d3      	movs	r1, #211	; 0xd3
 8001b38:	6800      	ldr	r0, [r0, #0]
 8001b3a:	f002 f9f3 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8001b4a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001b4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8001b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <initialise_ptu_i2c+0x160>)
 8001b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b72:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8001b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b7a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8001b82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b86:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	f107 030b 	add.w	r3, r7, #11
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	21c4      	movs	r1, #196	; 0xc4
 8001b9e:	6800      	ldr	r0, [r0, #0]
 8001ba0:	f002 f8ac 	bl	8003cfc <HAL_I2C_Mem_Write>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8001baa:	bf00      	nop
 8001bac:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	08009584 	.word	0x08009584

08001bb8 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <SerialInitialise+0xe4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <SerialInitialise+0xe4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <SerialInitialise+0xe4>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <SerialInitialise+0xe4>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d106      	bne.n	8001bf8 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <SerialInitialise+0xe4>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <SerialInitialise+0xe4>)
 8001bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bf4:	6153      	str	r3, [r2, #20]
		break;
 8001bf6:	e000      	b.n	8001bfa <SerialInitialise+0x42>
	default:
		break;
 8001bf8:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	6a12      	ldr	r2, [r2, #32]
 8001c02:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c0c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	6959      	ldr	r1, [r3, #20]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d821      	bhi.n	8001c7e <SerialInitialise+0xc6>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <SerialInitialise+0x88>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001c55 	.word	0x08001c55
 8001c44:	08001c5d 	.word	0x08001c5d
 8001c48:	08001c65 	.word	0x08001c65
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001c75 	.word	0x08001c75
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2246      	movs	r2, #70	; 0x46
 8001c58:	801a      	strh	r2, [r3, #0]
		break;
 8001c5a:	e010      	b.n	8001c7e <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2246      	movs	r2, #70	; 0x46
 8001c60:	801a      	strh	r2, [r3, #0]
		break;
 8001c62:	e00c      	b.n	8001c7e <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2246      	movs	r2, #70	; 0x46
 8001c68:	801a      	strh	r2, [r3, #0]
		break;
 8001c6a:	e008      	b.n	8001c7e <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2246      	movs	r2, #70	; 0x46
 8001c70:	801a      	strh	r2, [r3, #0]
		break;
 8001c72:	e004      	b.n	8001c7e <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001c7a:	801a      	strh	r2, [r3, #0]
		break;
 8001c7c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f042 020d 	orr.w	r2, r2, #13
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001cac:	bf00      	nop
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f8      	beq.n	8001cae <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	801a      	strh	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001ce0:	e00b      	b.n	8001cfa <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffd9 	bl	8001ca0 <SerialOutputChar>
		counter++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
		pt++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ef      	bne.n	8001ce2 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	4798      	blx	r3
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_MspInit+0x44>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_MspInit+0x44>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_MspInit+0x44>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_MspInit+0x44>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_MspInit+0x44>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_MspInit+0x44>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d52:	2007      	movs	r0, #7
 8001d54:	f001 fd56 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d84:	d124      	bne.n	8001dd0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6153      	str	r3, [r2, #20]
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	6153      	str	r3, [r2, #20]
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_ADC_MspInit+0x74>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001db6:	2304      	movs	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dcc:	f001 fd5c 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_I2C_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d127      	bne.n	8001e4e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6153      	str	r3, [r2, #20]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e16:	23c0      	movs	r3, #192	; 0xc0
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1a:	2312      	movs	r3, #18
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e26:	2304      	movs	r3, #4
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <HAL_I2C_MspInit+0x84>)
 8001e32:	f001 fd29 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_I2C_MspInit+0x80>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005400 	.word	0x40005400
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000400 	.word	0x48000400

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_SPI_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d128      	bne.n	8001ed8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	6153      	str	r3, [r2, #20]
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001eb6:	23e0      	movs	r3, #224	; 0xe0
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f001 fcd8 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013000 	.word	0x40013000
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_TIM_Base_MspInit+0x90>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d131      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	6153      	str	r3, [r2, #20]
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_TIM_Base_MspInit+0x94>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f4c:	2306      	movs	r3, #6
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f001 fc95 	bl	8003888 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	201b      	movs	r0, #27
 8001f64:	f001 fc59 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f68:	201b      	movs	r0, #27
 8001f6a:	f001 fc72 	bl	8003852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d113      	bne.n	8001fba <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x44>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x44>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x44>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f001 fc33 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f001 fc4c 	bl	8003852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d11d      	bne.n	8002026 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_TIM_MspPostInit+0x68>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_TIM_MspPostInit+0x68>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6153      	str	r3, [r2, #20]
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_TIM_MspPostInit+0x68>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002002:	f248 0302 	movw	r3, #32770	; 0x8002
 8002006:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002022:	f001 fc31 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_PCD_MspInit+0x80>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d129      	bne.n	80020aa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	6153      	str	r3, [r2, #20]
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800206e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002080:	230e      	movs	r3, #14
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f001 fbfb 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 8002098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_PCD_MspInit+0x84>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40005c00 	.word	0x40005c00
 80020b8:	40021000 	.word	0x40021000

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <NMI_Handler+0x4>

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 f8ce 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM1_CC_IRQHandler+0x10>)
 8002116:	f004 fc13 	bl	8006940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001cc 	.word	0x200001cc

08002124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM2_IRQHandler+0x10>)
 800212a:	f004 fc09 	bl	8006940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000218 	.word	0x20000218

08002138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_sbrk+0x5c>)
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_sbrk+0x60>)
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <_sbrk+0x64>)
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <_sbrk+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002168:	f005 fe0e 	bl	8007d88 <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002176:	e009      	b.n	800218c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <_sbrk+0x64>)
 8002188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000a000 	.word	0x2000a000
 8002198:	00000400 	.word	0x00000400
 800219c:	20000558 	.word	0x20000558
 80021a0:	20000570 	.word	0x20000570

080021a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <SystemInit+0x20>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <SystemInit+0x20>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021cc:	f7ff ffea 	bl	80021a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopForever+0x6>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopForever+0xe>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopForever+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f6:	f005 fdcd 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021fa:	f7fe fd29 	bl	8000c50 <main>

080021fe <LoopForever>:

LoopForever:
    b LoopForever
 80021fe:	e7fe      	b.n	80021fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002200:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800220c:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8002210:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002214:	20000570 	.word	0x20000570

08002218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_2_IRQHandler>
	...

0800221c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_Init+0x28>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_Init+0x28>)
 8002226:	f043 0310 	orr.w	r3, r3, #16
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f001 fae9 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fd70 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fb01 	bl	800386e <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002284:	f001 fac9 	bl	800381a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000038 	.word	0x20000038
 80022a0:	20000040 	.word	0x20000040
 80022a4:	2000003c 	.word	0x2000003c

080022a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000040 	.word	0x20000040
 80022cc:	2000055c 	.word	0x2000055c

080022d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000055c 	.word	0x2000055c

080022e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000040 	.word	0x20000040

08002330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b09a      	sub	sp, #104	; 0x68
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e1c9      	b.n	80026e4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d176      	bne.n	8002450 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d152      	bne.n	8002410 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fced 	bl	8001d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d13b      	bne.n	8002410 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f001 f847 	bl	800342c <ADC_Disable>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12f      	bne.n	8002410 <HAL_ADC_Init+0xe0>
 80023b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12b      	bne.n	8002410 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	f043 0202 	orr.w	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ec:	4b86      	ldr	r3, [pc, #536]	; (8002608 <HAL_ADC_Init+0x2d8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a86      	ldr	r2, [pc, #536]	; (800260c <HAL_ADC_Init+0x2dc>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9a      	lsrs	r2, r3, #18
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002402:	e002      	b.n	800240a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3b01      	subs	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f9      	bne.n	8002404 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800242c:	d110      	bne.n	8002450 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f023 0312 	bic.w	r3, r3, #18
 8002436:	f043 0210 	orr.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 8136 	bne.w	80026ca <HAL_ADC_Init+0x39a>
 800245e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8131 	bne.w	80026ca <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8129 	bne.w	80026ca <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002490:	d004      	beq.n	800249c <HAL_ADC_Init+0x16c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <HAL_ADC_Init+0x2e0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_Init+0x170>
 800249c:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_ADC_Init+0x2e4>)
 800249e:	e000      	b.n	80024a2 <HAL_ADC_Init+0x172>
 80024a0:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_ADC_Init+0x2e8>)
 80024a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ac:	d102      	bne.n	80024b4 <HAL_ADC_Init+0x184>
 80024ae:	4b58      	ldr	r3, [pc, #352]	; (8002610 <HAL_ADC_Init+0x2e0>)
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e01a      	b.n	80024ea <HAL_ADC_Init+0x1ba>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a55      	ldr	r2, [pc, #340]	; (8002610 <HAL_ADC_Init+0x2e0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d103      	bne.n	80024c6 <HAL_ADC_Init+0x196>
 80024be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e011      	b.n	80024ea <HAL_ADC_Init+0x1ba>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a54      	ldr	r2, [pc, #336]	; (800261c <HAL_ADC_Init+0x2ec>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <HAL_ADC_Init+0x1a6>
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_ADC_Init+0x2f0>)
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e009      	b.n	80024ea <HAL_ADC_Init+0x1ba>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a51      	ldr	r2, [pc, #324]	; (8002620 <HAL_ADC_Init+0x2f0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_ADC_Init+0x1b6>
 80024e0:	4b4e      	ldr	r3, [pc, #312]	; (800261c <HAL_ADC_Init+0x2ec>)
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e001      	b.n	80024ea <HAL_ADC_Init+0x1ba>
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_ADC_Init+0x1da>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0x1da>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_ADC_Init+0x1dc>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11c      	bne.n	800254a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002510:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_ADC_Init+0x202>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Init+0x202>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_ADC_Init+0x204>
 8002532:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002548:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7e5b      	ldrb	r3, [r3, #25]
 800254e:	035b      	lsls	r3, r3, #13
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002554:	2a01      	cmp	r2, #1
 8002556:	d002      	beq.n	800255e <HAL_ADC_Init+0x22e>
 8002558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255c:	e000      	b.n	8002560 <HAL_ADC_Init+0x230>
 800255e:	2200      	movs	r2, #0
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002570:	4313      	orrs	r3, r2
 8002572:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11b      	bne.n	80025b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7e5b      	ldrb	r3, [r3, #25]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	3b01      	subs	r3, #1
 800258c:	045a      	lsls	r2, r3, #17
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	4313      	orrs	r3, r2
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
 8002598:	e00d      	b.n	80025b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d03a      	beq.n	8002634 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_ADC_Init+0x2ec>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Init+0x2a2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_ADC_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d128      	bne.n	8002624 <HAL_ADC_Init+0x2f4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80025da:	d012      	beq.n	8002602 <HAL_ADC_Init+0x2d2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e4:	d00a      	beq.n	80025fc <HAL_ADC_Init+0x2cc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80025ee:	d002      	beq.n	80025f6 <HAL_ADC_Init+0x2c6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	e018      	b.n	8002628 <HAL_ADC_Init+0x2f8>
 80025f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fa:	e015      	b.n	8002628 <HAL_ADC_Init+0x2f8>
 80025fc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002600:	e012      	b.n	8002628 <HAL_ADC_Init+0x2f8>
 8002602:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002606:	e00f      	b.n	8002628 <HAL_ADC_Init+0x2f8>
 8002608:	20000038 	.word	0x20000038
 800260c:	431bde83 	.word	0x431bde83
 8002610:	50000100 	.word	0x50000100
 8002614:	50000300 	.word	0x50000300
 8002618:	50000700 	.word	0x50000700
 800261c:	50000400 	.word	0x50000400
 8002620:	50000500 	.word	0x50000500
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800262c:	4313      	orrs	r3, r2
 800262e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002630:	4313      	orrs	r3, r2
 8002632:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d114      	bne.n	800266c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002650:	f023 0302 	bic.w	r3, r3, #2
 8002654:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7e1b      	ldrb	r3, [r3, #24]
 800265a:	039a      	lsls	r2, r3, #14
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4313      	orrs	r3, r2
 8002666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002668:	4313      	orrs	r3, r2
 800266a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_ADC_Init+0x3bc>)
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800267c:	430b      	orrs	r3, r1
 800267e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f023 010f 	bic.w	r1, r3, #15
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
 80026a0:	e007      	b.n	80026b2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 020f 	bic.w	r2, r2, #15
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
 80026c8:	e00a      	b.n	80026e0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f023 0312 	bic.w	r3, r3, #18
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80026e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3768      	adds	r7, #104	; 0x68
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fff0c007 	.word	0xfff0c007

080026f0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 80f9 	bne.w	80028fe <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_ADC_Start+0x2a>
 8002716:	2302      	movs	r3, #2
 8002718:	e0f4      	b.n	8002904 <HAL_ADC_Start+0x214>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fe1e 	bl	8003364 <ADC_Enable>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80e0 	bne.w	80028f4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002750:	d004      	beq.n	800275c <HAL_ADC_Start+0x6c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_ADC_Start+0x21c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d106      	bne.n	800276a <HAL_ADC_Start+0x7a>
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_ADC_Start+0x220>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_ADC_Start+0x9a>
 8002768:	e005      	b.n	8002776 <HAL_ADC_Start+0x86>
 800276a:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_ADC_Start+0x224>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_ADC_Start+0x9a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277e:	d004      	beq.n	800278a <HAL_ADC_Start+0x9a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a64      	ldr	r2, [pc, #400]	; (8002918 <HAL_ADC_Start+0x228>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d115      	bne.n	80027b6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d036      	beq.n	8002812 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027b4:	e02d      	b.n	8002812 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_Start+0xe6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_ADC_Start+0x21c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10a      	bne.n	80027ec <HAL_ADC_Start+0xfc>
 80027d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e008      	b.n	80027fe <HAL_ADC_Start+0x10e>
 80027ec:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_ADC_Start+0x228>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800280a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d106      	bne.n	800282e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f023 0206 	bic.w	r2, r3, #6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
 800282c:	e002      	b.n	8002834 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	221c      	movs	r2, #28
 8002842:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284c:	d004      	beq.n	8002858 <HAL_ADC_Start+0x168>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2e      	ldr	r2, [pc, #184]	; (800290c <HAL_ADC_Start+0x21c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <HAL_ADC_Start+0x176>
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_ADC_Start+0x220>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03e      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 8002864:	e005      	b.n	8002872 <HAL_ADC_Start+0x182>
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_ADC_Start+0x224>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b00      	cmp	r3, #0
 8002870:	d037      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287a:	d004      	beq.n	8002886 <HAL_ADC_Start+0x196>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_ADC_Start+0x21c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d106      	bne.n	8002894 <HAL_ADC_Start+0x1a4>
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_ADC_Start+0x220>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2b05      	cmp	r3, #5
 8002890:	d027      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 8002892:	e005      	b.n	80028a0 <HAL_ADC_Start+0x1b0>
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_ADC_Start+0x224>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b05      	cmp	r3, #5
 800289e:	d020      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_Start+0x1c4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_ADC_Start+0x21c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_Start+0x1d2>
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_ADC_Start+0x220>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d010      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 80028c0:	e005      	b.n	80028ce <HAL_ADC_Start+0x1de>
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_ADC_Start+0x224>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	d009      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_Start+0x1f2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_ADC_Start+0x228>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10f      	bne.n	8002902 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0204 	orr.w	r2, r2, #4
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	e006      	b.n	8002902 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028fc:	e001      	b.n	8002902 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	50000100 	.word	0x50000100
 8002910:	50000300 	.word	0x50000300
 8002914:	50000700 	.word	0x50000700
 8002918:	50000400 	.word	0x50000400

0800291c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Stop+0x1a>
 8002932:	2302      	movs	r3, #2
 8002934:	e023      	b.n	800297e <HAL_ADC_Stop+0x62>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800293e:	216c      	movs	r1, #108	; 0x6c
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fdd9 	bl	80034f8 <ADC_ConversionStop>
 8002946:	4603      	mov	r3, r0
 8002948:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fd6b 	bl	800342c <ADC_Disable>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b08      	cmp	r3, #8
 800299c:	d102      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800299e:	2308      	movs	r3, #8
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e03a      	b.n	8002a1a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_PollForConversion+0x30>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a72      	ldr	r2, [pc, #456]	; (8002b7c <HAL_ADC_PollForConversion+0x1f4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_PollForConversion+0x34>
 80029b8:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <HAL_ADC_PollForConversion+0x1f8>)
 80029ba:	e000      	b.n	80029be <HAL_ADC_PollForConversion+0x36>
 80029bc:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <HAL_ADC_PollForConversion+0x1fc>)
 80029be:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d112      	bne.n	80029f2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d11d      	bne.n	8002a16 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0bf      	b.n	8002b72 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0ad      	b.n	8002b72 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002a16:	230c      	movs	r3, #12
 8002a18:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_PollForConversion+0xa6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a54      	ldr	r2, [pc, #336]	; (8002b7c <HAL_ADC_PollForConversion+0x1f4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d106      	bne.n	8002a3c <HAL_ADC_PollForConversion+0xb4>
 8002a2e:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <HAL_ADC_PollForConversion+0x1f8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d010      	beq.n	8002a5c <HAL_ADC_PollForConversion+0xd4>
 8002a3a:	e005      	b.n	8002a48 <HAL_ADC_PollForConversion+0xc0>
 8002a3c:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_ADC_PollForConversion+0x1fc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_ADC_PollForConversion+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a50:	d004      	beq.n	8002a5c <HAL_ADC_PollForConversion+0xd4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4c      	ldr	r2, [pc, #304]	; (8002b88 <HAL_ADC_PollForConversion+0x200>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d104      	bne.n	8002a66 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e00f      	b.n	8002a86 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6e:	d004      	beq.n	8002a7a <HAL_ADC_PollForConversion+0xf2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a41      	ldr	r2, [pc, #260]	; (8002b7c <HAL_ADC_PollForConversion+0x1f4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d102      	bne.n	8002a80 <HAL_ADC_PollForConversion+0xf8>
 8002a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_PollForConversion+0xfa>
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_ADC_PollForConversion+0x200>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002a86:	f7ff fc23 	bl	80022d0 <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a8c:	e021      	b.n	8002ad2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d01d      	beq.n	8002ad2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_ADC_PollForConversion+0x124>
 8002a9c:	f7ff fc18 	bl	80022d0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d212      	bcs.n	8002ad2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0d6      	beq.n	8002a8e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d131      	bne.n	8002b5e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d12c      	bne.n	8002b5e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d125      	bne.n	8002b5e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d112      	bne.n	8002b46 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d112      	bne.n	8002b5e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
 8002b44:	e00b      	b.n	8002b5e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	50000100 	.word	0x50000100
 8002b80:	50000300 	.word	0x50000300
 8002b84:	50000700 	.word	0x50000700
 8002b88:	50000400 	.word	0x50000400

08002b8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b09b      	sub	sp, #108	; 0x6c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x22>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e2ca      	b.n	8003160 <HAL_ADC_ConfigChannel+0x5b8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 82ae 	bne.w	800313e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d81c      	bhi.n	8002c24 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	231f      	movs	r3, #31
 8002c00:	4093      	lsls	r3, r2
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4019      	ands	r1, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
 8002c22:	e063      	b.n	8002cec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d81e      	bhi.n	8002c6a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	3b1e      	subs	r3, #30
 8002c40:	221f      	movs	r2, #31
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4019      	ands	r1, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	3b1e      	subs	r3, #30
 8002c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34
 8002c68:	e040      	b.n	8002cec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b0e      	cmp	r3, #14
 8002c70:	d81e      	bhi.n	8002cb0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	3b3c      	subs	r3, #60	; 0x3c
 8002c86:	221f      	movs	r2, #31
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4019      	ands	r1, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	3b3c      	subs	r3, #60	; 0x3c
 8002ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
 8002cae:	e01d      	b.n	8002cec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	3b5a      	subs	r3, #90	; 0x5a
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	4019      	ands	r1, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	3b5a      	subs	r3, #90	; 0x5a
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80e5 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d91c      	bls.n	8002d3e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6999      	ldr	r1, [r3, #24]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	2207      	movs	r2, #7
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4019      	ands	r1, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6898      	ldr	r0, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b1e      	subs	r3, #30
 8002d30:	fa00 f203 	lsl.w	r2, r0, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
 8002d3c:	e019      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2207      	movs	r2, #7
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4019      	ands	r1, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6898      	ldr	r0, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d84f      	bhi.n	8002e34 <HAL_ADC_ConfigChannel+0x28c>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_ADC_ConfigChannel+0x1f4>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002dcf 	.word	0x08002dcf
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002e13 	.word	0x08002e13
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002db2:	4b9a      	ldr	r3, [pc, #616]	; (800301c <HAL_ADC_ConfigChannel+0x474>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	0691      	lsls	r1, r2, #26
 8002dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dcc:	e07e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dd4:	4b91      	ldr	r3, [pc, #580]	; (800301c <HAL_ADC_ConfigChannel+0x474>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	0691      	lsls	r1, r2, #26
 8002dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002de0:	430a      	orrs	r2, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dee:	e06d      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002df6:	4b89      	ldr	r3, [pc, #548]	; (800301c <HAL_ADC_ConfigChannel+0x474>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	0691      	lsls	r1, r2, #26
 8002e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e02:	430a      	orrs	r2, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e0e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e10:	e05c      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e18:	4b80      	ldr	r3, [pc, #512]	; (800301c <HAL_ADC_ConfigChannel+0x474>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	0691      	lsls	r1, r2, #26
 8002e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e24:	430a      	orrs	r2, r1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e30:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e32:	e04b      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	069b      	lsls	r3, r3, #26
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d107      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e7a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ec2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ec4:	e001      	b.n	8002eca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x324>
      break;
 8002eca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x344>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x344>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_ADC_ConfigChannel+0x346>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 8130 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d00f      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	400a      	ands	r2, r1
 8002f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f1a:	e049      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	d91c      	bls.n	8002f78 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6999      	ldr	r1, [r3, #24]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b1b      	subs	r3, #27
 8002f50:	2207      	movs	r2, #7
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4019      	ands	r1, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6898      	ldr	r0, [r3, #8]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1b      	subs	r3, #27
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	e01b      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6959      	ldr	r1, [r3, #20]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	4019      	ands	r1, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6898      	ldr	r0, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x41c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_ADC_ConfigChannel+0x478>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x420>
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <HAL_ADC_ConfigChannel+0x47c>)
 8002fc6:	e000      	b.n	8002fca <HAL_ADC_ConfigChannel+0x422>
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <HAL_ADC_ConfigChannel+0x480>)
 8002fca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fe4:	2b11      	cmp	r3, #17
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ff8:	2b12      	cmp	r3, #18
 8002ffa:	f040 80ab 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 80a4 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x484>
 8003016:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_ADC_ConfigChannel+0x478>)
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e022      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4ba>
 800301c:	83fff000 	.word	0x83fff000
 8003020:	50000100 	.word	0x50000100
 8003024:	50000300 	.word	0x50000300
 8003028:	50000700 	.word	0x50000700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4e      	ldr	r2, [pc, #312]	; (800316c <HAL_ADC_ConfigChannel+0x5c4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d103      	bne.n	800303e <HAL_ADC_ConfigChannel+0x496>
 8003036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e011      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4ba>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <HAL_ADC_ConfigChannel+0x5c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_ADC_ConfigChannel+0x4a6>
 8003048:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_ADC_ConfigChannel+0x5cc>)
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e009      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4ba>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a48      	ldr	r2, [pc, #288]	; (8003174 <HAL_ADC_ConfigChannel+0x5cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <HAL_ADC_ConfigChannel+0x4b6>
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_ADC_ConfigChannel+0x5c8>)
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e001      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4ba>
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d108      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4da>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4da>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_ADC_ConfigChannel+0x4dc>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d150      	bne.n	800312a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003088:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x502>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x502>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_ADC_ConfigChannel+0x504>
 80030aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13c      	bne.n	800312a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d11d      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x54c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d118      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_ADC_ConfigChannel+0x5d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_ADC_ConfigChannel+0x5d4>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	0c9a      	lsrs	r2, r3, #18
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030f2:	e02e      	b.n	8003152 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b11      	cmp	r3, #17
 80030fa:	d10b      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x56c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003104:	d106      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003112:	e01e      	b.n	8003152 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b12      	cmp	r3, #18
 800311a:	d11a      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003126:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003128:	e013      	b.n	8003152 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800313c:	e00a      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003150:	e000      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003152:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800315c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003160:	4618      	mov	r0, r3
 8003162:	376c      	adds	r7, #108	; 0x6c
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	50000100 	.word	0x50000100
 8003170:	50000400 	.word	0x50000400
 8003174:	50000500 	.word	0x50000500
 8003178:	20000038 	.word	0x20000038
 800317c:	431bde83 	.word	0x431bde83

08003180 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003180:	b480      	push	{r7}
 8003182:	b099      	sub	sp, #100	; 0x64
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003198:	d102      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800319a:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	e01a      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d103      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80031aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e011      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a67      	ldr	r2, [pc, #412]	; (8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e009      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a64      	ldr	r2, [pc, #400]	; (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e001      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b0      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e0a9      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 808d 	bne.w	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8086 	bne.w	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800321c:	d004      	beq.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a4b      	ldr	r2, [pc, #300]	; (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003228:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800322a:	e000      	b.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800322e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d040      	beq.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800324a:	035b      	lsls	r3, r3, #13
 800324c:	430b      	orrs	r3, r1
 800324e:	431a      	orrs	r2, r3
 8003250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003252:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d15c      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003296:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	d14b      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800329c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032a4:	f023 030f 	bic.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	6811      	ldr	r1, [r2, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b8:	e03c      	b.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d123      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003308:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d112      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800330e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003316:	f023 030f 	bic.w	r3, r3, #15
 800331a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800331e:	e009      	b.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003332:	e000      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003334:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800333e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003342:	4618      	mov	r0, r3
 8003344:	3764      	adds	r7, #100	; 0x64
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	50000100 	.word	0x50000100
 8003354:	50000400 	.word	0x50000400
 8003358:	50000500 	.word	0x50000500
 800335c:	50000300 	.word	0x50000300
 8003360:	50000700 	.word	0x50000700

08003364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d108      	bne.n	8003390 <ADC_Enable+0x2c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <ADC_Enable+0x2c>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <ADC_Enable+0x2e>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d143      	bne.n	800341e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b22      	ldr	r3, [pc, #136]	; (8003428 <ADC_Enable+0xc4>)
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02f      	b.n	8003420 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033d0:	f7fe ff7e 	bl	80022d0 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033d6:	e01b      	b.n	8003410 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d8:	f7fe ff7a 	bl	80022d0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d914      	bls.n	8003410 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d00d      	beq.n	8003410 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d1dc      	bne.n	80033d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	8000003f 	.word	0x8000003f

0800342c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d108      	bne.n	8003458 <ADC_Disable+0x2c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <ADC_Disable+0x2c>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <ADC_Disable+0x2e>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d047      	beq.n	80034ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030d 	and.w	r3, r3, #13
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10f      	bne.n	800348c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0202 	orr.w	r2, r2, #2
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2203      	movs	r2, #3
 8003482:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003484:	f7fe ff24 	bl	80022d0 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800348a:	e029      	b.n	80034e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e023      	b.n	80034f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034a8:	f7fe ff12 	bl	80022d0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d914      	bls.n	80034e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10d      	bne.n	80034e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d0dc      	beq.n	80034a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 809b 	beq.w	8003654 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352c:	d12a      	bne.n	8003584 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003532:	2b01      	cmp	r3, #1
 8003534:	d126      	bne.n	8003584 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800353a:	2b01      	cmp	r3, #1
 800353c:	d122      	bne.n	8003584 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800353e:	230c      	movs	r3, #12
 8003540:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003542:	e014      	b.n	800356e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4a46      	ldr	r2, [pc, #280]	; (8003660 <ADC_ConversionStop+0x168>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d90d      	bls.n	8003568 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e076      	b.n	8003656 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3301      	adds	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d1e3      	bne.n	8003544 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b60      	cmp	r3, #96	; 0x60
 8003588:	d015      	beq.n	80035b6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b04      	cmp	r3, #4
 8003596:	d10e      	bne.n	80035b6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0210 	orr.w	r2, r2, #16
 80035b4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d015      	beq.n	80035e8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d10e      	bne.n	80035e8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0220 	orr.w	r2, r2, #32
 80035e6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b60      	cmp	r3, #96	; 0x60
 80035ec:	d005      	beq.n	80035fa <ADC_ConversionStop+0x102>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b6c      	cmp	r3, #108	; 0x6c
 80035f2:	d105      	bne.n	8003600 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035f4:	230c      	movs	r3, #12
 80035f6:	617b      	str	r3, [r7, #20]
        break;
 80035f8:	e005      	b.n	8003606 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035fa:	2308      	movs	r3, #8
 80035fc:	617b      	str	r3, [r7, #20]
        break;
 80035fe:	e002      	b.n	8003606 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003600:	2304      	movs	r3, #4
 8003602:	617b      	str	r3, [r7, #20]
        break;
 8003604:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003606:	f7fe fe63 	bl	80022d0 <HAL_GetTick>
 800360a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800360c:	e01b      	b.n	8003646 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800360e:	f7fe fe5f 	bl	80022d0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b0b      	cmp	r3, #11
 800361a:	d914      	bls.n	8003646 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1dc      	bne.n	800360e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	000993ff 	.word	0x000993ff

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	; (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d0:	d301      	bcc.n	80037d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00f      	b.n	80037f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <SysTick_Config+0x40>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037de:	210f      	movs	r1, #15
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037e4:	f7ff ff8e 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SysTick_Config+0x40>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <SysTick_Config+0x40>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff29 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800382c:	f7ff ff3e 	bl	80036ac <__NVIC_GetPriorityGrouping>
 8003830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f7ff ff8e 	bl	8003758 <NVIC_EncodePriority>
 800383c:	4602      	mov	r2, r0
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff5d 	bl	8003704 <__NVIC_SetPriority>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff31 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffa2 	bl	80037c0 <SysTick_Config>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003896:	e154      	b.n	8003b42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8146 	beq.w	8003b3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d005      	beq.n	80038c8 <HAL_GPIO_Init+0x40>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d130      	bne.n	800392a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fe:	2201      	movs	r2, #1
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0201 	and.w	r2, r3, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d017      	beq.n	8003966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d123      	bne.n	80039ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	08da      	lsrs	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3208      	adds	r2, #8
 800397a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	08da      	lsrs	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3208      	adds	r2, #8
 80039b4:	6939      	ldr	r1, [r7, #16]
 80039b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a0 	beq.w	8003b3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fc:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <HAL_GPIO_Init+0x2d8>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_GPIO_Init+0x2d8>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6193      	str	r3, [r2, #24]
 8003a08:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_GPIO_Init+0x2d8>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a14:	4a53      	ldr	r2, [pc, #332]	; (8003b64 <HAL_GPIO_Init+0x2dc>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a3e:	d019      	beq.n	8003a74 <HAL_GPIO_Init+0x1ec>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <HAL_GPIO_Init+0x2e0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_GPIO_Init+0x1e8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a48      	ldr	r2, [pc, #288]	; (8003b6c <HAL_GPIO_Init+0x2e4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00d      	beq.n	8003a6c <HAL_GPIO_Init+0x1e4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a47      	ldr	r2, [pc, #284]	; (8003b70 <HAL_GPIO_Init+0x2e8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <HAL_GPIO_Init+0x1e0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <HAL_GPIO_Init+0x2ec>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_GPIO_Init+0x1dc>
 8003a60:	2304      	movs	r3, #4
 8003a62:	e008      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a64:	2305      	movs	r3, #5
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e004      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e002      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a74:	2300      	movs	r3, #0
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a86:	4937      	ldr	r1, [pc, #220]	; (8003b64 <HAL_GPIO_Init+0x2dc>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ab8:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aea3 	bne.w	8003898 <HAL_GPIO_Init+0x10>
  }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010000 	.word	0x40010000
 8003b68:	48000400 	.word	0x48000400
 8003b6c:	48000800 	.word	0x48000800
 8003b70:	48000c00 	.word	0x48000c00
 8003b74:	48001000 	.word	0x48001000
 8003b78:	40010400 	.word	0x40010400

08003b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e001      	b.n	8003b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc8:	e002      	b.n	8003bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e081      	b.n	8003cf2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f8ea 	bl	8001ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	e006      	b.n	8003c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d104      	bne.n	8003c76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	817b      	strh	r3, [r7, #10]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	813b      	strh	r3, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	f040 80f9 	bne.w	8003f16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x34>
 8003d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0ed      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_I2C_Mem_Write+0x4e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e0e6      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d52:	f7fe fabd 	bl	80022d0 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2319      	movs	r3, #25
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fac3 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d1      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d9c:	88f8      	ldrh	r0, [r7, #6]
 8003d9e:	893a      	ldrh	r2, [r7, #8]
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4603      	mov	r3, r0
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9d3 	bl	8004158 <I2C_RequestMemoryWrite>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0a9      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2bff      	cmp	r3, #255	; 0xff
 8003dcc:	d90e      	bls.n	8003dec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fc3d 	bl	8004664 <I2C_TransferConfig>
 8003dea:	e00f      	b.n	8003e0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fc2c 	bl	8004664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fabc 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e07b      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d034      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x1c8>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d130      	bne.n	8003ec4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa3f 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04d      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d90e      	bls.n	8003ea4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	2300      	movs	r3, #0
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fbe1 	bl	8004664 <I2C_TransferConfig>
 8003ea2:	e00f      	b.n	8003ec4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	8979      	ldrh	r1, [r7, #10]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fbd0 	bl	8004664 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d19e      	bne.n	8003e0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 faa2 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e01a      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_I2C_Mem_Write+0x224>)
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 80fd 	bne.w	8004146 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x34>
 8003f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0f1      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x4e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0ea      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fe f9a9 	bl	80022d0 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2319      	movs	r3, #25
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f9af 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0d5      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2222      	movs	r2, #34	; 0x22
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fc4:	88f8      	ldrh	r0, [r7, #6]
 8003fc6:	893a      	ldrh	r2, [r7, #8]
 8003fc8:	8979      	ldrh	r1, [r7, #10]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f913 	bl	8004200 <I2C_RequestMemoryRead>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0ad      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2bff      	cmp	r3, #255	; 0xff
 8003ff4:	d90e      	bls.n	8004014 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	4b52      	ldr	r3, [pc, #328]	; (8004150 <HAL_I2C_Mem_Read+0x22c>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fb29 	bl	8004664 <I2C_TransferConfig>
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_I2C_Mem_Read+0x22c>)
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fb18 	bl	8004664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2200      	movs	r2, #0
 800403c:	2104      	movs	r1, #4
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f956 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e07c      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d034      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x1d0>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d130      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f927 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04d      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d90e      	bls.n	80040d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fac9 	bl	8004664 <I2C_TransferConfig>
 80040d2:	e00f      	b.n	80040f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fab8 	bl	8004664 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d19a      	bne.n	8004034 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f98a 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01a      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_I2C_Mem_Read+0x230>)
 8004126:	400b      	ands	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	80002400 	.word	0x80002400
 8004154:	fe00e800 	.word	0xfe00e800

08004158 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	4603      	mov	r3, r0
 8004168:	817b      	strh	r3, [r7, #10]
 800416a:	460b      	mov	r3, r1
 800416c:	813b      	strh	r3, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <I2C_RequestMemoryWrite+0xa4>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa6f 	bl	8004664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f8ff 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e02c      	b.n	80041f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041a0:	893b      	ldrh	r3, [r7, #8]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
 80041aa:	e015      	b.n	80041d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ac:	893b      	ldrh	r3, [r7, #8]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f8e5 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e012      	b.n	80041f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f884 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	80002000 	.word	0x80002000

08004200 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	817b      	strh	r3, [r7, #10]
 8004212:	460b      	mov	r3, r1
 8004214:	813b      	strh	r3, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <I2C_RequestMemoryRead+0xa4>)
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fa1c 	bl	8004664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8ac 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e02c      	b.n	800429a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004246:	893b      	ldrh	r3, [r7, #8]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
 8004250:	e015      	b.n	800427e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29b      	uxth	r3, r3
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	69b9      	ldr	r1, [r7, #24]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f892 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e012      	b.n	800429a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2200      	movs	r2, #0
 8004286:	2140      	movs	r1, #64	; 0x40
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f831 	bl	80042f0 <I2C_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	80002000 	.word	0x80002000

080042a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d103      	bne.n	80042c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d007      	beq.n	80042e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	619a      	str	r2, [r3, #24]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004300:	e031      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004308:	d02d      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fd ffe1 	bl	80022d0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d122      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d113      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e00f      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0be      	beq.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800439a:	e033      	b.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f87f 	bl	80044a4 <I2C_IsErrorOccurred>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e031      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b6:	d025      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fd ff8a 	bl	80022d0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11a      	bne.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d013      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d1c4      	bne.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004428:	e02f      	b.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f838 	bl	80044a4 <I2C_IsErrorOccurred>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02d      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fd ff47 	bl	80022d0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11a      	bne.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d013      	beq.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d1c8      	bne.n	800442a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d8:	e049      	b.n	800456e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e0:	d045      	beq.n	800456e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fd fef5 	bl	80022d0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_IsErrorOccurred+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d13a      	bne.n	800456e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800450a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d121      	bne.n	8004560 <I2C_IsErrorOccurred+0xbc>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004522:	d01d      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d01a      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800453a:	f7fd fec9 	bl	80022d0 <HAL_GetTick>
 800453e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	e00e      	b.n	8004560 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004542:	f7fd fec5 	bl	80022d0 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b19      	cmp	r3, #25
 800454e:	d907      	bls.n	8004560 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800455e:	e006      	b.n	800456e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1e9      	bne.n	8004542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d003      	beq.n	8004584 <I2C_IsErrorOccurred+0xe0>
 800457c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0aa      	beq.n	80044da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01c      	beq.n	8004652 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fe45 	bl	80042a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <I2C_IsErrorOccurred+0x1bc>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004656:	4618      	mov	r0, r3
 8004658:	3728      	adds	r7, #40	; 0x28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	4613      	mov	r3, r2
 8004674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467c:	7a7b      	ldrb	r3, [r7, #9]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004684:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4313      	orrs	r3, r2
 800468e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004692:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	0d5b      	lsrs	r3, r3, #21
 800469e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <I2C_TransferConfig+0x60>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	43db      	mvns	r3, r3
 80046a8:	ea02 0103 	and.w	r1, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	03ff63ff 	.word	0x03ff63ff

080046c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d138      	bne.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e032      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800471a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d139      	bne.n	80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800477e:	2302      	movs	r3, #2
 8004780:	e033      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	; 0x24
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f8:	b08b      	sub	sp, #44	; 0x2c
 80047fa:	af06      	add	r7, sp, #24
 80047fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0c4      	b.n	8004992 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fd fc09 	bl	8002034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f003 fa6e 	bl	8007d10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e040      	b.n	80048bc <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	3301      	adds	r3, #1
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	440b      	add	r3, r1
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	440b      	add	r3, r1
 8004874:	3303      	adds	r3, #3
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	440b      	add	r3, r1
 8004888:	3338      	adds	r3, #56	; 0x38
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	333c      	adds	r3, #60	; 0x3c
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	440b      	add	r3, r1
 80048b0:	3340      	adds	r3, #64	; 0x40
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	3301      	adds	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3b9      	bcc.n	800483a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	e044      	b.n	8004956 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	f203 1369 	addw	r3, r3, #361	; 0x169
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	440b      	add	r3, r1
 8004932:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	3301      	adds	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3b5      	bcc.n	80048cc <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	687e      	ldr	r6, [r7, #4]
 8004968:	466d      	mov	r5, sp
 800496a:	f106 0410 	add.w	r4, r6, #16
 800496e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	1d33      	adds	r3, r6, #4
 8004978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f003 f9e3 	bl	8007d46 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800499c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f001 b823 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 817d 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049d8:	4bbc      	ldr	r3, [pc, #752]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d00c      	beq.n	80049fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049e4:	4bb9      	ldr	r3, [pc, #740]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d15c      	bne.n	8004aaa <HAL_RCC_OscConfig+0x10e>
 80049f0:	4bb6      	ldr	r3, [pc, #728]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d155      	bne.n	8004aaa <HAL_RCC_OscConfig+0x10e>
 80049fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d102      	bne.n	8004a30 <HAL_RCC_OscConfig+0x94>
 8004a2a:	4ba8      	ldr	r3, [pc, #672]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	e015      	b.n	8004a5c <HAL_RCC_OscConfig+0xc0>
 8004a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a58:	4b9c      	ldr	r3, [pc, #624]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a68:	fa92 f2a2 	rbit	r2, r2
 8004a6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a74:	fab2 f282 	clz	r2, r2
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	f042 0220 	orr.w	r2, r2, #32
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	f002 021f 	and.w	r2, r2, #31
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f202 	lsl.w	r2, r1, r2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 811f 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x334>
 8004a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 8116 	bne.w	8004cd0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f000 bfaf 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x12e>
 8004abc:	4b83      	ldr	r3, [pc, #524]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a82      	ldr	r2, [pc, #520]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e036      	b.n	8004b38 <HAL_RCC_OscConfig+0x19c>
 8004aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x158>
 8004ada:	4b7c      	ldr	r3, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7b      	ldr	r2, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b79      	ldr	r3, [pc, #484]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e021      	b.n	8004b38 <HAL_RCC_OscConfig+0x19c>
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x184>
 8004b06:	4b71      	ldr	r3, [pc, #452]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a70      	ldr	r2, [pc, #448]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6d      	ldr	r2, [pc, #436]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0x19c>
 8004b20:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a69      	ldr	r2, [pc, #420]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b38:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f023 020f 	bic.w	r2, r3, #15
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	495f      	ldr	r1, [pc, #380]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d059      	beq.n	8004c16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd fbb5 	bl	80022d0 <HAL_GetTick>
 8004b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fd fbb0 	bl	80022d0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b64      	cmp	r3, #100	; 0x64
 8004b7a:	d902      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	f000 bf43 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 8004b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x218>
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	e015      	b.n	8004be0 <HAL_RCC_OscConfig+0x244>
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bcc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004be8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004bec:	fa92 f2a2 	rbit	r2, r2
 8004bf0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004bf4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004bf8:	fab2 f282 	clz	r2, r2
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f042 0220 	orr.w	r2, r2, #32
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	f002 021f 	and.w	r2, r2, #31
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ab      	beq.n	8004b6c <HAL_RCC_OscConfig+0x1d0>
 8004c14:	e05d      	b.n	8004cd2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fd fb5b 	bl	80022d0 <HAL_GetTick>
 8004c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fb56 	bl	80022d0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	; 0x64
 8004c2e:	d902      	bls.n	8004c36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	f000 bee9 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 8004c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2cc>
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e015      	b.n	8004c94 <HAL_RCC_OscConfig+0x2f8>
 8004c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c90:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_RCC_OscConfig+0x330>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ca0:	fa92 f2a2 	rbit	r2, r2
 8004ca4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ca8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f002 021f 	and.w	r2, r2, #31
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ab      	bne.n	8004c20 <HAL_RCC_OscConfig+0x284>
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCC_OscConfig+0x336>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 817d 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ce8:	4ba6      	ldr	r3, [pc, #664]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cf4:	4ba3      	ldr	r3, [pc, #652]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d172      	bne.n	8004de6 <HAL_RCC_OscConfig+0x44a>
 8004d00:	4ba0      	ldr	r3, [pc, #640]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d16c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x44a>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0x3a0>
 8004d36:	4b93      	ldr	r3, [pc, #588]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	e013      	b.n	8004d64 <HAL_RCC_OscConfig+0x3c8>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d4e:	2302      	movs	r3, #2
 8004d50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d60:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2202      	movs	r2, #2
 8004d66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d6e:	fa92 f2a2 	rbit	r2, r2
 8004d72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d7a:	fab2 f282 	clz	r2, r2
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f042 0220 	orr.w	r2, r2, #32
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f002 021f 	and.w	r2, r2, #31
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCC_OscConfig+0x410>
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d002      	beq.n	8004dac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f000 be2e 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	21f8      	movs	r1, #248	; 0xf8
 8004dc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004dca:	fa91 f1a1 	rbit	r1, r1
 8004dce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004dd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004dd6:	fab1 f181 	clz	r1, r1
 8004dda:	b2c9      	uxtb	r1, r1
 8004ddc:	408b      	lsls	r3, r1
 8004dde:	4969      	ldr	r1, [pc, #420]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de4:	e0fd      	b.n	8004fe2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8088 	beq.w	8004f08 <HAL_RCC_OscConfig+0x56c>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2301      	movs	r3, #1
 8004e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fd fa54 	bl	80022d0 <HAL_GetTick>
 8004e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2e:	f7fd fa4f 	bl	80022d0 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	f000 bde2 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	fab3 f383 	clz	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4d8>
 8004e6e:	4b45      	ldr	r3, [pc, #276]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	e013      	b.n	8004e9c <HAL_RCC_OscConfig+0x500>
 8004e74:	2302      	movs	r3, #2
 8004e76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e86:	2302      	movs	r3, #2
 8004e88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e98:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ea2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ea6:	fa92 f2a2 	rbit	r2, r2
 8004eaa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004eae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004eb2:	fab2 f282 	clz	r2, r2
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	f042 0220 	orr.w	r2, r2, #32
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	f002 021f 	and.w	r2, r2, #31
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0af      	beq.n	8004e2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ece:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	21f8      	movs	r1, #248	; 0xf8
 8004ee4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004eec:	fa91 f1a1 	rbit	r1, r1
 8004ef0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ef4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ef8:	fab1 f181 	clz	r1, r1
 8004efc:	b2c9      	uxtb	r1, r1
 8004efe:	408b      	lsls	r3, r1
 8004f00:	4920      	ldr	r1, [pc, #128]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
 8004f06:	e06c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x646>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd f9cc 	bl	80022d0 <HAL_GetTick>
 8004f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f3e:	f7fd f9c7 	bl	80022d0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d902      	bls.n	8004f54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	f000 bd5a 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f5e:	fa93 f3a3 	rbit	r3, r3
 8004f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d104      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5ec>
 8004f7e:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <HAL_RCC_OscConfig+0x5e8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	e015      	b.n	8004fb0 <HAL_RCC_OscConfig+0x614>
 8004f84:	40021000 	.word	0x40021000
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fac:	4bc8      	ldr	r3, [pc, #800]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004fb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fba:	fa92 f2a2 	rbit	r2, r2
 8004fbe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fc2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fc6:	fab2 f282 	clz	r2, r2
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	f042 0220 	orr.w	r2, r2, #32
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	f002 021f 	and.w	r2, r2, #31
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ad      	bne.n	8004f3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8110 	beq.w	8005218 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d079      	beq.n	80050fc <HAL_RCC_OscConfig+0x760>
 8005008:	2301      	movs	r3, #1
 800500a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800501a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	4bab      	ldr	r3, [pc, #684]	; (80052d4 <HAL_RCC_OscConfig+0x938>)
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	461a      	mov	r2, r3
 800502e:	2301      	movs	r3, #1
 8005030:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fd f94d 	bl	80022d0 <HAL_GetTick>
 8005036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503c:	f7fd f948 	bl	80022d0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d902      	bls.n	8005052 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	f000 bcdb 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 8005052:	2302      	movs	r3, #2
 8005054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800506c:	2202      	movs	r2, #2
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005074:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	fa93 f2a3 	rbit	r2, r3
 800507e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005090:	2202      	movs	r2, #2
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f2a3 	rbit	r2, r3
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ac:	4b88      	ldr	r3, [pc, #544]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 80050ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050b8:	2102      	movs	r1, #2
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	fa93 f1a3 	rbit	r1, r3
 80050ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050d2:	6019      	str	r1, [r3, #0]
  return result;
 80050d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0a0      	beq.n	800503c <HAL_RCC_OscConfig+0x6a0>
 80050fa:	e08d      	b.n	8005218 <HAL_RCC_OscConfig+0x87c>
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	fa93 f2a3 	rbit	r2, r3
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800511e:	601a      	str	r2, [r3, #0]
  return result;
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005128:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	4b68      	ldr	r3, [pc, #416]	; (80052d4 <HAL_RCC_OscConfig+0x938>)
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd f8c7 	bl	80022d0 <HAL_GetTick>
 8005142:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005148:	f7fd f8c2 	bl	80022d0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d902      	bls.n	800515e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	f000 bc55 	b.w	8005a08 <HAL_RCC_OscConfig+0x106c>
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005166:	2202      	movs	r2, #2
 8005168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fa93 f2a3 	rbit	r2, r3
 8005178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800518a:	2202      	movs	r2, #2
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005192:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	fa93 f2a3 	rbit	r2, r3
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ae:	2202      	movs	r2, #2
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	fa93 f2a3 	rbit	r2, r3
 80051c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ca:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 80051cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051d6:	2102      	movs	r1, #2
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	fa93 f1a3 	rbit	r1, r3
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051f0:	6019      	str	r1, [r3, #0]
  return result;
 80051f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	fab3 f383 	clz	r3, r3
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2101      	movs	r1, #1
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d197      	bne.n	8005148 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 81a1 	beq.w	8005570 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005234:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d116      	bne.n	800526e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005240:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524a:	61d3      	str	r3, [r2, #28]
 800524c:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005266:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_RCC_OscConfig+0x93c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d11a      	bne.n	80052b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527a:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_RCC_OscConfig+0x93c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_RCC_OscConfig+0x93c>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005284:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fd f823 	bl	80022d0 <HAL_GetTick>
 800528a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	e009      	b.n	80052a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005290:	f7fd f81e 	bl	80022d0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e3b1      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCC_OscConfig+0x93c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0ef      	beq.n	8005290 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10d      	bne.n	80052dc <HAL_RCC_OscConfig+0x940>
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4a02      	ldr	r2, [pc, #8]	; (80052d0 <HAL_RCC_OscConfig+0x934>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6213      	str	r3, [r2, #32]
 80052cc:	e03c      	b.n	8005348 <HAL_RCC_OscConfig+0x9ac>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	10908120 	.word	0x10908120
 80052d8:	40007000 	.word	0x40007000
 80052dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10c      	bne.n	8005306 <HAL_RCC_OscConfig+0x96a>
 80052ec:	4bc1      	ldr	r3, [pc, #772]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4ac0      	ldr	r2, [pc, #768]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6213      	str	r3, [r2, #32]
 80052f8:	4bbe      	ldr	r3, [pc, #760]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4abd      	ldr	r2, [pc, #756]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6213      	str	r3, [r2, #32]
 8005304:	e020      	b.n	8005348 <HAL_RCC_OscConfig+0x9ac>
 8005306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b05      	cmp	r3, #5
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x994>
 8005316:	4bb7      	ldr	r3, [pc, #732]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4ab6      	ldr	r2, [pc, #728]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	6213      	str	r3, [r2, #32]
 8005322:	4bb4      	ldr	r3, [pc, #720]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4ab3      	ldr	r2, [pc, #716]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0x9ac>
 8005330:	4bb0      	ldr	r3, [pc, #704]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4aaf      	ldr	r2, [pc, #700]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6213      	str	r3, [r2, #32]
 800533c:	4bad      	ldr	r3, [pc, #692]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4aac      	ldr	r2, [pc, #688]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8081 	beq.w	800545c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7fc ffb9 	bl	80022d0 <HAL_GetTick>
 800535e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fc ffb4 	bl	80022d0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e345      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
 800537c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005380:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005384:	2202      	movs	r2, #2
 8005386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	fa93 f2a3 	rbit	r2, r3
 8005396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053a8:	2202      	movs	r2, #2
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	fa93 f2a3 	rbit	r2, r3
 80053ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053c2:	601a      	str	r2, [r3, #0]
  return result;
 80053c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f043 0302 	orr.w	r3, r3, #2
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d102      	bne.n	80053e8 <HAL_RCC_OscConfig+0xa4c>
 80053e2:	4b84      	ldr	r3, [pc, #528]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	e013      	b.n	8005410 <HAL_RCC_OscConfig+0xa74>
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053f0:	2202      	movs	r2, #2
 80053f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	fa93 f2a3 	rbit	r2, r3
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	4b79      	ldr	r3, [pc, #484]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005414:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005418:	2102      	movs	r1, #2
 800541a:	6011      	str	r1, [r2, #0]
 800541c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005420:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	fa92 f1a2 	rbit	r1, r2
 800542a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800542e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005432:	6011      	str	r1, [r2, #0]
  return result;
 8005434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005438:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	fab2 f282 	clz	r2, r2
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	f002 021f 	and.w	r2, r2, #31
 800544e:	2101      	movs	r1, #1
 8005450:	fa01 f202 	lsl.w	r2, r1, r2
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d084      	beq.n	8005364 <HAL_RCC_OscConfig+0x9c8>
 800545a:	e07f      	b.n	800555c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545c:	f7fc ff38 	bl	80022d0 <HAL_GetTick>
 8005460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005464:	e00b      	b.n	800547e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fc ff33 	bl	80022d0 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e2c4      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005486:	2202      	movs	r2, #2
 8005488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	fa93 f2a3 	rbit	r2, r3
 8005498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054aa:	2202      	movs	r2, #2
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	fa93 f2a3 	rbit	r2, r3
 80054bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054c4:	601a      	str	r2, [r3, #0]
  return result;
 80054c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d0:	fab3 f383 	clz	r3, r3
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d102      	bne.n	80054ea <HAL_RCC_OscConfig+0xb4e>
 80054e4:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	e013      	b.n	8005512 <HAL_RCC_OscConfig+0xb76>
 80054ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054f2:	2202      	movs	r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	fa93 f2a3 	rbit	r2, r3
 8005504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005508:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005516:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800551a:	2102      	movs	r1, #2
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005522:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	fa92 f1a2 	rbit	r1, r2
 800552c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005530:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005534:	6011      	str	r1, [r2, #0]
  return result;
 8005536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800553a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	fab2 f282 	clz	r2, r2
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	f002 021f 	and.w	r2, r2, #31
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f202 	lsl.w	r2, r1, r2
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d184      	bne.n	8005466 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800555c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8242 	beq.w	8005a06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <HAL_RCC_OscConfig+0xc58>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	f000 8213 	beq.w	80059b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b02      	cmp	r3, #2
 800559e:	f040 8162 	bne.w	8005866 <HAL_RCC_OscConfig+0xeca>
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	fa93 f2a3 	rbit	r2, r3
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055c6:	601a      	str	r2, [r3, #0]
  return result;
 80055c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d2:	fab3 f383 	clz	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	461a      	mov	r2, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fc fe72 	bl	80022d0 <HAL_GetTick>
 80055ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f0:	e00c      	b.n	800560c <HAL_RCC_OscConfig+0xc70>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fc fe6a 	bl	80022d0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1fd      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fa93 f2a3 	rbit	r2, r3
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005630:	601a      	str	r2, [r3, #0]
  return result;
 8005632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005636:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800563a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d102      	bne.n	8005656 <HAL_RCC_OscConfig+0xcba>
 8005650:	4bb0      	ldr	r3, [pc, #704]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e027      	b.n	80056a6 <HAL_RCC_OscConfig+0xd0a>
 8005656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800565e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005668:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	fa93 f2a3 	rbit	r2, r3
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005680:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	fa93 f2a3 	rbit	r2, r3
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	4b9c      	ldr	r3, [pc, #624]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056b2:	6011      	str	r1, [r2, #0]
 80056b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	fa92 f1a2 	rbit	r1, r2
 80056c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056ca:	6011      	str	r1, [r2, #0]
  return result;
 80056cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	fab2 f282 	clz	r2, r2
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	f042 0220 	orr.w	r2, r2, #32
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	f002 021f 	and.w	r2, r2, #31
 80056e6:	2101      	movs	r1, #1
 80056e8:	fa01 f202 	lsl.w	r2, r1, r2
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d182      	bne.n	80055f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f2:	4b88      	ldr	r3, [pc, #544]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	430b      	orrs	r3, r1
 8005714:	497f      	ldr	r1, [pc, #508]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 8005716:	4313      	orrs	r3, r2
 8005718:	604b      	str	r3, [r1, #4]
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005722:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	fa93 f2a3 	rbit	r2, r3
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800573e:	601a      	str	r2, [r3, #0]
  return result;
 8005740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005744:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005748:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	461a      	mov	r2, r3
 800575c:	2301      	movs	r3, #1
 800575e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fc fdb6 	bl	80022d0 <HAL_GetTick>
 8005764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005768:	e009      	b.n	800577e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576a:	f7fc fdb1 	bl	80022d0 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e144      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
 800577e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005782:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	fa93 f2a3 	rbit	r2, r3
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057a2:	601a      	str	r2, [r3, #0]
  return result;
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d102      	bne.n	80057c8 <HAL_RCC_OscConfig+0xe2c>
 80057c2:	4b54      	ldr	r3, [pc, #336]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	e027      	b.n	8005818 <HAL_RCC_OscConfig+0xe7c>
 80057c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	fa93 f2a3 	rbit	r2, r3
 80057e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005800:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	fa93 f2a3 	rbit	r2, r3
 800580a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800581c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005824:	6011      	str	r1, [r2, #0]
 8005826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800582a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	fa92 f1a2 	rbit	r1, r2
 8005834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005838:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800583c:	6011      	str	r1, [r2, #0]
  return result;
 800583e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005842:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	fab2 f282 	clz	r2, r2
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	f042 0220 	orr.w	r2, r2, #32
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	f002 021f 	and.w	r2, r2, #31
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f202 	lsl.w	r2, r1, r2
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d082      	beq.n	800576a <HAL_RCC_OscConfig+0xdce>
 8005864:	e0cf      	b.n	8005a06 <HAL_RCC_OscConfig+0x106a>
 8005866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800586e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005878:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	fa93 f2a3 	rbit	r2, r3
 8005882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005886:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800588a:	601a      	str	r2, [r3, #0]
  return result;
 800588c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005890:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005894:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	461a      	mov	r2, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fc fd10 	bl	80022d0 <HAL_GetTick>
 80058b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058b4:	e009      	b.n	80058ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fc fd0b 	bl	80022d0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e09e      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
 80058ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	fa93 f2a3 	rbit	r2, r3
 80058e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058ee:	601a      	str	r2, [r3, #0]
  return result;
 80058f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fa:	fab3 f383 	clz	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d104      	bne.n	8005918 <HAL_RCC_OscConfig+0xf7c>
 800590e:	4b01      	ldr	r3, [pc, #4]	; (8005914 <HAL_RCC_OscConfig+0xf78>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	e029      	b.n	8005968 <HAL_RCC_OscConfig+0xfcc>
 8005914:	40021000 	.word	0x40021000
 8005918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005942:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005950:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	fa93 f2a3 	rbit	r2, r3
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCC_OscConfig+0x1078>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800596c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005970:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800597a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	fa92 f1a2 	rbit	r1, r2
 8005984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005988:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800598c:	6011      	str	r1, [r2, #0]
  return result;
 800598e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005992:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	fab2 f282 	clz	r2, r2
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	f042 0220 	orr.w	r2, r2, #32
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	f002 021f 	and.w	r2, r2, #31
 80059a8:	2101      	movs	r1, #1
 80059aa:	fa01 f202 	lsl.w	r2, r1, r2
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d180      	bne.n	80058b6 <HAL_RCC_OscConfig+0xf1a>
 80059b4:	e027      	b.n	8005a06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e01e      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCC_OscConfig+0x1078>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80059ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d001      	beq.n	8005a06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000

08005a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b09e      	sub	sp, #120	; 0x78
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e162      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b90      	ldr	r3, [pc, #576]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d910      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b8d      	ldr	r3, [pc, #564]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 0207 	bic.w	r2, r3, #7
 8005a46:	498b      	ldr	r1, [pc, #556]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b89      	ldr	r3, [pc, #548]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e14a      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a6c:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	497f      	ldr	r1, [pc, #508]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80dc 	beq.w	8005c44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d13c      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xf6>
 8005a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a9c:	fa93 f3a3 	rbit	r3, r3
 8005aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa4:	fab3 f383 	clz	r3, r3
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d102      	bne.n	8005abe <HAL_RCC_ClockConfig+0xa6>
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	e00f      	b.n	8005ade <HAL_RCC_ClockConfig+0xc6>
 8005abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac6:	fa93 f3a3 	rbit	r3, r3
 8005aca:	667b      	str	r3, [r7, #100]	; 0x64
 8005acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ada:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ae2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ae6:	fa92 f2a2 	rbit	r2, r2
 8005aea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aee:	fab2 f282 	clz	r2, r2
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	f042 0220 	orr.w	r2, r2, #32
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	f002 021f 	and.w	r2, r2, #31
 8005afe:	2101      	movs	r1, #1
 8005b00:	fa01 f202 	lsl.w	r2, r1, r2
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d17b      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e0f3      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d13c      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x178>
 8005b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b26:	fab3 f383 	clz	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d102      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x128>
 8005b3a:	4b4f      	ldr	r3, [pc, #316]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	e00f      	b.n	8005b60 <HAL_RCC_ClockConfig+0x148>
 8005b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b48:	fa93 f3a3 	rbit	r3, r3
 8005b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b52:	643b      	str	r3, [r7, #64]	; 0x40
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	fa93 f3a3 	rbit	r3, r3
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5c:	4b46      	ldr	r3, [pc, #280]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b64:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b68:	fa92 f2a2 	rbit	r2, r2
 8005b6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b70:	fab2 f282 	clz	r2, r2
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	f042 0220 	orr.w	r2, r2, #32
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f002 021f 	and.w	r2, r2, #31
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f202 	lsl.w	r2, r1, r2
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d13a      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0b2      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
 8005b90:	2302      	movs	r3, #2
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	fa93 f3a3 	rbit	r3, r3
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	fab3 f383 	clz	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1a0>
 8005bb2:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	e00d      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x1bc>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	61ba      	str	r2, [r7, #24]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	fa92 f2a2 	rbit	r2, r2
 8005bde:	617a      	str	r2, [r7, #20]
  return result;
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	fab2 f282 	clz	r2, r2
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	f042 0220 	orr.w	r2, r2, #32
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	f002 021f 	and.w	r2, r2, #31
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e079      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f023 0203 	bic.w	r2, r3, #3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	491a      	ldr	r1, [pc, #104]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c14:	f7fc fb5c 	bl	80022d0 <HAL_GetTick>
 8005c18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c1c:	f7fc fb58 	bl	80022d0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e061      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <HAL_RCC_ClockConfig+0x260>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 020c 	and.w	r2, r3, #12
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d1eb      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d214      	bcs.n	8005c7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 0207 	bic.w	r2, r3, #7
 8005c5a:	4906      	ldr	r1, [pc, #24]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <HAL_RCC_ClockConfig+0x25c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e040      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2de>
 8005c74:	40022000 	.word	0x40022000
 8005c78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_RCC_ClockConfig+0x2e8>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	491a      	ldr	r1, [pc, #104]	; (8005d00 <HAL_RCC_ClockConfig+0x2e8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HAL_RCC_ClockConfig+0x2e8>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4912      	ldr	r1, [pc, #72]	; (8005d00 <HAL_RCC_ClockConfig+0x2e8>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cba:	f000 f829 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <HAL_RCC_ClockConfig+0x2e8>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc8:	22f0      	movs	r2, #240	; 0xf0
 8005cca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	fa92 f2a2 	rbit	r2, r2
 8005cd2:	60fa      	str	r2, [r7, #12]
  return result;
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	fab2 f282 	clz	r2, r2
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	40d3      	lsrs	r3, r2
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_RCC_ClockConfig+0x2ec>)
 8005ce0:	5cd3      	ldrb	r3, [r2, r3]
 8005ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ce6:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <HAL_RCC_ClockConfig+0x2f0>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_RCC_ClockConfig+0x2f4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fc faaa 	bl	8002248 <HAL_InitTick>
  
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3778      	adds	r7, #120	; 0x78
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	0800958c 	.word	0x0800958c
 8005d08:	20000038 	.word	0x20000038
 8005d0c:	2000003c 	.word	0x2000003c

08005d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b08b      	sub	sp, #44	; 0x2c
 8005d14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d2a:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d002      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0x30>
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCC_GetSysClockFreq+0x36>
 8005d3e:	e03c      	b.n	8005dba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d40:	4b24      	ldr	r3, [pc, #144]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d42:	623b      	str	r3, [r7, #32]
      break;
 8005d44:	e03c      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005d50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	fa92 f2a2 	rbit	r2, r2
 8005d58:	607a      	str	r2, [r7, #4]
  return result;
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	fab2 f282 	clz	r2, r2
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	40d3      	lsrs	r3, r2
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d66:	5cd3      	ldrb	r3, [r2, r3]
 8005d68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d6a:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	220f      	movs	r2, #15
 8005d74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	fa92 f2a2 	rbit	r2, r2
 8005d7c:	60fa      	str	r2, [r7, #12]
  return result;
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	fab2 f282 	clz	r2, r2
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	40d3      	lsrs	r3, r2
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d8a:	5cd3      	ldrb	r3, [r2, r3]
 8005d8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d98:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
 8005da8:	e004      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	623b      	str	r3, [r7, #32]
      break;
 8005db8:	e002      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dbc:	623b      	str	r3, [r7, #32]
      break;
 8005dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	372c      	adds	r7, #44	; 0x2c
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	007a1200 	.word	0x007a1200
 8005dd8:	0800959c 	.word	0x0800959c
 8005ddc:	080095ac 	.word	0x080095ac
 8005de0:	003d0900 	.word	0x003d0900

08005de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b092      	sub	sp, #72	; 0x48
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80d4 	beq.w	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e08:	4b4e      	ldr	r3, [pc, #312]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10e      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e14:	4b4b      	ldr	r3, [pc, #300]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4a4a      	ldr	r2, [pc, #296]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	61d3      	str	r3, [r2, #28]
 8005e20:	4b48      	ldr	r3, [pc, #288]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e32:	4b45      	ldr	r3, [pc, #276]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d118      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3e:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a41      	ldr	r2, [pc, #260]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4a:	f7fc fa41 	bl	80022d0 <HAL_GetTick>
 8005e4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e50:	e008      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e52:	f7fc fa3d 	bl	80022d0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b64      	cmp	r3, #100	; 0x64
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e169      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e64:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e70:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8084 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d07c      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e90:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eaa:	fab3 f383 	clz	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2301      	movs	r3, #1
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	fa93 f3a3 	rbit	r3, r3
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ece:	fab3 f383 	clz	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d04b      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fc f9ed 	bl	80022d0 <HAL_GetTick>
 8005ef6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fc f9e9 	bl	80022d0 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e113      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005f10:	2302      	movs	r3, #2
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	fa93 f3a3 	rbit	r3, r3
 8005f26:	61fb      	str	r3, [r7, #28]
  return result;
 8005f28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	fab3 f383 	clz	r3, r3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f043 0302 	orr.w	r3, r3, #2
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d108      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f3e:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	e00d      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f44:	40021000 	.word	0x40021000
 8005f48:	40007000 	.word	0x40007000
 8005f4c:	10908100 	.word	0x10908100
 8005f50:	2302      	movs	r3, #2
 8005f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa93 f3a3 	rbit	r3, r3
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	4b78      	ldr	r3, [pc, #480]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2202      	movs	r2, #2
 8005f62:	613a      	str	r2, [r7, #16]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	fa92 f2a2 	rbit	r2, r2
 8005f6a:	60fa      	str	r2, [r7, #12]
  return result;
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	fab2 f282 	clz	r2, r2
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	f002 021f 	and.w	r2, r2, #31
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f202 	lsl.w	r2, r1, r2
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0b7      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f8a:	4b6d      	ldr	r3, [pc, #436]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	496a      	ldr	r1, [pc, #424]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fbc:	4b60      	ldr	r3, [pc, #384]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	f023 0203 	bic.w	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	495d      	ldr	r1, [pc, #372]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fda:	4b59      	ldr	r3, [pc, #356]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4956      	ldr	r1, [pc, #344]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ff8:	4b51      	ldr	r3, [pc, #324]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	494e      	ldr	r1, [pc, #312]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006016:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f023 0210 	bic.w	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4947      	ldr	r1, [pc, #284]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006034:	4b42      	ldr	r3, [pc, #264]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	493f      	ldr	r1, [pc, #252]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f023 0220 	bic.w	r2, r3, #32
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4938      	ldr	r1, [pc, #224]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006060:	4313      	orrs	r3, r2
 8006062:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006070:	4b33      	ldr	r3, [pc, #204]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	4930      	ldr	r1, [pc, #192]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	4929      	ldr	r1, [pc, #164]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800609c:	4313      	orrs	r3, r2
 800609e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060ac:	4b24      	ldr	r3, [pc, #144]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	4921      	ldr	r1, [pc, #132]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	491a      	ldr	r1, [pc, #104]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	4912      	ldr	r1, [pc, #72]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	490b      	ldr	r1, [pc, #44]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3748      	adds	r7, #72	; 0x48
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40021000 	.word	0x40021000

08006144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e09d      	b.n	8006292 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d009      	beq.n	800617c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	61da      	str	r2, [r3, #28]
 800616e:	e005      	b.n	800617c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb fe64 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061bc:	d902      	bls.n	80061c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e002      	b.n	80061ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061d2:	d007      	beq.n	80061e4 <HAL_SPI_Init+0xa0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	ea42 0103 	orr.w	r1, r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	f003 0204 	and.w	r2, r3, #4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006260:	ea42 0103 	orr.w	r1, r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006280:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e049      	b.n	8006340 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fb fe11 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f000 ff37 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e049      	b.n	80063ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb fe06 	bl	8001f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 fee0 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_TIM_PWM_Start+0x24>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	e03c      	b.n	8006496 <HAL_TIM_PWM_Start+0x9e>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b04      	cmp	r3, #4
 8006420:	d109      	bne.n	8006436 <HAL_TIM_PWM_Start+0x3e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e02f      	b.n	8006496 <HAL_TIM_PWM_Start+0x9e>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d109      	bne.n	8006450 <HAL_TIM_PWM_Start+0x58>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e022      	b.n	8006496 <HAL_TIM_PWM_Start+0x9e>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b0c      	cmp	r3, #12
 8006454:	d109      	bne.n	800646a <HAL_TIM_PWM_Start+0x72>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	bf14      	ite	ne
 8006462:	2301      	movne	r3, #1
 8006464:	2300      	moveq	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	e015      	b.n	8006496 <HAL_TIM_PWM_Start+0x9e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b10      	cmp	r3, #16
 800646e:	d109      	bne.n	8006484 <HAL_TIM_PWM_Start+0x8c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	e008      	b.n	8006496 <HAL_TIM_PWM_Start+0x9e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e097      	b.n	80065ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Start+0xb6>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ac:	e023      	b.n	80064f6 <HAL_TIM_PWM_Start+0xfe>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0xc6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064bc:	e01b      	b.n	80064f6 <HAL_TIM_PWM_Start+0xfe>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Start+0xd6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064cc:	e013      	b.n	80064f6 <HAL_TIM_PWM_Start+0xfe>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0xe6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064dc:	e00b      	b.n	80064f6 <HAL_TIM_PWM_Start+0xfe>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_PWM_Start+0xf6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ec:	e003      	b.n	80064f6 <HAL_TIM_PWM_Start+0xfe>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2201      	movs	r2, #1
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 fb42 	bl	8007b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a33      	ldr	r2, [pc, #204]	; (80065d8 <HAL_TIM_PWM_Start+0x1e0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_TIM_PWM_Start+0x13e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a32      	ldr	r2, [pc, #200]	; (80065dc <HAL_TIM_PWM_Start+0x1e4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_TIM_PWM_Start+0x13e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <HAL_TIM_PWM_Start+0x1e8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIM_PWM_Start+0x13e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <HAL_TIM_PWM_Start+0x1ec>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_TIM_PWM_Start+0x13e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <HAL_TIM_PWM_Start+0x1f0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_TIM_PWM_Start+0x142>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <HAL_TIM_PWM_Start+0x144>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800654e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <HAL_TIM_PWM_Start+0x1e0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <HAL_TIM_PWM_Start+0x194>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d013      	beq.n	800658c <HAL_TIM_PWM_Start+0x194>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a20      	ldr	r2, [pc, #128]	; (80065ec <HAL_TIM_PWM_Start+0x1f4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_TIM_PWM_Start+0x194>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_TIM_PWM_Start+0x1f8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_TIM_PWM_Start+0x194>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <HAL_TIM_PWM_Start+0x1e4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIM_PWM_Start+0x194>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d115      	bne.n	80065b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <HAL_TIM_PWM_Start+0x1fc>)
 8006594:	4013      	ands	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b06      	cmp	r3, #6
 800659c:	d015      	beq.n	80065ca <HAL_TIM_PWM_Start+0x1d2>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a4:	d011      	beq.n	80065ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b6:	e008      	b.n	80065ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e000      	b.n	80065cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40013400 	.word	0x40013400
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	00010007 	.word	0x00010007

080065f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e049      	b.n	800669e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f841 	bl	80066a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f000 fd88 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <HAL_TIM_IC_Start_IT+0x1e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	e023      	b.n	8006722 <HAL_TIM_IC_Start_IT+0x66>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d104      	bne.n	80066ea <HAL_TIM_IC_Start_IT+0x2e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e01b      	b.n	8006722 <HAL_TIM_IC_Start_IT+0x66>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_IC_Start_IT+0x3e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	e013      	b.n	8006722 <HAL_TIM_IC_Start_IT+0x66>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	d104      	bne.n	800670a <HAL_TIM_IC_Start_IT+0x4e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006706:	b2db      	uxtb	r3, r3
 8006708:	e00b      	b.n	8006722 <HAL_TIM_IC_Start_IT+0x66>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b10      	cmp	r3, #16
 800670e:	d104      	bne.n	800671a <HAL_TIM_IC_Start_IT+0x5e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006716:	b2db      	uxtb	r3, r3
 8006718:	e003      	b.n	8006722 <HAL_TIM_IC_Start_IT+0x66>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006720:	b2db      	uxtb	r3, r3
 8006722:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_TIM_IC_Start_IT+0x78>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e013      	b.n	800675c <HAL_TIM_IC_Start_IT+0xa0>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d104      	bne.n	8006744 <HAL_TIM_IC_Start_IT+0x88>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e00b      	b.n	800675c <HAL_TIM_IC_Start_IT+0xa0>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b08      	cmp	r3, #8
 8006748:	d104      	bne.n	8006754 <HAL_TIM_IC_Start_IT+0x98>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e003      	b.n	800675c <HAL_TIM_IC_Start_IT+0xa0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800675a:	b2db      	uxtb	r3, r3
 800675c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d102      	bne.n	800676a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006764:	7b7b      	ldrb	r3, [r7, #13]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d001      	beq.n	800676e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0d8      	b.n	8006920 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_TIM_IC_Start_IT+0xc2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	e023      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x10a>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d104      	bne.n	800678e <HAL_TIM_IC_Start_IT+0xd2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	e01b      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x10a>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d104      	bne.n	800679e <HAL_TIM_IC_Start_IT+0xe2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679c:	e013      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x10a>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_IC_Start_IT+0xf2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x10a>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d104      	bne.n	80067be <HAL_TIM_IC_Start_IT+0x102>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x10a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_TIM_IC_Start_IT+0x11a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	e013      	b.n	80067fe <HAL_TIM_IC_Start_IT+0x142>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d104      	bne.n	80067e6 <HAL_TIM_IC_Start_IT+0x12a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e4:	e00b      	b.n	80067fe <HAL_TIM_IC_Start_IT+0x142>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d104      	bne.n	80067f6 <HAL_TIM_IC_Start_IT+0x13a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067f4:	e003      	b.n	80067fe <HAL_TIM_IC_Start_IT+0x142>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b0c      	cmp	r3, #12
 8006802:	d841      	bhi.n	8006888 <HAL_TIM_IC_Start_IT+0x1cc>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <HAL_TIM_IC_Start_IT+0x150>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006841 	.word	0x08006841
 8006810:	08006889 	.word	0x08006889
 8006814:	08006889 	.word	0x08006889
 8006818:	08006889 	.word	0x08006889
 800681c:	08006853 	.word	0x08006853
 8006820:	08006889 	.word	0x08006889
 8006824:	08006889 	.word	0x08006889
 8006828:	08006889 	.word	0x08006889
 800682c:	08006865 	.word	0x08006865
 8006830:	08006889 	.word	0x08006889
 8006834:	08006889 	.word	0x08006889
 8006838:	08006889 	.word	0x08006889
 800683c:	08006877 	.word	0x08006877
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0202 	orr.w	r2, r2, #2
 800684e:	60da      	str	r2, [r3, #12]
      break;
 8006850:	e01d      	b.n	800688e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0204 	orr.w	r2, r2, #4
 8006860:	60da      	str	r2, [r3, #12]
      break;
 8006862:	e014      	b.n	800688e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0208 	orr.w	r2, r2, #8
 8006872:	60da      	str	r2, [r3, #12]
      break;
 8006874:	e00b      	b.n	800688e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0210 	orr.w	r2, r2, #16
 8006884:	60da      	str	r2, [r3, #12]
      break;
 8006886:	e002      	b.n	800688e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	bf00      	nop
  }

  if (status == HAL_OK)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d144      	bne.n	800691e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2201      	movs	r2, #1
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f973 	bl	8007b88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a20      	ldr	r2, [pc, #128]	; (8006928 <HAL_TIM_IC_Start_IT+0x26c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_TIM_IC_Start_IT+0x222>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b4:	d013      	beq.n	80068de <HAL_TIM_IC_Start_IT+0x222>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1c      	ldr	r2, [pc, #112]	; (800692c <HAL_TIM_IC_Start_IT+0x270>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIM_IC_Start_IT+0x222>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <HAL_TIM_IC_Start_IT+0x274>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIM_IC_Start_IT+0x222>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_TIM_IC_Start_IT+0x278>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIM_IC_Start_IT+0x222>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a17      	ldr	r2, [pc, #92]	; (8006938 <HAL_TIM_IC_Start_IT+0x27c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d115      	bne.n	800690a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	4b15      	ldr	r3, [pc, #84]	; (800693c <HAL_TIM_IC_Start_IT+0x280>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d015      	beq.n	800691c <HAL_TIM_IC_Start_IT+0x260>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d011      	beq.n	800691c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	e008      	b.n	800691c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e000      	b.n	800691e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40013400 	.word	0x40013400
 8006938:	40014000 	.word	0x40014000
 800693c:	00010007 	.word	0x00010007

08006940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0202 	mvn.w	r2, #2
 800696c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa f922 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fbc0 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fbc7 	bl	8007124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d122      	bne.n	80069f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d11b      	bne.n	80069f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0204 	mvn.w	r2, #4
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fa f8f8 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb96 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb9d 	bl	8007124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d122      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d11b      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0208 	mvn.w	r2, #8
 8006a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa f8ce 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 8006a30:	e005      	b.n	8006a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb6c 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb73 	bl	8007124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d122      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d11b      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0210 	mvn.w	r2, #16
 8006a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fa f8a4 	bl	8000bcc <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fb42 	bl	8007110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb49 	bl	8007124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0201 	mvn.w	r2, #1
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fb1c 	bl	80070fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b80      	cmp	r3, #128	; 0x80
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f8fc 	bl	8007ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afe:	d10e      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f8ef 	bl	8007cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d10e      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d107      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 faf7 	bl	8007138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d10e      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d107      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0220 	mvn.w	r2, #32
 8006b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f8af 	bl	8007cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e088      	b.n	8006cae <HAL_TIM_IC_ConfigChannel+0x130>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d11b      	bne.n	8006be2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f000 fe2d 	bl	8007818 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 020c 	bic.w	r2, r2, #12
 8006bcc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6999      	ldr	r1, [r3, #24]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	619a      	str	r2, [r3, #24]
 8006be0:	e060      	b.n	8006ca4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d11c      	bne.n	8006c22 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f000 fea5 	bl	8007946 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c0a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6999      	ldr	r1, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	619a      	str	r2, [r3, #24]
 8006c20:	e040      	b.n	8006ca4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d11b      	bne.n	8006c60 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f000 fef2 	bl	8007a20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 020c 	bic.w	r2, r2, #12
 8006c4a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69d9      	ldr	r1, [r3, #28]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	61da      	str	r2, [r3, #28]
 8006c5e:	e021      	b.n	8006ca4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d11c      	bne.n	8006ca0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6819      	ldr	r1, [r3, #0]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f000 ff0f 	bl	8007a98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c88:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	021a      	lsls	r2, r3, #8
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	61da      	str	r2, [r3, #28]
 8006c9e:	e001      	b.n	8006ca4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e0ff      	b.n	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b14      	cmp	r3, #20
 8006ce2:	f200 80f0 	bhi.w	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006ec7 	.word	0x08006ec7
 8006cf4:	08006ec7 	.word	0x08006ec7
 8006cf8:	08006ec7 	.word	0x08006ec7
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006ec7 	.word	0x08006ec7
 8006d04:	08006ec7 	.word	0x08006ec7
 8006d08:	08006ec7 	.word	0x08006ec7
 8006d0c:	08006dc3 	.word	0x08006dc3
 8006d10:	08006ec7 	.word	0x08006ec7
 8006d14:	08006ec7 	.word	0x08006ec7
 8006d18:	08006ec7 	.word	0x08006ec7
 8006d1c:	08006e03 	.word	0x08006e03
 8006d20:	08006ec7 	.word	0x08006ec7
 8006d24:	08006ec7 	.word	0x08006ec7
 8006d28:	08006ec7 	.word	0x08006ec7
 8006d2c:	08006e45 	.word	0x08006e45
 8006d30:	08006ec7 	.word	0x08006ec7
 8006d34:	08006ec7 	.word	0x08006ec7
 8006d38:	08006ec7 	.word	0x08006ec7
 8006d3c:	08006e85 	.word	0x08006e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa90 	bl	800726c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	619a      	str	r2, [r3, #24]
      break;
 8006d7e:	e0a5      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fb00 	bl	800738c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]
      break;
 8006dc0:	e084      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb69 	bl	80074a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0204 	bic.w	r2, r2, #4
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
      break;
 8006e00:	e064      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fbd1 	bl	80075b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	61da      	str	r2, [r3, #28]
      break;
 8006e42:	e043      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fc1a 	bl	8007684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e82:	e023      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fc5e 	bl	800774c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ec4:	e002      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIM_ConfigClockSource+0x1c>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0b6      	b.n	800706a <HAL_TIM_ConfigClockSource+0x18a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f38:	d03e      	beq.n	8006fb8 <HAL_TIM_ConfigClockSource+0xd8>
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3e:	f200 8087 	bhi.w	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f46:	f000 8086 	beq.w	8007056 <HAL_TIM_ConfigClockSource+0x176>
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	d87f      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f50:	2b70      	cmp	r3, #112	; 0x70
 8006f52:	d01a      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0xaa>
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d87b      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f58:	2b60      	cmp	r3, #96	; 0x60
 8006f5a:	d050      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x11e>
 8006f5c:	2b60      	cmp	r3, #96	; 0x60
 8006f5e:	d877      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f60:	2b50      	cmp	r3, #80	; 0x50
 8006f62:	d03c      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0xfe>
 8006f64:	2b50      	cmp	r3, #80	; 0x50
 8006f66:	d873      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d058      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x13e>
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d86f      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	d064      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15e>
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d86b      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d060      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15e>
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d867      	bhi.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05c      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15e>
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d05a      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x15e>
 8006f88:	e062      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f000 fdd5 	bl	8007b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	609a      	str	r2, [r3, #8]
      break;
 8006fb6:	e04f      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6899      	ldr	r1, [r3, #8]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f000 fdbe 	bl	8007b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fda:	609a      	str	r2, [r3, #8]
      break;
 8006fdc:	e03c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 fc7c 	bl	80078e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2150      	movs	r1, #80	; 0x50
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd8b 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e02c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	461a      	mov	r2, r3
 800700c:	f000 fcd8 	bl	80079c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2160      	movs	r1, #96	; 0x60
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fd7b 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 800701c:	e01c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 fc5c 	bl	80078e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2140      	movs	r1, #64	; 0x40
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fd6b 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 800703c:	e00c      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f000 fd62 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 800704e:	e003      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	e000      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d831      	bhi.n	80070ec <HAL_TIM_ReadCapturedValue+0x78>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_TIM_ReadCapturedValue+0x1c>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070c5 	.word	0x080070c5
 8007094:	080070ed 	.word	0x080070ed
 8007098:	080070ed 	.word	0x080070ed
 800709c:	080070ed 	.word	0x080070ed
 80070a0:	080070cf 	.word	0x080070cf
 80070a4:	080070ed 	.word	0x080070ed
 80070a8:	080070ed 	.word	0x080070ed
 80070ac:	080070ed 	.word	0x080070ed
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070ed 	.word	0x080070ed
 80070b8:	080070ed 	.word	0x080070ed
 80070bc:	080070ed 	.word	0x080070ed
 80070c0:	080070e3 	.word	0x080070e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	60fb      	str	r3, [r7, #12]

      break;
 80070cc:	e00f      	b.n	80070ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	60fb      	str	r3, [r7, #12]

      break;
 80070d6:	e00a      	b.n	80070ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	60fb      	str	r3, [r7, #12]

      break;
 80070e0:	e005      	b.n	80070ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	60fb      	str	r3, [r7, #12]

      break;
 80070ea:	e000      	b.n	80070ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80070ec:	bf00      	nop
  }

  return tmpreg;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3c      	ldr	r2, [pc, #240]	; (8007250 <TIM_Base_SetConfig+0x104>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00f      	beq.n	8007184 <TIM_Base_SetConfig+0x38>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716a:	d00b      	beq.n	8007184 <TIM_Base_SetConfig+0x38>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a39      	ldr	r2, [pc, #228]	; (8007254 <TIM_Base_SetConfig+0x108>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <TIM_Base_SetConfig+0x38>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a38      	ldr	r2, [pc, #224]	; (8007258 <TIM_Base_SetConfig+0x10c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_Base_SetConfig+0x38>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a37      	ldr	r2, [pc, #220]	; (800725c <TIM_Base_SetConfig+0x110>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d108      	bne.n	8007196 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2d      	ldr	r2, [pc, #180]	; (8007250 <TIM_Base_SetConfig+0x104>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01b      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a4:	d017      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2a      	ldr	r2, [pc, #168]	; (8007254 <TIM_Base_SetConfig+0x108>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a29      	ldr	r2, [pc, #164]	; (8007258 <TIM_Base_SetConfig+0x10c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a28      	ldr	r2, [pc, #160]	; (800725c <TIM_Base_SetConfig+0x110>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a27      	ldr	r2, [pc, #156]	; (8007260 <TIM_Base_SetConfig+0x114>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a26      	ldr	r2, [pc, #152]	; (8007264 <TIM_Base_SetConfig+0x118>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0x8a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a25      	ldr	r2, [pc, #148]	; (8007268 <TIM_Base_SetConfig+0x11c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	; (8007250 <TIM_Base_SetConfig+0x104>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00f      	beq.n	8007234 <TIM_Base_SetConfig+0xe8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a11      	ldr	r2, [pc, #68]	; (800725c <TIM_Base_SetConfig+0x110>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00b      	beq.n	8007234 <TIM_Base_SetConfig+0xe8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a10      	ldr	r2, [pc, #64]	; (8007260 <TIM_Base_SetConfig+0x114>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d007      	beq.n	8007234 <TIM_Base_SetConfig+0xe8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a0f      	ldr	r2, [pc, #60]	; (8007264 <TIM_Base_SetConfig+0x118>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_Base_SetConfig+0xe8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a0e      	ldr	r2, [pc, #56]	; (8007268 <TIM_Base_SetConfig+0x11c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d103      	bne.n	800723c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	615a      	str	r2, [r3, #20]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40013400 	.word	0x40013400
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800

0800726c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 0302 	bic.w	r3, r3, #2
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <TIM_OC1_SetConfig+0x10c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00f      	beq.n	80072ec <TIM_OC1_SetConfig+0x80>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a2b      	ldr	r2, [pc, #172]	; (800737c <TIM_OC1_SetConfig+0x110>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00b      	beq.n	80072ec <TIM_OC1_SetConfig+0x80>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a2a      	ldr	r2, [pc, #168]	; (8007380 <TIM_OC1_SetConfig+0x114>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d007      	beq.n	80072ec <TIM_OC1_SetConfig+0x80>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a29      	ldr	r2, [pc, #164]	; (8007384 <TIM_OC1_SetConfig+0x118>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC1_SetConfig+0x80>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_OC1_SetConfig+0x11c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0308 	bic.w	r3, r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <TIM_OC1_SetConfig+0x10c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00f      	beq.n	800732e <TIM_OC1_SetConfig+0xc2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1a      	ldr	r2, [pc, #104]	; (800737c <TIM_OC1_SetConfig+0x110>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00b      	beq.n	800732e <TIM_OC1_SetConfig+0xc2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a19      	ldr	r2, [pc, #100]	; (8007380 <TIM_OC1_SetConfig+0x114>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d007      	beq.n	800732e <TIM_OC1_SetConfig+0xc2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a18      	ldr	r2, [pc, #96]	; (8007384 <TIM_OC1_SetConfig+0x118>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC1_SetConfig+0xc2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <TIM_OC1_SetConfig+0x11c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d111      	bne.n	8007352 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800733c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f023 0210 	bic.w	r2, r3, #16
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0320 	bic.w	r3, r3, #32
 80073da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a28      	ldr	r2, [pc, #160]	; (800748c <TIM_OC2_SetConfig+0x100>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0x6c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a27      	ldr	r2, [pc, #156]	; (8007490 <TIM_OC2_SetConfig+0x104>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d10d      	bne.n	8007414 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a1d      	ldr	r2, [pc, #116]	; (800748c <TIM_OC2_SetConfig+0x100>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <TIM_OC2_SetConfig+0xb0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <TIM_OC2_SetConfig+0x104>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00b      	beq.n	800743c <TIM_OC2_SetConfig+0xb0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <TIM_OC2_SetConfig+0x108>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_OC2_SetConfig+0xb0>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <TIM_OC2_SetConfig+0x10c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC2_SetConfig+0xb0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a19      	ldr	r2, [pc, #100]	; (800749c <TIM_OC2_SetConfig+0x110>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d113      	bne.n	8007464 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007442:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800744a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40013400 	.word	0x40013400
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800

080074a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a27      	ldr	r2, [pc, #156]	; (800759c <TIM_OC3_SetConfig+0xfc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_OC3_SetConfig+0x6a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <TIM_OC3_SetConfig+0x100>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d10d      	bne.n	8007526 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007524:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <TIM_OC3_SetConfig+0xfc>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00f      	beq.n	800754e <TIM_OC3_SetConfig+0xae>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <TIM_OC3_SetConfig+0x100>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00b      	beq.n	800754e <TIM_OC3_SetConfig+0xae>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a1a      	ldr	r2, [pc, #104]	; (80075a4 <TIM_OC3_SetConfig+0x104>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d007      	beq.n	800754e <TIM_OC3_SetConfig+0xae>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a19      	ldr	r2, [pc, #100]	; (80075a8 <TIM_OC3_SetConfig+0x108>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <TIM_OC3_SetConfig+0xae>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a18      	ldr	r2, [pc, #96]	; (80075ac <TIM_OC3_SetConfig+0x10c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d113      	bne.n	8007576 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800755c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	621a      	str	r2, [r3, #32]
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800

080075b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	031b      	lsls	r3, r3, #12
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a18      	ldr	r2, [pc, #96]	; (8007670 <TIM_OC4_SetConfig+0xc0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00f      	beq.n	8007634 <TIM_OC4_SetConfig+0x84>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a17      	ldr	r2, [pc, #92]	; (8007674 <TIM_OC4_SetConfig+0xc4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00b      	beq.n	8007634 <TIM_OC4_SetConfig+0x84>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a16      	ldr	r2, [pc, #88]	; (8007678 <TIM_OC4_SetConfig+0xc8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_OC4_SetConfig+0x84>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a15      	ldr	r2, [pc, #84]	; (800767c <TIM_OC4_SetConfig+0xcc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC4_SetConfig+0x84>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a14      	ldr	r2, [pc, #80]	; (8007680 <TIM_OC4_SetConfig+0xd0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d109      	bne.n	8007648 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	019b      	lsls	r3, r3, #6
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40013400 	.word	0x40013400
 8007678:	40014000 	.word	0x40014000
 800767c:	40014400 	.word	0x40014400
 8007680:	40014800 	.word	0x40014800

08007684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <TIM_OC5_SetConfig+0xb4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00f      	beq.n	80076fe <TIM_OC5_SetConfig+0x7a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a16      	ldr	r2, [pc, #88]	; (800773c <TIM_OC5_SetConfig+0xb8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00b      	beq.n	80076fe <TIM_OC5_SetConfig+0x7a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a15      	ldr	r2, [pc, #84]	; (8007740 <TIM_OC5_SetConfig+0xbc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <TIM_OC5_SetConfig+0x7a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a14      	ldr	r2, [pc, #80]	; (8007744 <TIM_OC5_SetConfig+0xc0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_OC5_SetConfig+0x7a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <TIM_OC5_SetConfig+0xc4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d109      	bne.n	8007712 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800777a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	051b      	lsls	r3, r3, #20
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a18      	ldr	r2, [pc, #96]	; (8007804 <TIM_OC6_SetConfig+0xb8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00f      	beq.n	80077c8 <TIM_OC6_SetConfig+0x7c>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <TIM_OC6_SetConfig+0xbc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00b      	beq.n	80077c8 <TIM_OC6_SetConfig+0x7c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a16      	ldr	r2, [pc, #88]	; (800780c <TIM_OC6_SetConfig+0xc0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d007      	beq.n	80077c8 <TIM_OC6_SetConfig+0x7c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a15      	ldr	r2, [pc, #84]	; (8007810 <TIM_OC6_SetConfig+0xc4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_OC6_SetConfig+0x7c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a14      	ldr	r2, [pc, #80]	; (8007814 <TIM_OC6_SetConfig+0xc8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d109      	bne.n	80077dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800

08007818 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <TIM_TI1_SetConfig+0xbc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <TIM_TI1_SetConfig+0x56>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d00f      	beq.n	800786e <TIM_TI1_SetConfig+0x56>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <TIM_TI1_SetConfig+0xc0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00b      	beq.n	800786e <TIM_TI1_SetConfig+0x56>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4a20      	ldr	r2, [pc, #128]	; (80078dc <TIM_TI1_SetConfig+0xc4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d007      	beq.n	800786e <TIM_TI1_SetConfig+0x56>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <TIM_TI1_SetConfig+0xc8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d003      	beq.n	800786e <TIM_TI1_SetConfig+0x56>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <TIM_TI1_SetConfig+0xcc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <TIM_TI1_SetConfig+0x5a>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <TIM_TI1_SetConfig+0x5c>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e003      	b.n	8007892 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f023 030a 	bic.w	r3, r3, #10
 80078ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f003 030a 	and.w	r3, r3, #10
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40000800 	.word	0x40000800
 80078e0:	40013400 	.word	0x40013400
 80078e4:	40014000 	.word	0x40014000

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	f023 0210 	bic.w	r2, r3, #16
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007972:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	b29b      	uxth	r3, r3
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007998:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f023 0210 	bic.w	r2, r3, #16
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	031b      	lsls	r3, r3, #12
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	621a      	str	r2, [r3, #32]
}
 8007a14:	bf00      	nop
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0303 	bic.w	r3, r3, #3
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007a70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	621a      	str	r2, [r3, #32]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	031b      	lsls	r3, r3, #12
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007aea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	031b      	lsls	r3, r3, #12
 8007af0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f043 0307 	orr.w	r3, r3, #7
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	609a      	str	r2, [r3, #8]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	609a      	str	r2, [r3, #8]
}
 8007b7c:	bf00      	nop
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1a      	ldr	r2, [r3, #32]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	401a      	ands	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1a      	ldr	r2, [r3, #32]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e063      	b.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a2b      	ldr	r2, [pc, #172]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d108      	bne.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d018      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5e:	d013      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00e      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d10c      	bne.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40014000 	.word	0x40014000

08007cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	4013      	ands	r3, r2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d46:	b084      	sub	sp, #16
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	f107 0014 	add.w	r0, r7, #20
 8007d54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	b004      	add	sp, #16
 8007d86:	4770      	bx	lr

08007d88 <__errno>:
 8007d88:	4b01      	ldr	r3, [pc, #4]	; (8007d90 <__errno+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000044 	.word	0x20000044

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4d0d      	ldr	r5, [pc, #52]	; (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1b64      	subs	r4, r4, r5
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2600      	movs	r6, #0
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4d0b      	ldr	r5, [pc, #44]	; (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	; (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f001 fba8 	bl	80094fc <_init>
 8007dac:	1b64      	subs	r4, r4, r5
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2600      	movs	r6, #0
 8007db2:	42a6      	cmp	r6, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbc:	4798      	blx	r3
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc6:	4798      	blx	r3
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	08009620 	.word	0x08009620
 8007dd0:	08009620 	.word	0x08009620
 8007dd4:	08009620 	.word	0x08009620
 8007dd8:	08009624 	.word	0x08009624

08007ddc <memset>:
 8007ddc:	4402      	add	r2, r0
 8007dde:	4603      	mov	r3, r0
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d100      	bne.n	8007de6 <memset+0xa>
 8007de4:	4770      	bx	lr
 8007de6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dea:	e7f9      	b.n	8007de0 <memset+0x4>

08007dec <siprintf>:
 8007dec:	b40e      	push	{r1, r2, r3}
 8007dee:	b500      	push	{lr}
 8007df0:	b09c      	sub	sp, #112	; 0x70
 8007df2:	ab1d      	add	r3, sp, #116	; 0x74
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	9006      	str	r0, [sp, #24]
 8007df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <siprintf+0x38>)
 8007dfe:	9107      	str	r1, [sp, #28]
 8007e00:	9104      	str	r1, [sp, #16]
 8007e02:	4909      	ldr	r1, [pc, #36]	; (8007e28 <siprintf+0x3c>)
 8007e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	a902      	add	r1, sp, #8
 8007e10:	f000 f868 	bl	8007ee4 <_svfiprintf_r>
 8007e14:	9b02      	ldr	r3, [sp, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	b01c      	add	sp, #112	; 0x70
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b003      	add	sp, #12
 8007e22:	4770      	bx	lr
 8007e24:	20000044 	.word	0x20000044
 8007e28:	ffff0208 	.word	0xffff0208

08007e2c <__ssputs_r>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	688e      	ldr	r6, [r1, #8]
 8007e32:	429e      	cmp	r6, r3
 8007e34:	4682      	mov	sl, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4690      	mov	r8, r2
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	d838      	bhi.n	8007eb0 <__ssputs_r+0x84>
 8007e3e:	898a      	ldrh	r2, [r1, #12]
 8007e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e44:	d032      	beq.n	8007eac <__ssputs_r+0x80>
 8007e46:	6825      	ldr	r5, [r4, #0]
 8007e48:	6909      	ldr	r1, [r1, #16]
 8007e4a:	eba5 0901 	sub.w	r9, r5, r1
 8007e4e:	6965      	ldr	r5, [r4, #20]
 8007e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e58:	3301      	adds	r3, #1
 8007e5a:	444b      	add	r3, r9
 8007e5c:	106d      	asrs	r5, r5, #1
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	bf38      	it	cc
 8007e62:	461d      	movcc	r5, r3
 8007e64:	0553      	lsls	r3, r2, #21
 8007e66:	d531      	bpl.n	8007ecc <__ssputs_r+0xa0>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f000 fb63 	bl	8008534 <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b950      	cbnz	r0, 8007e88 <__ssputs_r+0x5c>
 8007e72:	230c      	movs	r3, #12
 8007e74:	f8ca 3000 	str.w	r3, [sl]
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	6921      	ldr	r1, [r4, #16]
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	f000 fabe 	bl	800840c <memcpy>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	6126      	str	r6, [r4, #16]
 8007e9e:	6165      	str	r5, [r4, #20]
 8007ea0:	444e      	add	r6, r9
 8007ea2:	eba5 0509 	sub.w	r5, r5, r9
 8007ea6:	6026      	str	r6, [r4, #0]
 8007ea8:	60a5      	str	r5, [r4, #8]
 8007eaa:	463e      	mov	r6, r7
 8007eac:	42be      	cmp	r6, r7
 8007eae:	d900      	bls.n	8007eb2 <__ssputs_r+0x86>
 8007eb0:	463e      	mov	r6, r7
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	f000 fab6 	bl	8008428 <memmove>
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	1b9b      	subs	r3, r3, r6
 8007ec0:	60a3      	str	r3, [r4, #8]
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	4433      	add	r3, r6
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7db      	b.n	8007e84 <__ssputs_r+0x58>
 8007ecc:	462a      	mov	r2, r5
 8007ece:	f000 fba5 	bl	800861c <_realloc_r>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d1e1      	bne.n	8007e9c <__ssputs_r+0x70>
 8007ed8:	6921      	ldr	r1, [r4, #16]
 8007eda:	4650      	mov	r0, sl
 8007edc:	f000 fabe 	bl	800845c <_free_r>
 8007ee0:	e7c7      	b.n	8007e72 <__ssputs_r+0x46>
	...

08007ee4 <_svfiprintf_r>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	4698      	mov	r8, r3
 8007eea:	898b      	ldrh	r3, [r1, #12]
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	b09d      	sub	sp, #116	; 0x74
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	460d      	mov	r5, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	d50e      	bpl.n	8007f16 <_svfiprintf_r+0x32>
 8007ef8:	690b      	ldr	r3, [r1, #16]
 8007efa:	b963      	cbnz	r3, 8007f16 <_svfiprintf_r+0x32>
 8007efc:	2140      	movs	r1, #64	; 0x40
 8007efe:	f000 fb19 	bl	8008534 <_malloc_r>
 8007f02:	6028      	str	r0, [r5, #0]
 8007f04:	6128      	str	r0, [r5, #16]
 8007f06:	b920      	cbnz	r0, 8007f12 <_svfiprintf_r+0x2e>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f10:	e0d1      	b.n	80080b6 <_svfiprintf_r+0x1d2>
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	616b      	str	r3, [r5, #20]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1a:	2320      	movs	r3, #32
 8007f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f24:	2330      	movs	r3, #48	; 0x30
 8007f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080d0 <_svfiprintf_r+0x1ec>
 8007f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f2e:	f04f 0901 	mov.w	r9, #1
 8007f32:	4623      	mov	r3, r4
 8007f34:	469a      	mov	sl, r3
 8007f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3a:	b10a      	cbz	r2, 8007f40 <_svfiprintf_r+0x5c>
 8007f3c:	2a25      	cmp	r2, #37	; 0x25
 8007f3e:	d1f9      	bne.n	8007f34 <_svfiprintf_r+0x50>
 8007f40:	ebba 0b04 	subs.w	fp, sl, r4
 8007f44:	d00b      	beq.n	8007f5e <_svfiprintf_r+0x7a>
 8007f46:	465b      	mov	r3, fp
 8007f48:	4622      	mov	r2, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff ff6d 	bl	8007e2c <__ssputs_r>
 8007f52:	3001      	adds	r0, #1
 8007f54:	f000 80aa 	beq.w	80080ac <_svfiprintf_r+0x1c8>
 8007f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f5a:	445a      	add	r2, fp
 8007f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80a2 	beq.w	80080ac <_svfiprintf_r+0x1c8>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f72:	f10a 0a01 	add.w	sl, sl, #1
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	9307      	str	r3, [sp, #28]
 8007f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f80:	4654      	mov	r4, sl
 8007f82:	2205      	movs	r2, #5
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	4851      	ldr	r0, [pc, #324]	; (80080d0 <_svfiprintf_r+0x1ec>)
 8007f8a:	f7f8 f921 	bl	80001d0 <memchr>
 8007f8e:	9a04      	ldr	r2, [sp, #16]
 8007f90:	b9d8      	cbnz	r0, 8007fca <_svfiprintf_r+0xe6>
 8007f92:	06d0      	lsls	r0, r2, #27
 8007f94:	bf44      	itt	mi
 8007f96:	2320      	movmi	r3, #32
 8007f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f9c:	0711      	lsls	r1, r2, #28
 8007f9e:	bf44      	itt	mi
 8007fa0:	232b      	movmi	r3, #43	; 0x2b
 8007fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b2a      	cmp	r3, #42	; 0x2a
 8007fac:	d015      	beq.n	8007fda <_svfiprintf_r+0xf6>
 8007fae:	9a07      	ldr	r2, [sp, #28]
 8007fb0:	4654      	mov	r4, sl
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	f04f 0c0a 	mov.w	ip, #10
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fbe:	3b30      	subs	r3, #48	; 0x30
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	d94e      	bls.n	8008062 <_svfiprintf_r+0x17e>
 8007fc4:	b1b0      	cbz	r0, 8007ff4 <_svfiprintf_r+0x110>
 8007fc6:	9207      	str	r2, [sp, #28]
 8007fc8:	e014      	b.n	8007ff4 <_svfiprintf_r+0x110>
 8007fca:	eba0 0308 	sub.w	r3, r0, r8
 8007fce:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	46a2      	mov	sl, r4
 8007fd8:	e7d2      	b.n	8007f80 <_svfiprintf_r+0x9c>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	1d19      	adds	r1, r3, #4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	9103      	str	r1, [sp, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bfbb      	ittet	lt
 8007fe6:	425b      	neglt	r3, r3
 8007fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fec:	9307      	strge	r3, [sp, #28]
 8007fee:	9307      	strlt	r3, [sp, #28]
 8007ff0:	bfb8      	it	lt
 8007ff2:	9204      	strlt	r2, [sp, #16]
 8007ff4:	7823      	ldrb	r3, [r4, #0]
 8007ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ff8:	d10c      	bne.n	8008014 <_svfiprintf_r+0x130>
 8007ffa:	7863      	ldrb	r3, [r4, #1]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d135      	bne.n	800806c <_svfiprintf_r+0x188>
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	1d1a      	adds	r2, r3, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	9203      	str	r2, [sp, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	bfb8      	it	lt
 800800c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008010:	3402      	adds	r4, #2
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080e0 <_svfiprintf_r+0x1fc>
 8008018:	7821      	ldrb	r1, [r4, #0]
 800801a:	2203      	movs	r2, #3
 800801c:	4650      	mov	r0, sl
 800801e:	f7f8 f8d7 	bl	80001d0 <memchr>
 8008022:	b140      	cbz	r0, 8008036 <_svfiprintf_r+0x152>
 8008024:	2340      	movs	r3, #64	; 0x40
 8008026:	eba0 000a 	sub.w	r0, r0, sl
 800802a:	fa03 f000 	lsl.w	r0, r3, r0
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	4303      	orrs	r3, r0
 8008032:	3401      	adds	r4, #1
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803a:	4826      	ldr	r0, [pc, #152]	; (80080d4 <_svfiprintf_r+0x1f0>)
 800803c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008040:	2206      	movs	r2, #6
 8008042:	f7f8 f8c5 	bl	80001d0 <memchr>
 8008046:	2800      	cmp	r0, #0
 8008048:	d038      	beq.n	80080bc <_svfiprintf_r+0x1d8>
 800804a:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <_svfiprintf_r+0x1f4>)
 800804c:	bb1b      	cbnz	r3, 8008096 <_svfiprintf_r+0x1b2>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	3307      	adds	r3, #7
 8008052:	f023 0307 	bic.w	r3, r3, #7
 8008056:	3308      	adds	r3, #8
 8008058:	9303      	str	r3, [sp, #12]
 800805a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805c:	4433      	add	r3, r6
 800805e:	9309      	str	r3, [sp, #36]	; 0x24
 8008060:	e767      	b.n	8007f32 <_svfiprintf_r+0x4e>
 8008062:	fb0c 3202 	mla	r2, ip, r2, r3
 8008066:	460c      	mov	r4, r1
 8008068:	2001      	movs	r0, #1
 800806a:	e7a5      	b.n	8007fb8 <_svfiprintf_r+0xd4>
 800806c:	2300      	movs	r3, #0
 800806e:	3401      	adds	r4, #1
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	4619      	mov	r1, r3
 8008074:	f04f 0c0a 	mov.w	ip, #10
 8008078:	4620      	mov	r0, r4
 800807a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807e:	3a30      	subs	r2, #48	; 0x30
 8008080:	2a09      	cmp	r2, #9
 8008082:	d903      	bls.n	800808c <_svfiprintf_r+0x1a8>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0c5      	beq.n	8008014 <_svfiprintf_r+0x130>
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	e7c3      	b.n	8008014 <_svfiprintf_r+0x130>
 800808c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008090:	4604      	mov	r4, r0
 8008092:	2301      	movs	r3, #1
 8008094:	e7f0      	b.n	8008078 <_svfiprintf_r+0x194>
 8008096:	ab03      	add	r3, sp, #12
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462a      	mov	r2, r5
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <_svfiprintf_r+0x1f8>)
 800809e:	a904      	add	r1, sp, #16
 80080a0:	4638      	mov	r0, r7
 80080a2:	f3af 8000 	nop.w
 80080a6:	1c42      	adds	r2, r0, #1
 80080a8:	4606      	mov	r6, r0
 80080aa:	d1d6      	bne.n	800805a <_svfiprintf_r+0x176>
 80080ac:	89ab      	ldrh	r3, [r5, #12]
 80080ae:	065b      	lsls	r3, r3, #25
 80080b0:	f53f af2c 	bmi.w	8007f0c <_svfiprintf_r+0x28>
 80080b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080b6:	b01d      	add	sp, #116	; 0x74
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	ab03      	add	r3, sp, #12
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	462a      	mov	r2, r5
 80080c2:	4b06      	ldr	r3, [pc, #24]	; (80080dc <_svfiprintf_r+0x1f8>)
 80080c4:	a904      	add	r1, sp, #16
 80080c6:	4638      	mov	r0, r7
 80080c8:	f000 f87a 	bl	80081c0 <_printf_i>
 80080cc:	e7eb      	b.n	80080a6 <_svfiprintf_r+0x1c2>
 80080ce:	bf00      	nop
 80080d0:	080095bc 	.word	0x080095bc
 80080d4:	080095c6 	.word	0x080095c6
 80080d8:	00000000 	.word	0x00000000
 80080dc:	08007e2d 	.word	0x08007e2d
 80080e0:	080095c2 	.word	0x080095c2

080080e4 <_printf_common>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4616      	mov	r6, r2
 80080ea:	4699      	mov	r9, r3
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	690b      	ldr	r3, [r1, #16]
 80080f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bfb8      	it	lt
 80080f8:	4613      	movlt	r3, r2
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008100:	4607      	mov	r7, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b10a      	cbz	r2, 800810a <_printf_common+0x26>
 8008106:	3301      	adds	r3, #1
 8008108:	6033      	str	r3, [r6, #0]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	bf42      	ittt	mi
 8008110:	6833      	ldrmi	r3, [r6, #0]
 8008112:	3302      	addmi	r3, #2
 8008114:	6033      	strmi	r3, [r6, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d106      	bne.n	800812c <_printf_common+0x48>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	6832      	ldr	r2, [r6, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc26      	bgt.n	800817a <_printf_common+0x96>
 800812c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008130:	1e13      	subs	r3, r2, #0
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	2301      	movne	r3, #1
 8008138:	0692      	lsls	r2, r2, #26
 800813a:	d42b      	bmi.n	8008194 <_printf_common+0xb0>
 800813c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d01e      	beq.n	8008188 <_printf_common+0xa4>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	68e5      	ldr	r5, [r4, #12]
 800814e:	6832      	ldr	r2, [r6, #0]
 8008150:	f003 0306 	and.w	r3, r3, #6
 8008154:	2b04      	cmp	r3, #4
 8008156:	bf08      	it	eq
 8008158:	1aad      	subeq	r5, r5, r2
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	bf0c      	ite	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	2500      	movne	r5, #0
 8008166:	4293      	cmp	r3, r2
 8008168:	bfc4      	itt	gt
 800816a:	1a9b      	subgt	r3, r3, r2
 800816c:	18ed      	addgt	r5, r5, r3
 800816e:	2600      	movs	r6, #0
 8008170:	341a      	adds	r4, #26
 8008172:	42b5      	cmp	r5, r6
 8008174:	d11a      	bne.n	80081ac <_printf_common+0xc8>
 8008176:	2000      	movs	r0, #0
 8008178:	e008      	b.n	800818c <_printf_common+0xa8>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4649      	mov	r1, r9
 8008180:	4638      	mov	r0, r7
 8008182:	47c0      	blx	r8
 8008184:	3001      	adds	r0, #1
 8008186:	d103      	bne.n	8008190 <_printf_common+0xac>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	3501      	adds	r5, #1
 8008192:	e7c6      	b.n	8008122 <_printf_common+0x3e>
 8008194:	18e1      	adds	r1, r4, r3
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	2030      	movs	r0, #48	; 0x30
 800819a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800819e:	4422      	add	r2, r4
 80081a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a8:	3302      	adds	r3, #2
 80081aa:	e7c7      	b.n	800813c <_printf_common+0x58>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4622      	mov	r2, r4
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0e6      	beq.n	8008188 <_printf_common+0xa4>
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7d9      	b.n	8008172 <_printf_common+0x8e>
	...

080081c0 <_printf_i>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	7e0f      	ldrb	r7, [r1, #24]
 80081c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c8:	2f78      	cmp	r7, #120	; 0x78
 80081ca:	4691      	mov	r9, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	469a      	mov	sl, r3
 80081d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081d6:	d807      	bhi.n	80081e8 <_printf_i+0x28>
 80081d8:	2f62      	cmp	r7, #98	; 0x62
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x32>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	f000 80d8 	beq.w	8008392 <_printf_i+0x1d2>
 80081e2:	2f58      	cmp	r7, #88	; 0x58
 80081e4:	f000 80a3 	beq.w	800832e <_printf_i+0x16e>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f0:	e03a      	b.n	8008268 <_printf_i+0xa8>
 80081f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081f6:	2b15      	cmp	r3, #21
 80081f8:	d8f6      	bhi.n	80081e8 <_printf_i+0x28>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_printf_i+0x40>)
 80081fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008200:	08008259 	.word	0x08008259
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080081e9 	.word	0x080081e9
 800820c:	080081e9 	.word	0x080081e9
 8008210:	080081e9 	.word	0x080081e9
 8008214:	080081e9 	.word	0x080081e9
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080081e9 	.word	0x080081e9
 8008220:	080081e9 	.word	0x080081e9
 8008224:	080081e9 	.word	0x080081e9
 8008228:	080081e9 	.word	0x080081e9
 800822c:	08008379 	.word	0x08008379
 8008230:	0800829d 	.word	0x0800829d
 8008234:	0800835b 	.word	0x0800835b
 8008238:	080081e9 	.word	0x080081e9
 800823c:	080081e9 	.word	0x080081e9
 8008240:	0800839b 	.word	0x0800839b
 8008244:	080081e9 	.word	0x080081e9
 8008248:	0800829d 	.word	0x0800829d
 800824c:	080081e9 	.word	0x080081e9
 8008250:	080081e9 	.word	0x080081e9
 8008254:	08008363 	.word	0x08008363
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e0a3      	b.n	80083b4 <_printf_i+0x1f4>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	6829      	ldr	r1, [r5, #0]
 8008270:	0606      	lsls	r6, r0, #24
 8008272:	f101 0304 	add.w	r3, r1, #4
 8008276:	d50a      	bpl.n	800828e <_printf_i+0xce>
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	2e00      	cmp	r6, #0
 800827e:	da03      	bge.n	8008288 <_printf_i+0xc8>
 8008280:	232d      	movs	r3, #45	; 0x2d
 8008282:	4276      	negs	r6, r6
 8008284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008288:	485e      	ldr	r0, [pc, #376]	; (8008404 <_printf_i+0x244>)
 800828a:	230a      	movs	r3, #10
 800828c:	e019      	b.n	80082c2 <_printf_i+0x102>
 800828e:	680e      	ldr	r6, [r1, #0]
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008296:	bf18      	it	ne
 8008298:	b236      	sxthne	r6, r6
 800829a:	e7ef      	b.n	800827c <_printf_i+0xbc>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6029      	str	r1, [r5, #0]
 80082a4:	0601      	lsls	r1, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xec>
 80082a8:	681e      	ldr	r6, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <_printf_i+0xf2>
 80082ac:	0646      	lsls	r6, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xe8>
 80082b0:	881e      	ldrh	r6, [r3, #0]
 80082b2:	4854      	ldr	r0, [pc, #336]	; (8008404 <_printf_i+0x244>)
 80082b4:	2f6f      	cmp	r7, #111	; 0x6f
 80082b6:	bf0c      	ite	eq
 80082b8:	2308      	moveq	r3, #8
 80082ba:	230a      	movne	r3, #10
 80082bc:	2100      	movs	r1, #0
 80082be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082c2:	6865      	ldr	r5, [r4, #4]
 80082c4:	60a5      	str	r5, [r4, #8]
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	bfa2      	ittt	ge
 80082ca:	6821      	ldrge	r1, [r4, #0]
 80082cc:	f021 0104 	bicge.w	r1, r1, #4
 80082d0:	6021      	strge	r1, [r4, #0]
 80082d2:	b90e      	cbnz	r6, 80082d8 <_printf_i+0x118>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d04d      	beq.n	8008374 <_printf_i+0x1b4>
 80082d8:	4615      	mov	r5, r2
 80082da:	fbb6 f1f3 	udiv	r1, r6, r3
 80082de:	fb03 6711 	mls	r7, r3, r1, r6
 80082e2:	5dc7      	ldrb	r7, [r0, r7]
 80082e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e8:	4637      	mov	r7, r6
 80082ea:	42bb      	cmp	r3, r7
 80082ec:	460e      	mov	r6, r1
 80082ee:	d9f4      	bls.n	80082da <_printf_i+0x11a>
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10b      	bne.n	800830c <_printf_i+0x14c>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	07de      	lsls	r6, r3, #31
 80082f8:	d508      	bpl.n	800830c <_printf_i+0x14c>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	6861      	ldr	r1, [r4, #4]
 80082fe:	4299      	cmp	r1, r3
 8008300:	bfde      	ittt	le
 8008302:	2330      	movle	r3, #48	; 0x30
 8008304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800830c:	1b52      	subs	r2, r2, r5
 800830e:	6122      	str	r2, [r4, #16]
 8008310:	f8cd a000 	str.w	sl, [sp]
 8008314:	464b      	mov	r3, r9
 8008316:	aa03      	add	r2, sp, #12
 8008318:	4621      	mov	r1, r4
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fee2 	bl	80080e4 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	d14c      	bne.n	80083be <_printf_i+0x1fe>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008328:	b004      	add	sp, #16
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	4835      	ldr	r0, [pc, #212]	; (8008404 <_printf_i+0x244>)
 8008330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008334:	6829      	ldr	r1, [r5, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f851 6b04 	ldr.w	r6, [r1], #4
 800833c:	6029      	str	r1, [r5, #0]
 800833e:	061d      	lsls	r5, r3, #24
 8008340:	d514      	bpl.n	800836c <_printf_i+0x1ac>
 8008342:	07df      	lsls	r7, r3, #31
 8008344:	bf44      	itt	mi
 8008346:	f043 0320 	orrmi.w	r3, r3, #32
 800834a:	6023      	strmi	r3, [r4, #0]
 800834c:	b91e      	cbnz	r6, 8008356 <_printf_i+0x196>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f023 0320 	bic.w	r3, r3, #32
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	2310      	movs	r3, #16
 8008358:	e7b0      	b.n	80082bc <_printf_i+0xfc>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	2378      	movs	r3, #120	; 0x78
 8008364:	4828      	ldr	r0, [pc, #160]	; (8008408 <_printf_i+0x248>)
 8008366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800836a:	e7e3      	b.n	8008334 <_printf_i+0x174>
 800836c:	0659      	lsls	r1, r3, #25
 800836e:	bf48      	it	mi
 8008370:	b2b6      	uxthmi	r6, r6
 8008372:	e7e6      	b.n	8008342 <_printf_i+0x182>
 8008374:	4615      	mov	r5, r2
 8008376:	e7bb      	b.n	80082f0 <_printf_i+0x130>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	6826      	ldr	r6, [r4, #0]
 800837c:	6961      	ldr	r1, [r4, #20]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6028      	str	r0, [r5, #0]
 8008382:	0635      	lsls	r5, r6, #24
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	d501      	bpl.n	800838c <_printf_i+0x1cc>
 8008388:	6019      	str	r1, [r3, #0]
 800838a:	e002      	b.n	8008392 <_printf_i+0x1d2>
 800838c:	0670      	lsls	r0, r6, #25
 800838e:	d5fb      	bpl.n	8008388 <_printf_i+0x1c8>
 8008390:	8019      	strh	r1, [r3, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	4615      	mov	r5, r2
 8008398:	e7ba      	b.n	8008310 <_printf_i+0x150>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	1d1a      	adds	r2, r3, #4
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	6862      	ldr	r2, [r4, #4]
 80083a4:	2100      	movs	r1, #0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f7 ff12 	bl	80001d0 <memchr>
 80083ac:	b108      	cbz	r0, 80083b2 <_printf_i+0x1f2>
 80083ae:	1b40      	subs	r0, r0, r5
 80083b0:	6060      	str	r0, [r4, #4]
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	2300      	movs	r3, #0
 80083b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083bc:	e7a8      	b.n	8008310 <_printf_i+0x150>
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4649      	mov	r1, r9
 80083c4:	4640      	mov	r0, r8
 80083c6:	47d0      	blx	sl
 80083c8:	3001      	adds	r0, #1
 80083ca:	d0ab      	beq.n	8008324 <_printf_i+0x164>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	079b      	lsls	r3, r3, #30
 80083d0:	d413      	bmi.n	80083fa <_printf_i+0x23a>
 80083d2:	68e0      	ldr	r0, [r4, #12]
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	4298      	cmp	r0, r3
 80083d8:	bfb8      	it	lt
 80083da:	4618      	movlt	r0, r3
 80083dc:	e7a4      	b.n	8008328 <_printf_i+0x168>
 80083de:	2301      	movs	r3, #1
 80083e0:	4632      	mov	r2, r6
 80083e2:	4649      	mov	r1, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	47d0      	blx	sl
 80083e8:	3001      	adds	r0, #1
 80083ea:	d09b      	beq.n	8008324 <_printf_i+0x164>
 80083ec:	3501      	adds	r5, #1
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	9903      	ldr	r1, [sp, #12]
 80083f2:	1a5b      	subs	r3, r3, r1
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dcf2      	bgt.n	80083de <_printf_i+0x21e>
 80083f8:	e7eb      	b.n	80083d2 <_printf_i+0x212>
 80083fa:	2500      	movs	r5, #0
 80083fc:	f104 0619 	add.w	r6, r4, #25
 8008400:	e7f5      	b.n	80083ee <_printf_i+0x22e>
 8008402:	bf00      	nop
 8008404:	080095cd 	.word	0x080095cd
 8008408:	080095de 	.word	0x080095de

0800840c <memcpy>:
 800840c:	440a      	add	r2, r1
 800840e:	4291      	cmp	r1, r2
 8008410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008414:	d100      	bne.n	8008418 <memcpy+0xc>
 8008416:	4770      	bx	lr
 8008418:	b510      	push	{r4, lr}
 800841a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008422:	4291      	cmp	r1, r2
 8008424:	d1f9      	bne.n	800841a <memcpy+0xe>
 8008426:	bd10      	pop	{r4, pc}

08008428 <memmove>:
 8008428:	4288      	cmp	r0, r1
 800842a:	b510      	push	{r4, lr}
 800842c:	eb01 0402 	add.w	r4, r1, r2
 8008430:	d902      	bls.n	8008438 <memmove+0x10>
 8008432:	4284      	cmp	r4, r0
 8008434:	4623      	mov	r3, r4
 8008436:	d807      	bhi.n	8008448 <memmove+0x20>
 8008438:	1e43      	subs	r3, r0, #1
 800843a:	42a1      	cmp	r1, r4
 800843c:	d008      	beq.n	8008450 <memmove+0x28>
 800843e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008446:	e7f8      	b.n	800843a <memmove+0x12>
 8008448:	4402      	add	r2, r0
 800844a:	4601      	mov	r1, r0
 800844c:	428a      	cmp	r2, r1
 800844e:	d100      	bne.n	8008452 <memmove+0x2a>
 8008450:	bd10      	pop	{r4, pc}
 8008452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845a:	e7f7      	b.n	800844c <memmove+0x24>

0800845c <_free_r>:
 800845c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845e:	2900      	cmp	r1, #0
 8008460:	d044      	beq.n	80084ec <_free_r+0x90>
 8008462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008466:	9001      	str	r0, [sp, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f1a1 0404 	sub.w	r4, r1, #4
 800846e:	bfb8      	it	lt
 8008470:	18e4      	addlt	r4, r4, r3
 8008472:	f000 f913 	bl	800869c <__malloc_lock>
 8008476:	4a1e      	ldr	r2, [pc, #120]	; (80084f0 <_free_r+0x94>)
 8008478:	9801      	ldr	r0, [sp, #4]
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	b933      	cbnz	r3, 800848c <_free_r+0x30>
 800847e:	6063      	str	r3, [r4, #4]
 8008480:	6014      	str	r4, [r2, #0]
 8008482:	b003      	add	sp, #12
 8008484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008488:	f000 b90e 	b.w	80086a8 <__malloc_unlock>
 800848c:	42a3      	cmp	r3, r4
 800848e:	d908      	bls.n	80084a2 <_free_r+0x46>
 8008490:	6825      	ldr	r5, [r4, #0]
 8008492:	1961      	adds	r1, r4, r5
 8008494:	428b      	cmp	r3, r1
 8008496:	bf01      	itttt	eq
 8008498:	6819      	ldreq	r1, [r3, #0]
 800849a:	685b      	ldreq	r3, [r3, #4]
 800849c:	1949      	addeq	r1, r1, r5
 800849e:	6021      	streq	r1, [r4, #0]
 80084a0:	e7ed      	b.n	800847e <_free_r+0x22>
 80084a2:	461a      	mov	r2, r3
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	b10b      	cbz	r3, 80084ac <_free_r+0x50>
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d9fa      	bls.n	80084a2 <_free_r+0x46>
 80084ac:	6811      	ldr	r1, [r2, #0]
 80084ae:	1855      	adds	r5, r2, r1
 80084b0:	42a5      	cmp	r5, r4
 80084b2:	d10b      	bne.n	80084cc <_free_r+0x70>
 80084b4:	6824      	ldr	r4, [r4, #0]
 80084b6:	4421      	add	r1, r4
 80084b8:	1854      	adds	r4, r2, r1
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	6011      	str	r1, [r2, #0]
 80084be:	d1e0      	bne.n	8008482 <_free_r+0x26>
 80084c0:	681c      	ldr	r4, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	6053      	str	r3, [r2, #4]
 80084c6:	4421      	add	r1, r4
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	e7da      	b.n	8008482 <_free_r+0x26>
 80084cc:	d902      	bls.n	80084d4 <_free_r+0x78>
 80084ce:	230c      	movs	r3, #12
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	e7d6      	b.n	8008482 <_free_r+0x26>
 80084d4:	6825      	ldr	r5, [r4, #0]
 80084d6:	1961      	adds	r1, r4, r5
 80084d8:	428b      	cmp	r3, r1
 80084da:	bf04      	itt	eq
 80084dc:	6819      	ldreq	r1, [r3, #0]
 80084de:	685b      	ldreq	r3, [r3, #4]
 80084e0:	6063      	str	r3, [r4, #4]
 80084e2:	bf04      	itt	eq
 80084e4:	1949      	addeq	r1, r1, r5
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	6054      	str	r4, [r2, #4]
 80084ea:	e7ca      	b.n	8008482 <_free_r+0x26>
 80084ec:	b003      	add	sp, #12
 80084ee:	bd30      	pop	{r4, r5, pc}
 80084f0:	20000560 	.word	0x20000560

080084f4 <sbrk_aligned>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4e0e      	ldr	r6, [pc, #56]	; (8008530 <sbrk_aligned+0x3c>)
 80084f8:	460c      	mov	r4, r1
 80084fa:	6831      	ldr	r1, [r6, #0]
 80084fc:	4605      	mov	r5, r0
 80084fe:	b911      	cbnz	r1, 8008506 <sbrk_aligned+0x12>
 8008500:	f000 f8bc 	bl	800867c <_sbrk_r>
 8008504:	6030      	str	r0, [r6, #0]
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f8b7 	bl	800867c <_sbrk_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d00a      	beq.n	8008528 <sbrk_aligned+0x34>
 8008512:	1cc4      	adds	r4, r0, #3
 8008514:	f024 0403 	bic.w	r4, r4, #3
 8008518:	42a0      	cmp	r0, r4
 800851a:	d007      	beq.n	800852c <sbrk_aligned+0x38>
 800851c:	1a21      	subs	r1, r4, r0
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f8ac 	bl	800867c <_sbrk_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d101      	bne.n	800852c <sbrk_aligned+0x38>
 8008528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800852c:	4620      	mov	r0, r4
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	20000564 	.word	0x20000564

08008534 <_malloc_r>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	1ccd      	adds	r5, r1, #3
 800853a:	f025 0503 	bic.w	r5, r5, #3
 800853e:	3508      	adds	r5, #8
 8008540:	2d0c      	cmp	r5, #12
 8008542:	bf38      	it	cc
 8008544:	250c      	movcc	r5, #12
 8008546:	2d00      	cmp	r5, #0
 8008548:	4607      	mov	r7, r0
 800854a:	db01      	blt.n	8008550 <_malloc_r+0x1c>
 800854c:	42a9      	cmp	r1, r5
 800854e:	d905      	bls.n	800855c <_malloc_r+0x28>
 8008550:	230c      	movs	r3, #12
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	2600      	movs	r6, #0
 8008556:	4630      	mov	r0, r6
 8008558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800855c:	4e2e      	ldr	r6, [pc, #184]	; (8008618 <_malloc_r+0xe4>)
 800855e:	f000 f89d 	bl	800869c <__malloc_lock>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	461c      	mov	r4, r3
 8008566:	bb34      	cbnz	r4, 80085b6 <_malloc_r+0x82>
 8008568:	4629      	mov	r1, r5
 800856a:	4638      	mov	r0, r7
 800856c:	f7ff ffc2 	bl	80084f4 <sbrk_aligned>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	4604      	mov	r4, r0
 8008574:	d14d      	bne.n	8008612 <_malloc_r+0xde>
 8008576:	6834      	ldr	r4, [r6, #0]
 8008578:	4626      	mov	r6, r4
 800857a:	2e00      	cmp	r6, #0
 800857c:	d140      	bne.n	8008600 <_malloc_r+0xcc>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4631      	mov	r1, r6
 8008582:	4638      	mov	r0, r7
 8008584:	eb04 0803 	add.w	r8, r4, r3
 8008588:	f000 f878 	bl	800867c <_sbrk_r>
 800858c:	4580      	cmp	r8, r0
 800858e:	d13a      	bne.n	8008606 <_malloc_r+0xd2>
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	3503      	adds	r5, #3
 8008594:	1a6d      	subs	r5, r5, r1
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	4629      	mov	r1, r5
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ffa5 	bl	80084f4 <sbrk_aligned>
 80085aa:	3001      	adds	r0, #1
 80085ac:	d02b      	beq.n	8008606 <_malloc_r+0xd2>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	442b      	add	r3, r5
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	e00e      	b.n	80085d4 <_malloc_r+0xa0>
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	1b52      	subs	r2, r2, r5
 80085ba:	d41e      	bmi.n	80085fa <_malloc_r+0xc6>
 80085bc:	2a0b      	cmp	r2, #11
 80085be:	d916      	bls.n	80085ee <_malloc_r+0xba>
 80085c0:	1961      	adds	r1, r4, r5
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	6025      	str	r5, [r4, #0]
 80085c6:	bf18      	it	ne
 80085c8:	6059      	strne	r1, [r3, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	bf08      	it	eq
 80085ce:	6031      	streq	r1, [r6, #0]
 80085d0:	5162      	str	r2, [r4, r5]
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	4638      	mov	r0, r7
 80085d6:	f104 060b 	add.w	r6, r4, #11
 80085da:	f000 f865 	bl	80086a8 <__malloc_unlock>
 80085de:	f026 0607 	bic.w	r6, r6, #7
 80085e2:	1d23      	adds	r3, r4, #4
 80085e4:	1af2      	subs	r2, r6, r3
 80085e6:	d0b6      	beq.n	8008556 <_malloc_r+0x22>
 80085e8:	1b9b      	subs	r3, r3, r6
 80085ea:	50a3      	str	r3, [r4, r2]
 80085ec:	e7b3      	b.n	8008556 <_malloc_r+0x22>
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	bf0c      	ite	eq
 80085f4:	6032      	streq	r2, [r6, #0]
 80085f6:	605a      	strne	r2, [r3, #4]
 80085f8:	e7ec      	b.n	80085d4 <_malloc_r+0xa0>
 80085fa:	4623      	mov	r3, r4
 80085fc:	6864      	ldr	r4, [r4, #4]
 80085fe:	e7b2      	b.n	8008566 <_malloc_r+0x32>
 8008600:	4634      	mov	r4, r6
 8008602:	6876      	ldr	r6, [r6, #4]
 8008604:	e7b9      	b.n	800857a <_malloc_r+0x46>
 8008606:	230c      	movs	r3, #12
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	4638      	mov	r0, r7
 800860c:	f000 f84c 	bl	80086a8 <__malloc_unlock>
 8008610:	e7a1      	b.n	8008556 <_malloc_r+0x22>
 8008612:	6025      	str	r5, [r4, #0]
 8008614:	e7de      	b.n	80085d4 <_malloc_r+0xa0>
 8008616:	bf00      	nop
 8008618:	20000560 	.word	0x20000560

0800861c <_realloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	4680      	mov	r8, r0
 8008622:	4614      	mov	r4, r2
 8008624:	460e      	mov	r6, r1
 8008626:	b921      	cbnz	r1, 8008632 <_realloc_r+0x16>
 8008628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	4611      	mov	r1, r2
 800862e:	f7ff bf81 	b.w	8008534 <_malloc_r>
 8008632:	b92a      	cbnz	r2, 8008640 <_realloc_r+0x24>
 8008634:	f7ff ff12 	bl	800845c <_free_r>
 8008638:	4625      	mov	r5, r4
 800863a:	4628      	mov	r0, r5
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	f000 f838 	bl	80086b4 <_malloc_usable_size_r>
 8008644:	4284      	cmp	r4, r0
 8008646:	4607      	mov	r7, r0
 8008648:	d802      	bhi.n	8008650 <_realloc_r+0x34>
 800864a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800864e:	d812      	bhi.n	8008676 <_realloc_r+0x5a>
 8008650:	4621      	mov	r1, r4
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff ff6e 	bl	8008534 <_malloc_r>
 8008658:	4605      	mov	r5, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	d0ed      	beq.n	800863a <_realloc_r+0x1e>
 800865e:	42bc      	cmp	r4, r7
 8008660:	4622      	mov	r2, r4
 8008662:	4631      	mov	r1, r6
 8008664:	bf28      	it	cs
 8008666:	463a      	movcs	r2, r7
 8008668:	f7ff fed0 	bl	800840c <memcpy>
 800866c:	4631      	mov	r1, r6
 800866e:	4640      	mov	r0, r8
 8008670:	f7ff fef4 	bl	800845c <_free_r>
 8008674:	e7e1      	b.n	800863a <_realloc_r+0x1e>
 8008676:	4635      	mov	r5, r6
 8008678:	e7df      	b.n	800863a <_realloc_r+0x1e>
	...

0800867c <_sbrk_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_sbrk_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f9 fd56 	bl	8002138 <_sbrk>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_sbrk_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_sbrk_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20000568 	.word	0x20000568

0800869c <__malloc_lock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_lock+0x8>)
 800869e:	f000 b811 	b.w	80086c4 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	2000056c 	.word	0x2000056c

080086a8 <__malloc_unlock>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__malloc_unlock+0x8>)
 80086aa:	f000 b80c 	b.w	80086c6 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	2000056c 	.word	0x2000056c

080086b4 <_malloc_usable_size_r>:
 80086b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b8:	1f18      	subs	r0, r3, #4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbc      	itt	lt
 80086be:	580b      	ldrlt	r3, [r1, r0]
 80086c0:	18c0      	addlt	r0, r0, r3
 80086c2:	4770      	bx	lr

080086c4 <__retarget_lock_acquire_recursive>:
 80086c4:	4770      	bx	lr

080086c6 <__retarget_lock_release_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <pow>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	ed2d 8b02 	vpush	{d8}
 80086ce:	eeb0 8a40 	vmov.f32	s16, s0
 80086d2:	eef0 8a60 	vmov.f32	s17, s1
 80086d6:	ec55 4b11 	vmov	r4, r5, d1
 80086da:	f000 f865 	bl	80087a8 <__ieee754_pow>
 80086de:	4622      	mov	r2, r4
 80086e0:	462b      	mov	r3, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	ec57 6b10 	vmov	r6, r7, d0
 80086ea:	f7f8 fa17 	bl	8000b1c <__aeabi_dcmpun>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d13b      	bne.n	800876a <pow+0xa2>
 80086f2:	ec51 0b18 	vmov	r0, r1, d8
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	f7f8 f9dd 	bl	8000ab8 <__aeabi_dcmpeq>
 80086fe:	b1b8      	cbz	r0, 8008730 <pow+0x68>
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f8 f9d6 	bl	8000ab8 <__aeabi_dcmpeq>
 800870c:	2800      	cmp	r0, #0
 800870e:	d146      	bne.n	800879e <pow+0xd6>
 8008710:	ec45 4b10 	vmov	d0, r4, r5
 8008714:	f000 fe61 	bl	80093da <finite>
 8008718:	b338      	cbz	r0, 800876a <pow+0xa2>
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7f8 f9d3 	bl	8000acc <__aeabi_dcmplt>
 8008726:	b300      	cbz	r0, 800876a <pow+0xa2>
 8008728:	f7ff fb2e 	bl	8007d88 <__errno>
 800872c:	2322      	movs	r3, #34	; 0x22
 800872e:	e01b      	b.n	8008768 <pow+0xa0>
 8008730:	ec47 6b10 	vmov	d0, r6, r7
 8008734:	f000 fe51 	bl	80093da <finite>
 8008738:	b9e0      	cbnz	r0, 8008774 <pow+0xac>
 800873a:	eeb0 0a48 	vmov.f32	s0, s16
 800873e:	eef0 0a68 	vmov.f32	s1, s17
 8008742:	f000 fe4a 	bl	80093da <finite>
 8008746:	b1a8      	cbz	r0, 8008774 <pow+0xac>
 8008748:	ec45 4b10 	vmov	d0, r4, r5
 800874c:	f000 fe45 	bl	80093da <finite>
 8008750:	b180      	cbz	r0, 8008774 <pow+0xac>
 8008752:	4632      	mov	r2, r6
 8008754:	463b      	mov	r3, r7
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	f7f8 f9df 	bl	8000b1c <__aeabi_dcmpun>
 800875e:	2800      	cmp	r0, #0
 8008760:	d0e2      	beq.n	8008728 <pow+0x60>
 8008762:	f7ff fb11 	bl	8007d88 <__errno>
 8008766:	2321      	movs	r3, #33	; 0x21
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	ecbd 8b02 	vpop	{d8}
 800876e:	ec47 6b10 	vmov	d0, r6, r7
 8008772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f8 f99c 	bl	8000ab8 <__aeabi_dcmpeq>
 8008780:	2800      	cmp	r0, #0
 8008782:	d0f2      	beq.n	800876a <pow+0xa2>
 8008784:	eeb0 0a48 	vmov.f32	s0, s16
 8008788:	eef0 0a68 	vmov.f32	s1, s17
 800878c:	f000 fe25 	bl	80093da <finite>
 8008790:	2800      	cmp	r0, #0
 8008792:	d0ea      	beq.n	800876a <pow+0xa2>
 8008794:	ec45 4b10 	vmov	d0, r4, r5
 8008798:	f000 fe1f 	bl	80093da <finite>
 800879c:	e7c3      	b.n	8008726 <pow+0x5e>
 800879e:	4f01      	ldr	r7, [pc, #4]	; (80087a4 <pow+0xdc>)
 80087a0:	2600      	movs	r6, #0
 80087a2:	e7e2      	b.n	800876a <pow+0xa2>
 80087a4:	3ff00000 	.word	0x3ff00000

080087a8 <__ieee754_pow>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	ed2d 8b06 	vpush	{d8-d10}
 80087b0:	b089      	sub	sp, #36	; 0x24
 80087b2:	ed8d 1b00 	vstr	d1, [sp]
 80087b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80087ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80087be:	ea58 0102 	orrs.w	r1, r8, r2
 80087c2:	ec57 6b10 	vmov	r6, r7, d0
 80087c6:	d115      	bne.n	80087f4 <__ieee754_pow+0x4c>
 80087c8:	19b3      	adds	r3, r6, r6
 80087ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80087ce:	4152      	adcs	r2, r2
 80087d0:	4299      	cmp	r1, r3
 80087d2:	4b89      	ldr	r3, [pc, #548]	; (80089f8 <__ieee754_pow+0x250>)
 80087d4:	4193      	sbcs	r3, r2
 80087d6:	f080 84d2 	bcs.w	800917e <__ieee754_pow+0x9d6>
 80087da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f7 fd4b 	bl	800027c <__adddf3>
 80087e6:	ec41 0b10 	vmov	d0, r0, r1
 80087ea:	b009      	add	sp, #36	; 0x24
 80087ec:	ecbd 8b06 	vpop	{d8-d10}
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	4b81      	ldr	r3, [pc, #516]	; (80089fc <__ieee754_pow+0x254>)
 80087f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80087fa:	429c      	cmp	r4, r3
 80087fc:	ee10 aa10 	vmov	sl, s0
 8008800:	463d      	mov	r5, r7
 8008802:	dc06      	bgt.n	8008812 <__ieee754_pow+0x6a>
 8008804:	d101      	bne.n	800880a <__ieee754_pow+0x62>
 8008806:	2e00      	cmp	r6, #0
 8008808:	d1e7      	bne.n	80087da <__ieee754_pow+0x32>
 800880a:	4598      	cmp	r8, r3
 800880c:	dc01      	bgt.n	8008812 <__ieee754_pow+0x6a>
 800880e:	d10f      	bne.n	8008830 <__ieee754_pow+0x88>
 8008810:	b172      	cbz	r2, 8008830 <__ieee754_pow+0x88>
 8008812:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008816:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800881a:	ea55 050a 	orrs.w	r5, r5, sl
 800881e:	d1dc      	bne.n	80087da <__ieee754_pow+0x32>
 8008820:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008824:	18db      	adds	r3, r3, r3
 8008826:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800882a:	4152      	adcs	r2, r2
 800882c:	429d      	cmp	r5, r3
 800882e:	e7d0      	b.n	80087d2 <__ieee754_pow+0x2a>
 8008830:	2d00      	cmp	r5, #0
 8008832:	da3b      	bge.n	80088ac <__ieee754_pow+0x104>
 8008834:	4b72      	ldr	r3, [pc, #456]	; (8008a00 <__ieee754_pow+0x258>)
 8008836:	4598      	cmp	r8, r3
 8008838:	dc51      	bgt.n	80088de <__ieee754_pow+0x136>
 800883a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800883e:	4598      	cmp	r8, r3
 8008840:	f340 84ac 	ble.w	800919c <__ieee754_pow+0x9f4>
 8008844:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800884c:	2b14      	cmp	r3, #20
 800884e:	dd0f      	ble.n	8008870 <__ieee754_pow+0xc8>
 8008850:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008854:	fa22 f103 	lsr.w	r1, r2, r3
 8008858:	fa01 f303 	lsl.w	r3, r1, r3
 800885c:	4293      	cmp	r3, r2
 800885e:	f040 849d 	bne.w	800919c <__ieee754_pow+0x9f4>
 8008862:	f001 0101 	and.w	r1, r1, #1
 8008866:	f1c1 0302 	rsb	r3, r1, #2
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	b182      	cbz	r2, 8008890 <__ieee754_pow+0xe8>
 800886e:	e05f      	b.n	8008930 <__ieee754_pow+0x188>
 8008870:	2a00      	cmp	r2, #0
 8008872:	d15b      	bne.n	800892c <__ieee754_pow+0x184>
 8008874:	f1c3 0314 	rsb	r3, r3, #20
 8008878:	fa48 f103 	asr.w	r1, r8, r3
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	4543      	cmp	r3, r8
 8008882:	f040 8488 	bne.w	8009196 <__ieee754_pow+0x9ee>
 8008886:	f001 0101 	and.w	r1, r1, #1
 800888a:	f1c1 0302 	rsb	r3, r1, #2
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	4b5c      	ldr	r3, [pc, #368]	; (8008a04 <__ieee754_pow+0x25c>)
 8008892:	4598      	cmp	r8, r3
 8008894:	d132      	bne.n	80088fc <__ieee754_pow+0x154>
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	f280 8478 	bge.w	800918e <__ieee754_pow+0x9e6>
 800889e:	4959      	ldr	r1, [pc, #356]	; (8008a04 <__ieee754_pow+0x25c>)
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	2000      	movs	r0, #0
 80088a6:	f7f7 ffc9 	bl	800083c <__aeabi_ddiv>
 80088aa:	e79c      	b.n	80087e6 <__ieee754_pow+0x3e>
 80088ac:	2300      	movs	r3, #0
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	2a00      	cmp	r2, #0
 80088b2:	d13d      	bne.n	8008930 <__ieee754_pow+0x188>
 80088b4:	4b51      	ldr	r3, [pc, #324]	; (80089fc <__ieee754_pow+0x254>)
 80088b6:	4598      	cmp	r8, r3
 80088b8:	d1ea      	bne.n	8008890 <__ieee754_pow+0xe8>
 80088ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80088be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80088c2:	ea53 030a 	orrs.w	r3, r3, sl
 80088c6:	f000 845a 	beq.w	800917e <__ieee754_pow+0x9d6>
 80088ca:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <__ieee754_pow+0x260>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	dd08      	ble.n	80088e2 <__ieee754_pow+0x13a>
 80088d0:	f1b9 0f00 	cmp.w	r9, #0
 80088d4:	f2c0 8457 	blt.w	8009186 <__ieee754_pow+0x9de>
 80088d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088dc:	e783      	b.n	80087e6 <__ieee754_pow+0x3e>
 80088de:	2302      	movs	r3, #2
 80088e0:	e7e5      	b.n	80088ae <__ieee754_pow+0x106>
 80088e2:	f1b9 0f00 	cmp.w	r9, #0
 80088e6:	f04f 0000 	mov.w	r0, #0
 80088ea:	f04f 0100 	mov.w	r1, #0
 80088ee:	f6bf af7a 	bge.w	80087e6 <__ieee754_pow+0x3e>
 80088f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80088f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80088fa:	e774      	b.n	80087e6 <__ieee754_pow+0x3e>
 80088fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008900:	d106      	bne.n	8008910 <__ieee754_pow+0x168>
 8008902:	4632      	mov	r2, r6
 8008904:	463b      	mov	r3, r7
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fe6d 	bl	80005e8 <__aeabi_dmul>
 800890e:	e76a      	b.n	80087e6 <__ieee754_pow+0x3e>
 8008910:	4b3e      	ldr	r3, [pc, #248]	; (8008a0c <__ieee754_pow+0x264>)
 8008912:	4599      	cmp	r9, r3
 8008914:	d10c      	bne.n	8008930 <__ieee754_pow+0x188>
 8008916:	2d00      	cmp	r5, #0
 8008918:	db0a      	blt.n	8008930 <__ieee754_pow+0x188>
 800891a:	ec47 6b10 	vmov	d0, r6, r7
 800891e:	b009      	add	sp, #36	; 0x24
 8008920:	ecbd 8b06 	vpop	{d8-d10}
 8008924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	f000 bc6c 	b.w	8009204 <__ieee754_sqrt>
 800892c:	2300      	movs	r3, #0
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	ec47 6b10 	vmov	d0, r6, r7
 8008934:	f000 fd48 	bl	80093c8 <fabs>
 8008938:	ec51 0b10 	vmov	r0, r1, d0
 800893c:	f1ba 0f00 	cmp.w	sl, #0
 8008940:	d129      	bne.n	8008996 <__ieee754_pow+0x1ee>
 8008942:	b124      	cbz	r4, 800894e <__ieee754_pow+0x1a6>
 8008944:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <__ieee754_pow+0x25c>)
 8008946:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800894a:	429a      	cmp	r2, r3
 800894c:	d123      	bne.n	8008996 <__ieee754_pow+0x1ee>
 800894e:	f1b9 0f00 	cmp.w	r9, #0
 8008952:	da05      	bge.n	8008960 <__ieee754_pow+0x1b8>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	2000      	movs	r0, #0
 800895a:	492a      	ldr	r1, [pc, #168]	; (8008a04 <__ieee754_pow+0x25c>)
 800895c:	f7f7 ff6e 	bl	800083c <__aeabi_ddiv>
 8008960:	2d00      	cmp	r5, #0
 8008962:	f6bf af40 	bge.w	80087e6 <__ieee754_pow+0x3e>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800896c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008970:	4323      	orrs	r3, r4
 8008972:	d108      	bne.n	8008986 <__ieee754_pow+0x1de>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4610      	mov	r0, r2
 800897a:	4619      	mov	r1, r3
 800897c:	f7f7 fc7c 	bl	8000278 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	e78f      	b.n	80088a6 <__ieee754_pow+0xfe>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	2b01      	cmp	r3, #1
 800898a:	f47f af2c 	bne.w	80087e6 <__ieee754_pow+0x3e>
 800898e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008992:	4619      	mov	r1, r3
 8008994:	e727      	b.n	80087e6 <__ieee754_pow+0x3e>
 8008996:	0feb      	lsrs	r3, r5, #31
 8008998:	3b01      	subs	r3, #1
 800899a:	9306      	str	r3, [sp, #24]
 800899c:	9a06      	ldr	r2, [sp, #24]
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d102      	bne.n	80089aa <__ieee754_pow+0x202>
 80089a4:	4632      	mov	r2, r6
 80089a6:	463b      	mov	r3, r7
 80089a8:	e7e6      	b.n	8008978 <__ieee754_pow+0x1d0>
 80089aa:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <__ieee754_pow+0x268>)
 80089ac:	4598      	cmp	r8, r3
 80089ae:	f340 80fb 	ble.w	8008ba8 <__ieee754_pow+0x400>
 80089b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80089b6:	4598      	cmp	r8, r3
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <__ieee754_pow+0x260>)
 80089ba:	dd0c      	ble.n	80089d6 <__ieee754_pow+0x22e>
 80089bc:	429c      	cmp	r4, r3
 80089be:	dc0f      	bgt.n	80089e0 <__ieee754_pow+0x238>
 80089c0:	f1b9 0f00 	cmp.w	r9, #0
 80089c4:	da0f      	bge.n	80089e6 <__ieee754_pow+0x23e>
 80089c6:	2000      	movs	r0, #0
 80089c8:	b009      	add	sp, #36	; 0x24
 80089ca:	ecbd 8b06 	vpop	{d8-d10}
 80089ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d2:	f000 bcf0 	b.w	80093b6 <__math_oflow>
 80089d6:	429c      	cmp	r4, r3
 80089d8:	dbf2      	blt.n	80089c0 <__ieee754_pow+0x218>
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <__ieee754_pow+0x25c>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	dd19      	ble.n	8008a14 <__ieee754_pow+0x26c>
 80089e0:	f1b9 0f00 	cmp.w	r9, #0
 80089e4:	dcef      	bgt.n	80089c6 <__ieee754_pow+0x21e>
 80089e6:	2000      	movs	r0, #0
 80089e8:	b009      	add	sp, #36	; 0x24
 80089ea:	ecbd 8b06 	vpop	{d8-d10}
 80089ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f2:	f000 bcd7 	b.w	80093a4 <__math_uflow>
 80089f6:	bf00      	nop
 80089f8:	fff00000 	.word	0xfff00000
 80089fc:	7ff00000 	.word	0x7ff00000
 8008a00:	433fffff 	.word	0x433fffff
 8008a04:	3ff00000 	.word	0x3ff00000
 8008a08:	3fefffff 	.word	0x3fefffff
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	41e00000 	.word	0x41e00000
 8008a14:	4b60      	ldr	r3, [pc, #384]	; (8008b98 <__ieee754_pow+0x3f0>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	f7f7 fc2e 	bl	8000278 <__aeabi_dsub>
 8008a1c:	a354      	add	r3, pc, #336	; (adr r3, 8008b70 <__ieee754_pow+0x3c8>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	4604      	mov	r4, r0
 8008a24:	460d      	mov	r5, r1
 8008a26:	f7f7 fddf 	bl	80005e8 <__aeabi_dmul>
 8008a2a:	a353      	add	r3, pc, #332	; (adr r3, 8008b78 <__ieee754_pow+0x3d0>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fdd6 	bl	80005e8 <__aeabi_dmul>
 8008a3c:	4b57      	ldr	r3, [pc, #348]	; (8008b9c <__ieee754_pow+0x3f4>)
 8008a3e:	4682      	mov	sl, r0
 8008a40:	468b      	mov	fp, r1
 8008a42:	2200      	movs	r2, #0
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fdce 	bl	80005e8 <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	a14b      	add	r1, pc, #300	; (adr r1, 8008b80 <__ieee754_pow+0x3d8>)
 8008a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a56:	f7f7 fc0f 	bl	8000278 <__aeabi_dsub>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	f7f7 fdc3 	bl	80005e8 <__aeabi_dmul>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	2000      	movs	r0, #0
 8008a68:	494d      	ldr	r1, [pc, #308]	; (8008ba0 <__ieee754_pow+0x3f8>)
 8008a6a:	f7f7 fc05 	bl	8000278 <__aeabi_dsub>
 8008a6e:	4622      	mov	r2, r4
 8008a70:	4680      	mov	r8, r0
 8008a72:	4689      	mov	r9, r1
 8008a74:	462b      	mov	r3, r5
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 fdb5 	bl	80005e8 <__aeabi_dmul>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fdaf 	bl	80005e8 <__aeabi_dmul>
 8008a8a:	a33f      	add	r3, pc, #252	; (adr r3, 8008b88 <__ieee754_pow+0x3e0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fdaa 	bl	80005e8 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4650      	mov	r0, sl
 8008a9a:	4659      	mov	r1, fp
 8008a9c:	f7f7 fbec 	bl	8000278 <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fbe6 	bl	800027c <__adddf3>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	f7f7 fbdd 	bl	8000278 <__aeabi_dsub>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	f7f7 fbd7 	bl	8000278 <__aeabi_dsub>
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	9a06      	ldr	r2, [sp, #24]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	4682      	mov	sl, r0
 8008ad4:	468b      	mov	fp, r1
 8008ad6:	f040 81e7 	bne.w	8008ea8 <__ieee754_pow+0x700>
 8008ada:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008b90 <__ieee754_pow+0x3e8>
 8008ade:	eeb0 8a47 	vmov.f32	s16, s14
 8008ae2:	eef0 8a67 	vmov.f32	s17, s15
 8008ae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008aea:	2600      	movs	r6, #0
 8008aec:	4632      	mov	r2, r6
 8008aee:	463b      	mov	r3, r7
 8008af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af4:	f7f7 fbc0 	bl	8000278 <__aeabi_dsub>
 8008af8:	4622      	mov	r2, r4
 8008afa:	462b      	mov	r3, r5
 8008afc:	f7f7 fd74 	bl	80005e8 <__aeabi_dmul>
 8008b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b04:	4680      	mov	r8, r0
 8008b06:	4689      	mov	r9, r1
 8008b08:	4650      	mov	r0, sl
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	f7f7 fd6c 	bl	80005e8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4640      	mov	r0, r8
 8008b16:	4649      	mov	r1, r9
 8008b18:	f7f7 fbb0 	bl	800027c <__adddf3>
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	4620      	mov	r0, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	f7f7 fd5e 	bl	80005e8 <__aeabi_dmul>
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	4602      	mov	r2, r0
 8008b34:	4649      	mov	r1, r9
 8008b36:	4640      	mov	r0, r8
 8008b38:	f7f7 fba0 	bl	800027c <__adddf3>
 8008b3c:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <__ieee754_pow+0x3fc>)
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	ec45 4b19 	vmov	d9, r4, r5
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	468b      	mov	fp, r1
 8008b4a:	f340 82f1 	ble.w	8009130 <__ieee754_pow+0x988>
 8008b4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008b52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008b56:	4303      	orrs	r3, r0
 8008b58:	f000 81e4 	beq.w	8008f24 <__ieee754_pow+0x77c>
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	f7f7 ffb2 	bl	8000acc <__aeabi_dcmplt>
 8008b68:	3800      	subs	r0, #0
 8008b6a:	bf18      	it	ne
 8008b6c:	2001      	movne	r0, #1
 8008b6e:	e72b      	b.n	80089c8 <__ieee754_pow+0x220>
 8008b70:	60000000 	.word	0x60000000
 8008b74:	3ff71547 	.word	0x3ff71547
 8008b78:	f85ddf44 	.word	0xf85ddf44
 8008b7c:	3e54ae0b 	.word	0x3e54ae0b
 8008b80:	55555555 	.word	0x55555555
 8008b84:	3fd55555 	.word	0x3fd55555
 8008b88:	652b82fe 	.word	0x652b82fe
 8008b8c:	3ff71547 	.word	0x3ff71547
 8008b90:	00000000 	.word	0x00000000
 8008b94:	bff00000 	.word	0xbff00000
 8008b98:	3ff00000 	.word	0x3ff00000
 8008b9c:	3fd00000 	.word	0x3fd00000
 8008ba0:	3fe00000 	.word	0x3fe00000
 8008ba4:	408fffff 	.word	0x408fffff
 8008ba8:	4bd5      	ldr	r3, [pc, #852]	; (8008f00 <__ieee754_pow+0x758>)
 8008baa:	402b      	ands	r3, r5
 8008bac:	2200      	movs	r2, #0
 8008bae:	b92b      	cbnz	r3, 8008bbc <__ieee754_pow+0x414>
 8008bb0:	4bd4      	ldr	r3, [pc, #848]	; (8008f04 <__ieee754_pow+0x75c>)
 8008bb2:	f7f7 fd19 	bl	80005e8 <__aeabi_dmul>
 8008bb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008bba:	460c      	mov	r4, r1
 8008bbc:	1523      	asrs	r3, r4, #20
 8008bbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008bc2:	4413      	add	r3, r2
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	4bd0      	ldr	r3, [pc, #832]	; (8008f08 <__ieee754_pow+0x760>)
 8008bc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008bcc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008bd6:	dd08      	ble.n	8008bea <__ieee754_pow+0x442>
 8008bd8:	4bcc      	ldr	r3, [pc, #816]	; (8008f0c <__ieee754_pow+0x764>)
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	f340 8162 	ble.w	8008ea4 <__ieee754_pow+0x6fc>
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	3301      	adds	r3, #1
 8008be4:	9305      	str	r3, [sp, #20]
 8008be6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008bea:	2400      	movs	r4, #0
 8008bec:	00e3      	lsls	r3, r4, #3
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	4bc7      	ldr	r3, [pc, #796]	; (8008f10 <__ieee754_pow+0x768>)
 8008bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bf6:	ed93 7b00 	vldr	d7, [r3]
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	ec53 2b17 	vmov	r2, r3, d7
 8008c00:	eeb0 9a47 	vmov.f32	s18, s14
 8008c04:	eef0 9a67 	vmov.f32	s19, s15
 8008c08:	4682      	mov	sl, r0
 8008c0a:	f7f7 fb35 	bl	8000278 <__aeabi_dsub>
 8008c0e:	4652      	mov	r2, sl
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	462b      	mov	r3, r5
 8008c16:	ec51 0b19 	vmov	r0, r1, d9
 8008c1a:	f7f7 fb2f 	bl	800027c <__adddf3>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	2000      	movs	r0, #0
 8008c24:	49bb      	ldr	r1, [pc, #748]	; (8008f14 <__ieee754_pow+0x76c>)
 8008c26:	f7f7 fe09 	bl	800083c <__aeabi_ddiv>
 8008c2a:	ec41 0b1a 	vmov	d10, r0, r1
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fcd7 	bl	80005e8 <__aeabi_dmul>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c40:	9302      	str	r3, [sp, #8]
 8008c42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c46:	46ab      	mov	fp, r5
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008c4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008c52:	ec41 0b18 	vmov	d8, r0, r1
 8008c56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4614      	mov	r4, r2
 8008c62:	461d      	mov	r5, r3
 8008c64:	f7f7 fcc0 	bl	80005e8 <__aeabi_dmul>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 fb02 	bl	8000278 <__aeabi_dsub>
 8008c74:	ec53 2b19 	vmov	r2, r3, d9
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fafa 	bl	8000278 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4650      	mov	r0, sl
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	f7f7 faf4 	bl	8000278 <__aeabi_dsub>
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	f7f7 fca8 	bl	80005e8 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 faea 	bl	8000278 <__aeabi_dsub>
 8008ca4:	ec53 2b1a 	vmov	r2, r3, d10
 8008ca8:	f7f7 fc9e 	bl	80005e8 <__aeabi_dmul>
 8008cac:	ec53 2b18 	vmov	r2, r3, d8
 8008cb0:	ec41 0b19 	vmov	d9, r0, r1
 8008cb4:	ec51 0b18 	vmov	r0, r1, d8
 8008cb8:	f7f7 fc96 	bl	80005e8 <__aeabi_dmul>
 8008cbc:	a37c      	add	r3, pc, #496	; (adr r3, 8008eb0 <__ieee754_pow+0x708>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	f7f7 fc8f 	bl	80005e8 <__aeabi_dmul>
 8008cca:	a37b      	add	r3, pc, #492	; (adr r3, 8008eb8 <__ieee754_pow+0x710>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fad4 	bl	800027c <__adddf3>
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	f7f7 fc86 	bl	80005e8 <__aeabi_dmul>
 8008cdc:	a378      	add	r3, pc, #480	; (adr r3, 8008ec0 <__ieee754_pow+0x718>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 facb 	bl	800027c <__adddf3>
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	462b      	mov	r3, r5
 8008cea:	f7f7 fc7d 	bl	80005e8 <__aeabi_dmul>
 8008cee:	a376      	add	r3, pc, #472	; (adr r3, 8008ec8 <__ieee754_pow+0x720>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f7f7 fac2 	bl	800027c <__adddf3>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	f7f7 fc74 	bl	80005e8 <__aeabi_dmul>
 8008d00:	a373      	add	r3, pc, #460	; (adr r3, 8008ed0 <__ieee754_pow+0x728>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fab9 	bl	800027c <__adddf3>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	f7f7 fc6b 	bl	80005e8 <__aeabi_dmul>
 8008d12:	a371      	add	r3, pc, #452	; (adr r3, 8008ed8 <__ieee754_pow+0x730>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fab0 	bl	800027c <__adddf3>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	462b      	mov	r3, r5
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fc5e 	bl	80005e8 <__aeabi_dmul>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 fc58 	bl	80005e8 <__aeabi_dmul>
 8008d38:	4642      	mov	r2, r8
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	464b      	mov	r3, r9
 8008d40:	ec51 0b18 	vmov	r0, r1, d8
 8008d44:	f7f7 fa9a 	bl	800027c <__adddf3>
 8008d48:	ec53 2b19 	vmov	r2, r3, d9
 8008d4c:	f7f7 fc4c 	bl	80005e8 <__aeabi_dmul>
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	f7f7 fa92 	bl	800027c <__adddf3>
 8008d58:	4642      	mov	r2, r8
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	468b      	mov	fp, r1
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 fc40 	bl	80005e8 <__aeabi_dmul>
 8008d68:	4b6b      	ldr	r3, [pc, #428]	; (8008f18 <__ieee754_pow+0x770>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f7f7 fa84 	bl	800027c <__adddf3>
 8008d74:	4652      	mov	r2, sl
 8008d76:	465b      	mov	r3, fp
 8008d78:	f7f7 fa80 	bl	800027c <__adddf3>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	460d      	mov	r5, r1
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 fc2d 	bl	80005e8 <__aeabi_dmul>
 8008d8e:	4b62      	ldr	r3, [pc, #392]	; (8008f18 <__ieee754_pow+0x770>)
 8008d90:	4680      	mov	r8, r0
 8008d92:	4689      	mov	r9, r1
 8008d94:	2200      	movs	r2, #0
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 fa6d 	bl	8000278 <__aeabi_dsub>
 8008d9e:	4632      	mov	r2, r6
 8008da0:	463b      	mov	r3, r7
 8008da2:	f7f7 fa69 	bl	8000278 <__aeabi_dsub>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4650      	mov	r0, sl
 8008dac:	4659      	mov	r1, fp
 8008dae:	f7f7 fa63 	bl	8000278 <__aeabi_dsub>
 8008db2:	ec53 2b18 	vmov	r2, r3, d8
 8008db6:	f7f7 fc17 	bl	80005e8 <__aeabi_dmul>
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	ec51 0b19 	vmov	r0, r1, d9
 8008dc6:	f7f7 fc0f 	bl	80005e8 <__aeabi_dmul>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4630      	mov	r0, r6
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	f7f7 fa53 	bl	800027c <__adddf3>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460f      	mov	r7, r1
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fa4b 	bl	800027c <__adddf3>
 8008de6:	a33e      	add	r3, pc, #248	; (adr r3, 8008ee0 <__ieee754_pow+0x738>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	2000      	movs	r0, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
 8008df2:	f7f7 fbf9 	bl	80005e8 <__aeabi_dmul>
 8008df6:	4642      	mov	r2, r8
 8008df8:	ec41 0b18 	vmov	d8, r0, r1
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 fa39 	bl	8000278 <__aeabi_dsub>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fa33 	bl	8000278 <__aeabi_dsub>
 8008e12:	a335      	add	r3, pc, #212	; (adr r3, 8008ee8 <__ieee754_pow+0x740>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fbe6 	bl	80005e8 <__aeabi_dmul>
 8008e1c:	a334      	add	r3, pc, #208	; (adr r3, 8008ef0 <__ieee754_pow+0x748>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	4606      	mov	r6, r0
 8008e24:	460f      	mov	r7, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fbdd 	bl	80005e8 <__aeabi_dmul>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fa21 	bl	800027c <__adddf3>
 8008e3a:	9a07      	ldr	r2, [sp, #28]
 8008e3c:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <__ieee754_pow+0x774>)
 8008e3e:	4413      	add	r3, r2
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 fa1a 	bl	800027c <__adddf3>
 8008e48:	4682      	mov	sl, r0
 8008e4a:	9805      	ldr	r0, [sp, #20]
 8008e4c:	468b      	mov	fp, r1
 8008e4e:	f7f7 fb61 	bl	8000514 <__aeabi_i2d>
 8008e52:	9a07      	ldr	r2, [sp, #28]
 8008e54:	4b32      	ldr	r3, [pc, #200]	; (8008f20 <__ieee754_pow+0x778>)
 8008e56:	4413      	add	r3, r2
 8008e58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	460f      	mov	r7, r1
 8008e60:	4652      	mov	r2, sl
 8008e62:	465b      	mov	r3, fp
 8008e64:	ec51 0b18 	vmov	r0, r1, d8
 8008e68:	f7f7 fa08 	bl	800027c <__adddf3>
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	464b      	mov	r3, r9
 8008e70:	f7f7 fa04 	bl	800027c <__adddf3>
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	f7f7 fa00 	bl	800027c <__adddf3>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	4604      	mov	r4, r0
 8008e84:	460d      	mov	r5, r1
 8008e86:	f7f7 f9f7 	bl	8000278 <__aeabi_dsub>
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	f7f7 f9f3 	bl	8000278 <__aeabi_dsub>
 8008e92:	ec53 2b18 	vmov	r2, r3, d8
 8008e96:	f7f7 f9ef 	bl	8000278 <__aeabi_dsub>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	e610      	b.n	8008ac6 <__ieee754_pow+0x31e>
 8008ea4:	2401      	movs	r4, #1
 8008ea6:	e6a1      	b.n	8008bec <__ieee754_pow+0x444>
 8008ea8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008ef8 <__ieee754_pow+0x750>
 8008eac:	e617      	b.n	8008ade <__ieee754_pow+0x336>
 8008eae:	bf00      	nop
 8008eb0:	4a454eef 	.word	0x4a454eef
 8008eb4:	3fca7e28 	.word	0x3fca7e28
 8008eb8:	93c9db65 	.word	0x93c9db65
 8008ebc:	3fcd864a 	.word	0x3fcd864a
 8008ec0:	a91d4101 	.word	0xa91d4101
 8008ec4:	3fd17460 	.word	0x3fd17460
 8008ec8:	518f264d 	.word	0x518f264d
 8008ecc:	3fd55555 	.word	0x3fd55555
 8008ed0:	db6fabff 	.word	0xdb6fabff
 8008ed4:	3fdb6db6 	.word	0x3fdb6db6
 8008ed8:	33333303 	.word	0x33333303
 8008edc:	3fe33333 	.word	0x3fe33333
 8008ee0:	e0000000 	.word	0xe0000000
 8008ee4:	3feec709 	.word	0x3feec709
 8008ee8:	dc3a03fd 	.word	0xdc3a03fd
 8008eec:	3feec709 	.word	0x3feec709
 8008ef0:	145b01f5 	.word	0x145b01f5
 8008ef4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	3ff00000 	.word	0x3ff00000
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	43400000 	.word	0x43400000
 8008f08:	0003988e 	.word	0x0003988e
 8008f0c:	000bb679 	.word	0x000bb679
 8008f10:	080095f0 	.word	0x080095f0
 8008f14:	3ff00000 	.word	0x3ff00000
 8008f18:	40080000 	.word	0x40080000
 8008f1c:	08009610 	.word	0x08009610
 8008f20:	08009600 	.word	0x08009600
 8008f24:	a3b5      	add	r3, pc, #724	; (adr r3, 80091fc <__ieee754_pow+0xa54>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 f9a5 	bl	800027c <__adddf3>
 8008f32:	4622      	mov	r2, r4
 8008f34:	ec41 0b1a 	vmov	d10, r0, r1
 8008f38:	462b      	mov	r3, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	f7f7 f99b 	bl	8000278 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	ec51 0b1a 	vmov	r0, r1, d10
 8008f4a:	f7f7 fddd 	bl	8000b08 <__aeabi_dcmpgt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f47f ae04 	bne.w	8008b5c <__ieee754_pow+0x3b4>
 8008f54:	4aa4      	ldr	r2, [pc, #656]	; (80091e8 <__ieee754_pow+0xa40>)
 8008f56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f340 8108 	ble.w	8009170 <__ieee754_pow+0x9c8>
 8008f60:	151b      	asrs	r3, r3, #20
 8008f62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008f66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008f6a:	fa4a f303 	asr.w	r3, sl, r3
 8008f6e:	445b      	add	r3, fp
 8008f70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008f74:	4e9d      	ldr	r6, [pc, #628]	; (80091ec <__ieee754_pow+0xa44>)
 8008f76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f7a:	4116      	asrs	r6, r2
 8008f7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008f80:	2000      	movs	r0, #0
 8008f82:	ea23 0106 	bic.w	r1, r3, r6
 8008f86:	f1c2 0214 	rsb	r2, r2, #20
 8008f8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008f8e:	fa4a fa02 	asr.w	sl, sl, r2
 8008f92:	f1bb 0f00 	cmp.w	fp, #0
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	bfb8      	it	lt
 8008fa0:	f1ca 0a00 	rsblt	sl, sl, #0
 8008fa4:	f7f7 f968 	bl	8000278 <__aeabi_dsub>
 8008fa8:	ec41 0b19 	vmov	d9, r0, r1
 8008fac:	4642      	mov	r2, r8
 8008fae:	464b      	mov	r3, r9
 8008fb0:	ec51 0b19 	vmov	r0, r1, d9
 8008fb4:	f7f7 f962 	bl	800027c <__adddf3>
 8008fb8:	a37b      	add	r3, pc, #492	; (adr r3, 80091a8 <__ieee754_pow+0xa00>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	f7f7 fb10 	bl	80005e8 <__aeabi_dmul>
 8008fc8:	ec53 2b19 	vmov	r2, r3, d9
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	f7f7 f950 	bl	8000278 <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7f7 f94a 	bl	8000278 <__aeabi_dsub>
 8008fe4:	a372      	add	r3, pc, #456	; (adr r3, 80091b0 <__ieee754_pow+0xa08>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 fafd 	bl	80005e8 <__aeabi_dmul>
 8008fee:	a372      	add	r3, pc, #456	; (adr r3, 80091b8 <__ieee754_pow+0xa10>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 faf4 	bl	80005e8 <__aeabi_dmul>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4640      	mov	r0, r8
 8009006:	4649      	mov	r1, r9
 8009008:	f7f7 f938 	bl	800027c <__adddf3>
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f930 	bl	800027c <__adddf3>
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	4680      	mov	r8, r0
 8009022:	4689      	mov	r9, r1
 8009024:	f7f7 f928 	bl	8000278 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	f7f7 f922 	bl	8000278 <__aeabi_dsub>
 8009034:	4642      	mov	r2, r8
 8009036:	4606      	mov	r6, r0
 8009038:	460f      	mov	r7, r1
 800903a:	464b      	mov	r3, r9
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 fad2 	bl	80005e8 <__aeabi_dmul>
 8009044:	a35e      	add	r3, pc, #376	; (adr r3, 80091c0 <__ieee754_pow+0xa18>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	4604      	mov	r4, r0
 800904c:	460d      	mov	r5, r1
 800904e:	f7f7 facb 	bl	80005e8 <__aeabi_dmul>
 8009052:	a35d      	add	r3, pc, #372	; (adr r3, 80091c8 <__ieee754_pow+0xa20>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f90e 	bl	8000278 <__aeabi_dsub>
 800905c:	4622      	mov	r2, r4
 800905e:	462b      	mov	r3, r5
 8009060:	f7f7 fac2 	bl	80005e8 <__aeabi_dmul>
 8009064:	a35a      	add	r3, pc, #360	; (adr r3, 80091d0 <__ieee754_pow+0xa28>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 f907 	bl	800027c <__adddf3>
 800906e:	4622      	mov	r2, r4
 8009070:	462b      	mov	r3, r5
 8009072:	f7f7 fab9 	bl	80005e8 <__aeabi_dmul>
 8009076:	a358      	add	r3, pc, #352	; (adr r3, 80091d8 <__ieee754_pow+0xa30>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 f8fc 	bl	8000278 <__aeabi_dsub>
 8009080:	4622      	mov	r2, r4
 8009082:	462b      	mov	r3, r5
 8009084:	f7f7 fab0 	bl	80005e8 <__aeabi_dmul>
 8009088:	a355      	add	r3, pc, #340	; (adr r3, 80091e0 <__ieee754_pow+0xa38>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f7f7 f8f5 	bl	800027c <__adddf3>
 8009092:	4622      	mov	r2, r4
 8009094:	462b      	mov	r3, r5
 8009096:	f7f7 faa7 	bl	80005e8 <__aeabi_dmul>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 f8e9 	bl	8000278 <__aeabi_dsub>
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fa99 	bl	80005e8 <__aeabi_dmul>
 80090b6:	2200      	movs	r2, #0
 80090b8:	ec41 0b19 	vmov	d9, r0, r1
 80090bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090c0:	4620      	mov	r0, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	f7f7 f8d8 	bl	8000278 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	ec51 0b19 	vmov	r0, r1, d9
 80090d0:	f7f7 fbb4 	bl	800083c <__aeabi_ddiv>
 80090d4:	4632      	mov	r2, r6
 80090d6:	4604      	mov	r4, r0
 80090d8:	460d      	mov	r5, r1
 80090da:	463b      	mov	r3, r7
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 fa82 	bl	80005e8 <__aeabi_dmul>
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	f7f7 f8c8 	bl	800027c <__adddf3>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 f8c0 	bl	8000278 <__aeabi_dsub>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	f7f7 f8bc 	bl	8000278 <__aeabi_dsub>
 8009100:	460b      	mov	r3, r1
 8009102:	4602      	mov	r2, r0
 8009104:	493a      	ldr	r1, [pc, #232]	; (80091f0 <__ieee754_pow+0xa48>)
 8009106:	2000      	movs	r0, #0
 8009108:	f7f7 f8b6 	bl	8000278 <__aeabi_dsub>
 800910c:	ec41 0b10 	vmov	d0, r0, r1
 8009110:	ee10 3a90 	vmov	r3, s1
 8009114:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800911c:	da2b      	bge.n	8009176 <__ieee754_pow+0x9ce>
 800911e:	4650      	mov	r0, sl
 8009120:	f000 f966 	bl	80093f0 <scalbn>
 8009124:	ec51 0b10 	vmov	r0, r1, d0
 8009128:	ec53 2b18 	vmov	r2, r3, d8
 800912c:	f7ff bbed 	b.w	800890a <__ieee754_pow+0x162>
 8009130:	4b30      	ldr	r3, [pc, #192]	; (80091f4 <__ieee754_pow+0xa4c>)
 8009132:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009136:	429e      	cmp	r6, r3
 8009138:	f77f af0c 	ble.w	8008f54 <__ieee754_pow+0x7ac>
 800913c:	4b2e      	ldr	r3, [pc, #184]	; (80091f8 <__ieee754_pow+0xa50>)
 800913e:	440b      	add	r3, r1
 8009140:	4303      	orrs	r3, r0
 8009142:	d009      	beq.n	8009158 <__ieee754_pow+0x9b0>
 8009144:	ec51 0b18 	vmov	r0, r1, d8
 8009148:	2200      	movs	r2, #0
 800914a:	2300      	movs	r3, #0
 800914c:	f7f7 fcbe 	bl	8000acc <__aeabi_dcmplt>
 8009150:	3800      	subs	r0, #0
 8009152:	bf18      	it	ne
 8009154:	2001      	movne	r0, #1
 8009156:	e447      	b.n	80089e8 <__ieee754_pow+0x240>
 8009158:	4622      	mov	r2, r4
 800915a:	462b      	mov	r3, r5
 800915c:	f7f7 f88c 	bl	8000278 <__aeabi_dsub>
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	f7f7 fcc6 	bl	8000af4 <__aeabi_dcmpge>
 8009168:	2800      	cmp	r0, #0
 800916a:	f43f aef3 	beq.w	8008f54 <__ieee754_pow+0x7ac>
 800916e:	e7e9      	b.n	8009144 <__ieee754_pow+0x99c>
 8009170:	f04f 0a00 	mov.w	sl, #0
 8009174:	e71a      	b.n	8008fac <__ieee754_pow+0x804>
 8009176:	ec51 0b10 	vmov	r0, r1, d0
 800917a:	4619      	mov	r1, r3
 800917c:	e7d4      	b.n	8009128 <__ieee754_pow+0x980>
 800917e:	491c      	ldr	r1, [pc, #112]	; (80091f0 <__ieee754_pow+0xa48>)
 8009180:	2000      	movs	r0, #0
 8009182:	f7ff bb30 	b.w	80087e6 <__ieee754_pow+0x3e>
 8009186:	2000      	movs	r0, #0
 8009188:	2100      	movs	r1, #0
 800918a:	f7ff bb2c 	b.w	80087e6 <__ieee754_pow+0x3e>
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7ff bb28 	b.w	80087e6 <__ieee754_pow+0x3e>
 8009196:	9204      	str	r2, [sp, #16]
 8009198:	f7ff bb7a 	b.w	8008890 <__ieee754_pow+0xe8>
 800919c:	2300      	movs	r3, #0
 800919e:	f7ff bb64 	b.w	800886a <__ieee754_pow+0xc2>
 80091a2:	bf00      	nop
 80091a4:	f3af 8000 	nop.w
 80091a8:	00000000 	.word	0x00000000
 80091ac:	3fe62e43 	.word	0x3fe62e43
 80091b0:	fefa39ef 	.word	0xfefa39ef
 80091b4:	3fe62e42 	.word	0x3fe62e42
 80091b8:	0ca86c39 	.word	0x0ca86c39
 80091bc:	be205c61 	.word	0xbe205c61
 80091c0:	72bea4d0 	.word	0x72bea4d0
 80091c4:	3e663769 	.word	0x3e663769
 80091c8:	c5d26bf1 	.word	0xc5d26bf1
 80091cc:	3ebbbd41 	.word	0x3ebbbd41
 80091d0:	af25de2c 	.word	0xaf25de2c
 80091d4:	3f11566a 	.word	0x3f11566a
 80091d8:	16bebd93 	.word	0x16bebd93
 80091dc:	3f66c16c 	.word	0x3f66c16c
 80091e0:	5555553e 	.word	0x5555553e
 80091e4:	3fc55555 	.word	0x3fc55555
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	000fffff 	.word	0x000fffff
 80091f0:	3ff00000 	.word	0x3ff00000
 80091f4:	4090cbff 	.word	0x4090cbff
 80091f8:	3f6f3400 	.word	0x3f6f3400
 80091fc:	652b82fe 	.word	0x652b82fe
 8009200:	3c971547 	.word	0x3c971547

08009204 <__ieee754_sqrt>:
 8009204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	ec55 4b10 	vmov	r4, r5, d0
 800920c:	4e55      	ldr	r6, [pc, #340]	; (8009364 <__ieee754_sqrt+0x160>)
 800920e:	43ae      	bics	r6, r5
 8009210:	ee10 0a10 	vmov	r0, s0
 8009214:	ee10 3a10 	vmov	r3, s0
 8009218:	462a      	mov	r2, r5
 800921a:	4629      	mov	r1, r5
 800921c:	d110      	bne.n	8009240 <__ieee754_sqrt+0x3c>
 800921e:	ee10 2a10 	vmov	r2, s0
 8009222:	462b      	mov	r3, r5
 8009224:	f7f7 f9e0 	bl	80005e8 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 f824 	bl	800027c <__adddf3>
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	ec45 4b10 	vmov	d0, r4, r5
 800923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009240:	2d00      	cmp	r5, #0
 8009242:	dc10      	bgt.n	8009266 <__ieee754_sqrt+0x62>
 8009244:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009248:	4330      	orrs	r0, r6
 800924a:	d0f5      	beq.n	8009238 <__ieee754_sqrt+0x34>
 800924c:	b15d      	cbz	r5, 8009266 <__ieee754_sqrt+0x62>
 800924e:	ee10 2a10 	vmov	r2, s0
 8009252:	462b      	mov	r3, r5
 8009254:	ee10 0a10 	vmov	r0, s0
 8009258:	f7f7 f80e 	bl	8000278 <__aeabi_dsub>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	f7f7 faec 	bl	800083c <__aeabi_ddiv>
 8009264:	e7e6      	b.n	8009234 <__ieee754_sqrt+0x30>
 8009266:	1512      	asrs	r2, r2, #20
 8009268:	d074      	beq.n	8009354 <__ieee754_sqrt+0x150>
 800926a:	07d4      	lsls	r4, r2, #31
 800926c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009270:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009274:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009278:	bf5e      	ittt	pl
 800927a:	0fda      	lsrpl	r2, r3, #31
 800927c:	005b      	lslpl	r3, r3, #1
 800927e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009282:	2400      	movs	r4, #0
 8009284:	0fda      	lsrs	r2, r3, #31
 8009286:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800928a:	107f      	asrs	r7, r7, #1
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	2516      	movs	r5, #22
 8009290:	4620      	mov	r0, r4
 8009292:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009296:	1886      	adds	r6, r0, r2
 8009298:	428e      	cmp	r6, r1
 800929a:	bfde      	ittt	le
 800929c:	1b89      	suble	r1, r1, r6
 800929e:	18b0      	addle	r0, r6, r2
 80092a0:	18a4      	addle	r4, r4, r2
 80092a2:	0049      	lsls	r1, r1, #1
 80092a4:	3d01      	subs	r5, #1
 80092a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80092aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80092ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092b2:	d1f0      	bne.n	8009296 <__ieee754_sqrt+0x92>
 80092b4:	462a      	mov	r2, r5
 80092b6:	f04f 0e20 	mov.w	lr, #32
 80092ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80092be:	4281      	cmp	r1, r0
 80092c0:	eb06 0c05 	add.w	ip, r6, r5
 80092c4:	dc02      	bgt.n	80092cc <__ieee754_sqrt+0xc8>
 80092c6:	d113      	bne.n	80092f0 <__ieee754_sqrt+0xec>
 80092c8:	459c      	cmp	ip, r3
 80092ca:	d811      	bhi.n	80092f0 <__ieee754_sqrt+0xec>
 80092cc:	f1bc 0f00 	cmp.w	ip, #0
 80092d0:	eb0c 0506 	add.w	r5, ip, r6
 80092d4:	da43      	bge.n	800935e <__ieee754_sqrt+0x15a>
 80092d6:	2d00      	cmp	r5, #0
 80092d8:	db41      	blt.n	800935e <__ieee754_sqrt+0x15a>
 80092da:	f100 0801 	add.w	r8, r0, #1
 80092de:	1a09      	subs	r1, r1, r0
 80092e0:	459c      	cmp	ip, r3
 80092e2:	bf88      	it	hi
 80092e4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80092e8:	eba3 030c 	sub.w	r3, r3, ip
 80092ec:	4432      	add	r2, r6
 80092ee:	4640      	mov	r0, r8
 80092f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80092f4:	f1be 0e01 	subs.w	lr, lr, #1
 80092f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80092fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009300:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009304:	d1db      	bne.n	80092be <__ieee754_sqrt+0xba>
 8009306:	430b      	orrs	r3, r1
 8009308:	d006      	beq.n	8009318 <__ieee754_sqrt+0x114>
 800930a:	1c50      	adds	r0, r2, #1
 800930c:	bf13      	iteet	ne
 800930e:	3201      	addne	r2, #1
 8009310:	3401      	addeq	r4, #1
 8009312:	4672      	moveq	r2, lr
 8009314:	f022 0201 	bicne.w	r2, r2, #1
 8009318:	1063      	asrs	r3, r4, #1
 800931a:	0852      	lsrs	r2, r2, #1
 800931c:	07e1      	lsls	r1, r4, #31
 800931e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009322:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009326:	bf48      	it	mi
 8009328:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800932c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009330:	4614      	mov	r4, r2
 8009332:	e781      	b.n	8009238 <__ieee754_sqrt+0x34>
 8009334:	0ad9      	lsrs	r1, r3, #11
 8009336:	3815      	subs	r0, #21
 8009338:	055b      	lsls	r3, r3, #21
 800933a:	2900      	cmp	r1, #0
 800933c:	d0fa      	beq.n	8009334 <__ieee754_sqrt+0x130>
 800933e:	02cd      	lsls	r5, r1, #11
 8009340:	d50a      	bpl.n	8009358 <__ieee754_sqrt+0x154>
 8009342:	f1c2 0420 	rsb	r4, r2, #32
 8009346:	fa23 f404 	lsr.w	r4, r3, r4
 800934a:	1e55      	subs	r5, r2, #1
 800934c:	4093      	lsls	r3, r2
 800934e:	4321      	orrs	r1, r4
 8009350:	1b42      	subs	r2, r0, r5
 8009352:	e78a      	b.n	800926a <__ieee754_sqrt+0x66>
 8009354:	4610      	mov	r0, r2
 8009356:	e7f0      	b.n	800933a <__ieee754_sqrt+0x136>
 8009358:	0049      	lsls	r1, r1, #1
 800935a:	3201      	adds	r2, #1
 800935c:	e7ef      	b.n	800933e <__ieee754_sqrt+0x13a>
 800935e:	4680      	mov	r8, r0
 8009360:	e7bd      	b.n	80092de <__ieee754_sqrt+0xda>
 8009362:	bf00      	nop
 8009364:	7ff00000 	.word	0x7ff00000

08009368 <with_errno>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	4616      	mov	r6, r2
 8009370:	f7fe fd0a 	bl	8007d88 <__errno>
 8009374:	4629      	mov	r1, r5
 8009376:	6006      	str	r6, [r0, #0]
 8009378:	4620      	mov	r0, r4
 800937a:	bd70      	pop	{r4, r5, r6, pc}

0800937c <xflow>:
 800937c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800937e:	4614      	mov	r4, r2
 8009380:	461d      	mov	r5, r3
 8009382:	b108      	cbz	r0, 8009388 <xflow+0xc>
 8009384:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009388:	e9cd 2300 	strd	r2, r3, [sp]
 800938c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009390:	4620      	mov	r0, r4
 8009392:	4629      	mov	r1, r5
 8009394:	f7f7 f928 	bl	80005e8 <__aeabi_dmul>
 8009398:	2222      	movs	r2, #34	; 0x22
 800939a:	b003      	add	sp, #12
 800939c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a0:	f7ff bfe2 	b.w	8009368 <with_errno>

080093a4 <__math_uflow>:
 80093a4:	b508      	push	{r3, lr}
 80093a6:	2200      	movs	r2, #0
 80093a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093ac:	f7ff ffe6 	bl	800937c <xflow>
 80093b0:	ec41 0b10 	vmov	d0, r0, r1
 80093b4:	bd08      	pop	{r3, pc}

080093b6 <__math_oflow>:
 80093b6:	b508      	push	{r3, lr}
 80093b8:	2200      	movs	r2, #0
 80093ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80093be:	f7ff ffdd 	bl	800937c <xflow>
 80093c2:	ec41 0b10 	vmov	d0, r0, r1
 80093c6:	bd08      	pop	{r3, pc}

080093c8 <fabs>:
 80093c8:	ec51 0b10 	vmov	r0, r1, d0
 80093cc:	ee10 2a10 	vmov	r2, s0
 80093d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093d4:	ec43 2b10 	vmov	d0, r2, r3
 80093d8:	4770      	bx	lr

080093da <finite>:
 80093da:	b082      	sub	sp, #8
 80093dc:	ed8d 0b00 	vstr	d0, [sp]
 80093e0:	9801      	ldr	r0, [sp, #4]
 80093e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80093e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80093ea:	0fc0      	lsrs	r0, r0, #31
 80093ec:	b002      	add	sp, #8
 80093ee:	4770      	bx	lr

080093f0 <scalbn>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	ec55 4b10 	vmov	r4, r5, d0
 80093f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80093fa:	4606      	mov	r6, r0
 80093fc:	462b      	mov	r3, r5
 80093fe:	b99a      	cbnz	r2, 8009428 <scalbn+0x38>
 8009400:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009404:	4323      	orrs	r3, r4
 8009406:	d036      	beq.n	8009476 <scalbn+0x86>
 8009408:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <scalbn+0x100>)
 800940a:	4629      	mov	r1, r5
 800940c:	ee10 0a10 	vmov	r0, s0
 8009410:	2200      	movs	r2, #0
 8009412:	f7f7 f8e9 	bl	80005e8 <__aeabi_dmul>
 8009416:	4b37      	ldr	r3, [pc, #220]	; (80094f4 <scalbn+0x104>)
 8009418:	429e      	cmp	r6, r3
 800941a:	4604      	mov	r4, r0
 800941c:	460d      	mov	r5, r1
 800941e:	da10      	bge.n	8009442 <scalbn+0x52>
 8009420:	a32b      	add	r3, pc, #172	; (adr r3, 80094d0 <scalbn+0xe0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	e03a      	b.n	800949e <scalbn+0xae>
 8009428:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800942c:	428a      	cmp	r2, r1
 800942e:	d10c      	bne.n	800944a <scalbn+0x5a>
 8009430:	ee10 2a10 	vmov	r2, s0
 8009434:	4620      	mov	r0, r4
 8009436:	4629      	mov	r1, r5
 8009438:	f7f6 ff20 	bl	800027c <__adddf3>
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	e019      	b.n	8009476 <scalbn+0x86>
 8009442:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009446:	460b      	mov	r3, r1
 8009448:	3a36      	subs	r2, #54	; 0x36
 800944a:	4432      	add	r2, r6
 800944c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009450:	428a      	cmp	r2, r1
 8009452:	dd08      	ble.n	8009466 <scalbn+0x76>
 8009454:	2d00      	cmp	r5, #0
 8009456:	a120      	add	r1, pc, #128	; (adr r1, 80094d8 <scalbn+0xe8>)
 8009458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800945c:	da1c      	bge.n	8009498 <scalbn+0xa8>
 800945e:	a120      	add	r1, pc, #128	; (adr r1, 80094e0 <scalbn+0xf0>)
 8009460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009464:	e018      	b.n	8009498 <scalbn+0xa8>
 8009466:	2a00      	cmp	r2, #0
 8009468:	dd08      	ble.n	800947c <scalbn+0x8c>
 800946a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800946e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009476:	ec45 4b10 	vmov	d0, r4, r5
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009480:	da19      	bge.n	80094b6 <scalbn+0xc6>
 8009482:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009486:	429e      	cmp	r6, r3
 8009488:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800948c:	dd0a      	ble.n	80094a4 <scalbn+0xb4>
 800948e:	a112      	add	r1, pc, #72	; (adr r1, 80094d8 <scalbn+0xe8>)
 8009490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e2      	bne.n	800945e <scalbn+0x6e>
 8009498:	a30f      	add	r3, pc, #60	; (adr r3, 80094d8 <scalbn+0xe8>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f7 f8a3 	bl	80005e8 <__aeabi_dmul>
 80094a2:	e7cb      	b.n	800943c <scalbn+0x4c>
 80094a4:	a10a      	add	r1, pc, #40	; (adr r1, 80094d0 <scalbn+0xe0>)
 80094a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0b8      	beq.n	8009420 <scalbn+0x30>
 80094ae:	a10e      	add	r1, pc, #56	; (adr r1, 80094e8 <scalbn+0xf8>)
 80094b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b4:	e7b4      	b.n	8009420 <scalbn+0x30>
 80094b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094ba:	3236      	adds	r2, #54	; 0x36
 80094bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80094c4:	4620      	mov	r0, r4
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <scalbn+0x108>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	e7e8      	b.n	800949e <scalbn+0xae>
 80094cc:	f3af 8000 	nop.w
 80094d0:	c2f8f359 	.word	0xc2f8f359
 80094d4:	01a56e1f 	.word	0x01a56e1f
 80094d8:	8800759c 	.word	0x8800759c
 80094dc:	7e37e43c 	.word	0x7e37e43c
 80094e0:	8800759c 	.word	0x8800759c
 80094e4:	fe37e43c 	.word	0xfe37e43c
 80094e8:	c2f8f359 	.word	0xc2f8f359
 80094ec:	81a56e1f 	.word	0x81a56e1f
 80094f0:	43500000 	.word	0x43500000
 80094f4:	ffff3cb0 	.word	0xffff3cb0
 80094f8:	3c900000 	.word	0x3c900000

080094fc <_init>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr

08009508 <_fini>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr
