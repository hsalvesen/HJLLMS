
E1_LOCK_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000765c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007830  08007830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007830  08007830  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007830  08007830  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001579a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284c  00000000  00000000  000357d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001148  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f575  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c6a  00000000  00000000  00059955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c17c6  00000000  00000000  000715bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132d85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000503c  00000000  00000000  00132dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077cc 	.word	0x080077cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080077cc 	.word	0x080077cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <enable_clocks+0x1c>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <enable_clocks+0x1c>)
 80009ae:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80009b2:	6153      	str	r3, [r2, #20]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <initialise_board+0x20>)
 80009cc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80009d4:	801a      	strh	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	48001002 	.word	0x48001002

080009e8 <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d127      	bne.n	8000a4a <HAL_TIM_IC_CaptureCallback+0x62>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7f1b      	ldrb	r3, [r3, #28]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d123      	bne.n	8000a4a <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000a02:	2100      	movs	r1, #0
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f006 f82b 	bl	8006a60 <HAL_TIM_ReadCapturedValue>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f002 fda7 	bl	8003568 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d103      	bne.n	8000a28 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a24:	8013      	strh	r3, [r2, #0]
 8000a26:	e006      	b.n	8000a36 <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a34:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a42:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a48:	8013      	strh	r3, [r2, #0]
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	; 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012c00 	.word	0x40012c00
 8000a58:	200004b8 	.word	0x200004b8
 8000a5c:	200004ba 	.word	0x200004ba
 8000a60:	200004b4 	.word	0x200004b4
 8000a64:	200004b6 	.word	0x200004b6

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b0a2      	sub	sp, #136	; 0x88
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	enable_clocks();
 8000a6e:	f7ff ff99 	bl	80009a4 <enable_clocks>
	initialise_board();
 8000a72:	f7ff ffa7 	bl	80009c4 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000a76:	4bc7      	ldr	r3, [pc, #796]	; (8000d94 <main+0x32c>)
 8000a78:	673b      	str	r3, [r7, #112]	; 0x70

	HAL_StatusTypeDef return_value = 0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	volatile uint16_t vertical_PWM = 1000;
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f001 f8be 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 faea 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 fd3a 	bl	8001508 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a94:	f000 fbbc 	bl	8001210 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a98:	f000 fbfa 	bl	8001290 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a9c:	f000 fd12 	bl	80014c4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000aa0:	f000 fcaa 	bl	80013f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000aa4:	f000 fc32 	bl	800130c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000aa8:	f000 fb42 	bl	8001130 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aac:	2100      	movs	r1, #0
 8000aae:	48ba      	ldr	r0, [pc, #744]	; (8000d98 <main+0x330>)
 8000ab0:	f005 f998 	bl	8005de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	48b8      	ldr	r0, [pc, #736]	; (8000d98 <main+0x330>)
 8000ab8:	f005 f994 	bl	8005de4 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000abc:	2100      	movs	r1, #0
 8000abe:	48b7      	ldr	r0, [pc, #732]	; (8000d9c <main+0x334>)
 8000ac0:	f005 faf2 	bl	80060a8 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000ade:	48b0      	ldr	r0, [pc, #704]	; (8000da0 <main+0x338>)
 8000ae0:	f000 fd96 	bl	8001610 <initialise_ptu_i2c>

  /* USER CODE END 2 */

  /* Infinite loop */

	uint16_t reset_angle = 1600;
 8000ae4:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000ae8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint8_t correct_entry = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87




	uint8_t current_state = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		uint8_t led_on = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		uint32_t led_timestamp = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		uint32_t state_timestamp[5] = {0, 0, 0, 0, 0};
 8000b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
		uint32_t predefined_angles_degrees[5] = {135, 45, 180, 0, 90};
 8000b14:	4ba3      	ldr	r3, [pc, #652]	; (8000da4 <main+0x33c>)
 8000b16:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	6023      	str	r3, [r4, #0]
		uint32_t predefined_angles_adc[5] = {0, 0, 0, 0, 0};
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
		uint32_t angles_robot[5] = {0, 0, 0, 0, 0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
		uint32_t robot_zero_angle = 650;
 8000b42:	f240 238a 	movw	r3, #650	; 0x28a
 8000b46:	66bb      	str	r3, [r7, #104]	; 0x68
		uint32_t upper_calibration = 3800;
 8000b48:	f640 63d8 	movw	r3, #3800	; 0xed8
 8000b4c:	667b      	str	r3, [r7, #100]	; 0x64
		uint32_t lower_calibration = 1200;
 8000b4e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000b52:	663b      	str	r3, [r7, #96]	; 0x60
		uint32_t tolerance = 400;
 8000b54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b58:	65fb      	str	r3, [r7, #92]	; 0x5c

		uint32_t degrees_to_servo = 1900/180;
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	65bb      	str	r3, [r7, #88]	; 0x58

		for (uint32_t i = 0; i < 5; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b62:	e040      	b.n	8000be6 <main+0x17e>
		{
			angles_robot[i] = predefined_angles_degrees[i]*degrees_to_servo + robot_zero_angle;
 8000b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3388      	adds	r3, #136	; 0x88
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b72:	fb03 f202 	mul.w	r2, r3, r2
 8000b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b78:	441a      	add	r2, r3
 8000b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	3388      	adds	r3, #136	; 0x88
 8000b80:	443b      	add	r3, r7
 8000b82:	f843 2c84 	str.w	r2, [r3, #-132]
			predefined_angles_adc[i] = predefined_angles_degrees[i]*(upper_calibration - lower_calibration) / 180.0 + lower_calibration;
 8000b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3388      	adds	r3, #136	; 0x88
 8000b8c:	443b      	add	r3, r7
 8000b8e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000b92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b96:	1a8a      	subs	r2, r1, r2
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fc55 	bl	800044c <__aeabi_ui2d>
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	4b80      	ldr	r3, [pc, #512]	; (8000da8 <main+0x340>)
 8000ba8:	f7ff fdf4 	bl	8000794 <__aeabi_ddiv>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000bb6:	f7ff fc49 	bl	800044c <__aeabi_ui2d>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	f7ff fb07 	bl	80001d4 <__adddf3>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff fec9 	bl	8000964 <__aeabi_d2uiz>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	3388      	adds	r3, #136	; 0x88
 8000bda:	443b      	add	r3, r7
 8000bdc:	f843 2c70 	str.w	r2, [r3, #-112]
		for (uint32_t i = 0; i < 5; i++)
 8000be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be2:	3301      	adds	r3, #1
 8000be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d9bb      	bls.n	8000b64 <main+0xfc>
		}

			uint8_t num_entries = (sizeof(angles_robot)/sizeof(angles_robot[0]));
 8000bec:	2305      	movs	r3, #5
 8000bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// delay for initialisation of the lidar
	for (uint8_t i = 0; i < num_entries; i++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000bf8:	e226      	b.n	8001048 <main+0x5e0>
	{
		correct_entry = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		HAL_Delay(1000);
 8000c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c04:	f001 f866 	bl	8001cd4 <HAL_Delay>
	while (vertical_PWM != angles_robot[i])
 8000c08:	e021      	b.n	8000c4e <main+0x1e6>
	{
		if (vertical_PWM < angles_robot[i]) {
 8000c0a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	3388      	adds	r3, #136	; 0x88
 8000c1a:	443b      	add	r3, r7
 8000c1c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <main+0x1cc>
			vertical_PWM += 5;
 8000c24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3305      	adds	r3, #5
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000c32:	e006      	b.n	8000c42 <main+0x1da>
		}
		else {
			vertical_PWM -= 5;
 8000c34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3b05      	subs	r3, #5
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		}
		TIM2->CCR1 = vertical_PWM;
 8000c42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
	while (vertical_PWM != angles_robot[i])
 8000c4e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	3388      	adds	r3, #136	; 0x88
 8000c5e:	443b      	add	r3, r7
 8000c60:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d1d0      	bne.n	8000c0a <main+0x1a2>
	}
	HAL_Delay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6c:	f001 f832 	bl	8001cd4 <HAL_Delay>
	while (vertical_PWM != reset_angle)
 8000c70:	e01b      	b.n	8000caa <main+0x242>
	{
		if (vertical_PWM < reset_angle) {
 8000c72:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d907      	bls.n	8000c90 <main+0x228>
			vertical_PWM += 5;
 8000c80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3305      	adds	r3, #5
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000c8e:	e006      	b.n	8000c9e <main+0x236>
		}
		else {
			vertical_PWM -= 5;
 8000c90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3b05      	subs	r3, #5
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		}
		TIM2->CCR1 = vertical_PWM;
 8000c9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
	while (vertical_PWM != reset_angle)
 8000caa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d1dc      	bne.n	8000c72 <main+0x20a>
	}
    /* USER CODE BEGIN 3 */
		{
		    uint32_t adcValue = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	677b      	str	r3, [r7, #116]	; 0x74
		    HAL_ADC_Start(&hadc1); // Start ADC1 (or the appropriate ADCx for your specific microcontroller)
 8000cbc:	483b      	ldr	r0, [pc, #236]	; (8000dac <main+0x344>)
 8000cbe:	f001 fa0d 	bl	80020dc <HAL_ADC_Start>
		    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	4839      	ldr	r0, [pc, #228]	; (8000dac <main+0x344>)
 8000cc6:	f001 fb55 	bl	8002374 <HAL_ADC_PollForConversion>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <main+0x270>
		    {
		        adcValue = HAL_ADC_GetValue(&hadc1); // Read the ADC value
 8000cd0:	4836      	ldr	r0, [pc, #216]	; (8000dac <main+0x344>)
 8000cd2:	f001 fc51 	bl	8002578 <HAL_ADC_GetValue>
 8000cd6:	6778      	str	r0, [r7, #116]	; 0x74
		    }
		    HAL_ADC_Stop(&hadc1);
 8000cd8:	4834      	ldr	r0, [pc, #208]	; (8000dac <main+0x344>)
 8000cda:	f001 fb15 	bl	8002308 <HAL_ADC_Stop>

		    switch (current_state)
 8000cde:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	f200 817c 	bhi.w	8000fe0 <main+0x578>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <main+0x288>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d05 	.word	0x08000d05
 8000cf4:	08000db1 	.word	0x08000db1
 8000cf8:	08000e3f 	.word	0x08000e3f
 8000cfc:	08000ecd 	.word	0x08000ecd
 8000d00:	08000f5b 	.word	0x08000f5b
		    {
		    // 135 degrees
		    case 0:
		        if (adcValue >= (predefined_angles_adc[0] - tolerance) && adcValue <= (predefined_angles_adc[0] + tolerance))
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d335      	bcc.n	8000d7c <main+0x314>
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d14:	4413      	add	r3, r2
 8000d16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d82f      	bhi.n	8000d7c <main+0x314>
		        {
		            if (state_timestamp[current_state] == 0)
 8000d1c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	3388      	adds	r3, #136	; 0x88
 8000d24:	443b      	add	r3, r7
 8000d26:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <main+0x2dc>
		            {
		                state_timestamp[current_state] = HAL_GetTick();
 8000d2e:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8000d32:	f000 ffc3 	bl	8001cbc <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	00a3      	lsls	r3, r4, #2
 8000d3a:	3388      	adds	r3, #136	; 0x88
 8000d3c:	443b      	add	r3, r7
 8000d3e:	f843 2c48 	str.w	r2, [r3, #-72]
		            if (state_timestamp[current_state] == 0)
 8000d42:	e024      	b.n	8000d8e <main+0x326>
		            }
		            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000d44:	f000 ffba 	bl	8001cbc <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	3388      	adds	r3, #136	; 0x88
 8000d52:	443b      	add	r3, r7
 8000d54:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d5e:	d916      	bls.n	8000d8e <main+0x326>
		            {
		                current_state = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		                led_on = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		                correct_entry = 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		                led_timestamp = HAL_GetTick();
 8000d72:	f000 ffa3 	bl	8001cbc <HAL_GetTick>
 8000d76:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		            if (state_timestamp[current_state] == 0)
 8000d7a:	e008      	b.n	8000d8e <main+0x326>
		            }
		        }
		        else
		        {
		            state_timestamp[current_state] = 0;
 8000d7c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	3388      	adds	r3, #136	; 0x88
 8000d84:	443b      	add	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	f843 2c48 	str.w	r2, [r3, #-72]
		        }
		        break;
 8000d8c:	e129      	b.n	8000fe2 <main+0x57a>
		            if (state_timestamp[current_state] == 0)
 8000d8e:	bf00      	nop
		        break;
 8000d90:	e127      	b.n	8000fe2 <main+0x57a>
 8000d92:	bf00      	nop
 8000d94:	48001015 	.word	0x48001015
 8000d98:	2000017c 	.word	0x2000017c
 8000d9c:	20000130 	.word	0x20000130
 8000da0:	20000078 	.word	0x20000078
 8000da4:	080077e4 	.word	0x080077e4
 8000da8:	40668000 	.word	0x40668000
 8000dac:	20000028 	.word	0x20000028
		    // 45 degrees
		    case 1:
		    	if (adcValue >= (predefined_angles_adc[1] - tolerance) && adcValue <= (predefined_angles_adc[1] + tolerance))
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d335      	bcc.n	8000e28 <main+0x3c0>
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d82f      	bhi.n	8000e28 <main+0x3c0>
		        {
		            if (state_timestamp[current_state] == 0)
 8000dc8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	3388      	adds	r3, #136	; 0x88
 8000dd0:	443b      	add	r3, r7
 8000dd2:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10a      	bne.n	8000df0 <main+0x388>
		            {
		                state_timestamp[current_state] = HAL_GetTick();
 8000dda:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8000dde:	f000 ff6d 	bl	8001cbc <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	00a3      	lsls	r3, r4, #2
 8000de6:	3388      	adds	r3, #136	; 0x88
 8000de8:	443b      	add	r3, r7
 8000dea:	f843 2c48 	str.w	r2, [r3, #-72]
		            if (state_timestamp[current_state] == 0)
 8000dee:	e024      	b.n	8000e3a <main+0x3d2>
		            }
		            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000df0:	f000 ff64 	bl	8001cbc <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3388      	adds	r3, #136	; 0x88
 8000dfe:	443b      	add	r3, r7
 8000e00:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e0a:	d916      	bls.n	8000e3a <main+0x3d2>
		            {
		                current_state = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		                led_on = 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		                correct_entry = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		                led_timestamp = HAL_GetTick();
 8000e1e:	f000 ff4d 	bl	8001cbc <HAL_GetTick>
 8000e22:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		            if (state_timestamp[current_state] == 0)
 8000e26:	e008      	b.n	8000e3a <main+0x3d2>
		            }
		        }
		        else
		        {
		            state_timestamp[current_state] = 0;
 8000e28:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	3388      	adds	r3, #136	; 0x88
 8000e30:	443b      	add	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	f843 2c48 	str.w	r2, [r3, #-72]
		        }
		        break;
 8000e38:	e0d3      	b.n	8000fe2 <main+0x57a>
		            if (state_timestamp[current_state] == 0)
 8000e3a:	bf00      	nop
		        break;
 8000e3c:	e0d1      	b.n	8000fe2 <main+0x57a>
		    // 	180 degrees
		    case 2:
		    	if (adcValue >= (predefined_angles_adc[2] - tolerance) && adcValue <= (predefined_angles_adc[2] + tolerance))
 8000e3e:	6a3a      	ldr	r2, [r7, #32]
 8000e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d335      	bcc.n	8000eb6 <main+0x44e>
 8000e4a:	6a3a      	ldr	r2, [r7, #32]
 8000e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e4e:	4413      	add	r3, r2
 8000e50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d82f      	bhi.n	8000eb6 <main+0x44e>
		        {
		            if (state_timestamp[current_state] == 0)
 8000e56:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	3388      	adds	r3, #136	; 0x88
 8000e5e:	443b      	add	r3, r7
 8000e60:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <main+0x416>
		            {
		                state_timestamp[current_state] = HAL_GetTick();
 8000e68:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8000e6c:	f000 ff26 	bl	8001cbc <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	00a3      	lsls	r3, r4, #2
 8000e74:	3388      	adds	r3, #136	; 0x88
 8000e76:	443b      	add	r3, r7
 8000e78:	f843 2c48 	str.w	r2, [r3, #-72]
		            if (state_timestamp[current_state] == 0)
 8000e7c:	e024      	b.n	8000ec8 <main+0x460>
		            }
		            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000e7e:	f000 ff1d 	bl	8001cbc <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	3388      	adds	r3, #136	; 0x88
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e98:	d916      	bls.n	8000ec8 <main+0x460>
		            {
		                current_state = 3;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		                led_on = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		                correct_entry = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		                led_timestamp = HAL_GetTick();
 8000eac:	f000 ff06 	bl	8001cbc <HAL_GetTick>
 8000eb0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		            if (state_timestamp[current_state] == 0)
 8000eb4:	e008      	b.n	8000ec8 <main+0x460>
		            }
		        }
		        else
		        {
		            state_timestamp[current_state] = 0;
 8000eb6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	3388      	adds	r3, #136	; 0x88
 8000ebe:	443b      	add	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f843 2c48 	str.w	r2, [r3, #-72]
		        }
		        break;
 8000ec6:	e08c      	b.n	8000fe2 <main+0x57a>
		            if (state_timestamp[current_state] == 0)
 8000ec8:	bf00      	nop
		        break;
 8000eca:	e08a      	b.n	8000fe2 <main+0x57a>
		    // 0 degrees
		    case 3:
		    	if (adcValue >= (predefined_angles_adc[3] - tolerance) && adcValue <= (predefined_angles_adc[3] + tolerance))
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d335      	bcc.n	8000f44 <main+0x4dc>
 8000ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000edc:	4413      	add	r3, r2
 8000ede:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d82f      	bhi.n	8000f44 <main+0x4dc>
		        {
		            if (state_timestamp[current_state] == 0)
 8000ee4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	3388      	adds	r3, #136	; 0x88
 8000eec:	443b      	add	r3, r7
 8000eee:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10a      	bne.n	8000f0c <main+0x4a4>
		            {
		                state_timestamp[current_state] = HAL_GetTick();
 8000ef6:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8000efa:	f000 fedf 	bl	8001cbc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	00a3      	lsls	r3, r4, #2
 8000f02:	3388      	adds	r3, #136	; 0x88
 8000f04:	443b      	add	r3, r7
 8000f06:	f843 2c48 	str.w	r2, [r3, #-72]
		            if (state_timestamp[current_state] == 0)
 8000f0a:	e024      	b.n	8000f56 <main+0x4ee>
		            }
		            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000f0c:	f000 fed6 	bl	8001cbc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3388      	adds	r3, #136	; 0x88
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f26:	d916      	bls.n	8000f56 <main+0x4ee>
		            {
		                current_state = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		                led_on = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		                correct_entry = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		                led_timestamp = HAL_GetTick();
 8000f3a:	f000 febf 	bl	8001cbc <HAL_GetTick>
 8000f3e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		            if (state_timestamp[current_state] == 0)
 8000f42:	e008      	b.n	8000f56 <main+0x4ee>
		            }
		        }
		        else
		        {
		            state_timestamp[current_state] = 0;
 8000f44:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	3388      	adds	r3, #136	; 0x88
 8000f4c:	443b      	add	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f843 2c48 	str.w	r2, [r3, #-72]
		        }
		        break;
 8000f54:	e045      	b.n	8000fe2 <main+0x57a>
		            if (state_timestamp[current_state] == 0)
 8000f56:	bf00      	nop
		        break;
 8000f58:	e043      	b.n	8000fe2 <main+0x57a>
		    // 90 degrees
		    case 4:
		    	if (adcValue >= (predefined_angles_adc[4] - tolerance) && adcValue <= (predefined_angles_adc[4] + tolerance))
 8000f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d331      	bcc.n	8000fca <main+0x562>
 8000f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f6a:	4413      	add	r3, r2
 8000f6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d82b      	bhi.n	8000fca <main+0x562>
		        {
		            if (state_timestamp[current_state] == 0)
 8000f72:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	3388      	adds	r3, #136	; 0x88
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <main+0x532>
		            {
		                state_timestamp[current_state] = HAL_GetTick();
 8000f84:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8000f88:	f000 fe98 	bl	8001cbc <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	00a3      	lsls	r3, r4, #2
 8000f90:	3388      	adds	r3, #136	; 0x88
 8000f92:	443b      	add	r3, r7
 8000f94:	f843 2c48 	str.w	r2, [r3, #-72]
		            if (state_timestamp[current_state] == 0)
 8000f98:	e020      	b.n	8000fdc <main+0x574>
		            }
		            else if (HAL_GetTick() - state_timestamp[current_state] > 1000)
 8000f9a:	f000 fe8f 	bl	8001cbc <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	3388      	adds	r3, #136	; 0x88
 8000fa8:	443b      	add	r3, r7
 8000faa:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb4:	d912      	bls.n	8000fdc <main+0x574>
		            {
		                current_state = 5;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		                led_on = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		                correct_entry = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		            if (state_timestamp[current_state] == 0)
 8000fc8:	e008      	b.n	8000fdc <main+0x574>
		            }
		        }
		        else
		              {
		                  state_timestamp[current_state] = 0;
 8000fca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	3388      	adds	r3, #136	; 0x88
 8000fd2:	443b      	add	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f843 2c48 	str.w	r2, [r3, #-72]
		              }
		              break;
 8000fda:	e002      	b.n	8000fe2 <main+0x57a>
		            if (state_timestamp[current_state] == 0)
 8000fdc:	bf00      	nop
		              break;
 8000fde:	e000      	b.n	8000fe2 <main+0x57a>
		          default:
		              break;
 8000fe0:	bf00      	nop
		          }

			  if (led_on)
 8000fe2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01b      	beq.n	8001022 <main+0x5ba>
			  {
				  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET); // Turn on the LED
 8000fea:	2201      	movs	r2, #1
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	481c      	ldr	r0, [pc, #112]	; (8001060 <main+0x5f8>)
 8000ff0:	f002 fad2 	bl	8003598 <HAL_GPIO_WritePin>
				  if (led_on == 1 && HAL_GetTick() - led_timestamp >= 3000) // Check if 3 seconds have passed and led_on is not 2
 8000ff4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d117      	bne.n	800102c <main+0x5c4>
 8000ffc:	f000 fe5e 	bl	8001cbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800100c:	4293      	cmp	r3, r2
 800100e:	d90d      	bls.n	800102c <main+0x5c4>
				  {
					  led_on = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
					  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 8001016:	2200      	movs	r2, #0
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <main+0x5f8>)
 800101c:	f002 fabc 	bl	8003598 <HAL_GPIO_WritePin>
 8001020:	e004      	b.n	800102c <main+0x5c4>
				  }
			  }
			  else
			  {
				  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 8001022:	2200      	movs	r2, #0
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <main+0x5f8>)
 8001028:	f002 fab6 	bl	8003598 <HAL_GPIO_WritePin>
			  }
	if (correct_entry != 1)
 800102c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001030:	2b01      	cmp	r3, #1
 8001032:	d004      	beq.n	800103e <main+0x5d6>
	{
		i = i-1;
 8001034:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001038:	3b01      	subs	r3, #1
 800103a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (uint8_t i = 0; i < num_entries; i++)
 800103e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001042:	3301      	adds	r3, #1
 8001044:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001048:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800104c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001050:	429a      	cmp	r2, r3
 8001052:	f4ff add2 	bcc.w	8000bfa <main+0x192>
 8001056:	2300      	movs	r3, #0
	}
	}
  /* USER CODE END 3 */
	}
}
 8001058:	4618      	mov	r0, r3
 800105a:	3788      	adds	r7, #136	; 0x88
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	48001000 	.word	0x48001000

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09e      	sub	sp, #120	; 0x78
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fba2 	bl	80077bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	223c      	movs	r2, #60	; 0x3c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fb94 	bl	80077bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001094:	2303      	movs	r3, #3
 8001096:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001098:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800109c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a2:	2301      	movs	r3, #1
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 f962 	bl	8004388 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80010ca:	f000 fa9b 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2302      	movs	r3, #2
 80010d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 f98a 	bl	8005404 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010f6:	f000 fa85 	bl	8001604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <SystemClock_Config+0xc8>)
 80010fc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fb5b 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001120:	f000 fa70 	bl	8001604 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3778      	adds	r7, #120	; 0x78
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	000210a0 	.word	0x000210a0

08001130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <MX_ADC1_Init+0xdc>)
 8001154:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001158:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_ADC1_Init+0xdc>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_ADC1_Init+0xdc>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_ADC1_Init+0xdc>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_ADC1_Init+0xdc>)
 800116e:	2200      	movs	r2, #0
 8001170:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_ADC1_Init+0xdc>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_ADC1_Init+0xdc>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_ADC1_Init+0xdc>)
 8001182:	2201      	movs	r2, #1
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC1_Init+0xdc>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ADC1_Init+0xdc>)
 800118e:	2201      	movs	r2, #1
 8001190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_ADC1_Init+0xdc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_ADC1_Init+0xdc>)
 800119c:	2204      	movs	r2, #4
 800119e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_ADC1_Init+0xdc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_ADC1_Init+0xdc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <MX_ADC1_Init+0xdc>)
 80011ae:	f000 fdb5 	bl	8001d1c <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80011b8:	f000 fa24 	bl	8001604 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_ADC1_Init+0xdc>)
 80011c8:	f001 fcd0 	bl	8002b6c <HAL_ADCEx_MultiModeConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011d2:	f000 fa17 	bl	8001604 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d6:	2303      	movs	r3, #3
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_ADC1_Init+0xdc>)
 80011f4:	f001 f9ce 	bl	8002594 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80011fe:	f000 fa01 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000028 	.word	0x20000028

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_I2C1_Init+0x74>)
 800124c:	f002 f9bc 	bl	80035c8 <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 f9d5 	bl	8001604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <MX_I2C1_Init+0x74>)
 800125e:	f002 ff29 	bl	80040b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 f9cc 	bl	8001604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_I2C1_Init+0x74>)
 8001270:	f002 ff6b 	bl	800414a <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f9c3 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000078 	.word	0x20000078
 8001288:	40005400 	.word	0x40005400
 800128c:	2000090e 	.word	0x2000090e

08001290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_SPI1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_SPI1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_SPI1_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_SPI1_Init+0x74>)
 80012aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_SPI1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_SPI1_Init+0x74>)
 80012be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SPI1_Init+0x74>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SPI1_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_SPI1_Init+0x74>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_SPI1_Init+0x74>)
 80012f0:	f004 fc1e 	bl	8005b30 <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 f983 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000cc 	.word	0x200000cc
 8001308:	40013000 	.word	0x40013000

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_TIM1_Init+0xe4>)
 800133a:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <MX_TIM1_Init+0xe8>)
 800133c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001340:	222f      	movs	r2, #47	; 0x2f
 8001342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_TIM1_Init+0xe4>)
 800134c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <MX_TIM1_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001364:	4822      	ldr	r0, [pc, #136]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001366:	f004 fc8e 	bl	8005c86 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001370:	f000 f948 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	4619      	mov	r1, r3
 8001380:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001382:	f005 faa3 	bl	80068cc <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800138c:	f000 f93a 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001390:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_TIM1_Init+0xe4>)
 8001392:	f004 fe27 	bl	8005fe4 <HAL_TIM_IC_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800139c:	f000 f932 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_TIM1_Init+0xe4>)
 80013b4:	f006 f904 	bl	80075c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80013be:	f000 f921 	bl	8001604 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013c2:	230a      	movs	r3, #10
 80013c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM1_Init+0xe4>)
 80013da:	f005 f8c6 	bl	800656a <HAL_TIM_IC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80013e4:	f000 f90e 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000130 	.word	0x20000130
 80013f4:	40012c00 	.word	0x40012c00

080013f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_TIM2_Init+0xc8>)
 800141e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_TIM2_Init+0xc8>)
 8001426:	222f      	movs	r2, #47	; 0x2f
 8001428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_TIM2_Init+0xc8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_TIM2_Init+0xc8>)
 8001432:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_TIM2_Init+0xc8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_TIM2_Init+0xc8>)
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <MX_TIM2_Init+0xc8>)
 8001446:	f004 fc75 	bl	8005d34 <HAL_TIM_PWM_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001450:	f000 f8d8 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <MX_TIM2_Init+0xc8>)
 8001464:	f006 f8ac 	bl	80075c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800146e:	f000 f8c9 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	; 0x60
 8001474:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001476:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800147a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_TIM2_Init+0xc8>)
 800148c:	f005 f90a 	bl	80066a4 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001496:	f000 f8b5 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2204      	movs	r2, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM2_Init+0xc8>)
 80014a2:	f005 f8ff 	bl	80066a4 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80014ac:	f000 f8aa 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM2_Init+0xc8>)
 80014b2:	f000 fab5 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000017c 	.word	0x2000017c

080014c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <MX_USB_PCD_Init+0x40>)
 80014cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014d6:	2202      	movs	r2, #2
 80014d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014dc:	2202      	movs	r2, #2
 80014de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_USB_PCD_Init+0x3c>)
 80014ee:	f002 fe78 	bl	80041e2 <HAL_PCD_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80014f8:	f000 f884 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001c8 	.word	0x200001c8
 8001504:	40005c00 	.word	0x40005c00

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a36      	ldr	r2, [pc, #216]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_GPIO_Init+0xf4>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <MX_GPIO_Init+0xf4>)
 800153c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <MX_GPIO_Init+0xf4>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <MX_GPIO_Init+0xf4>)
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	6153      	str	r3, [r2, #20]
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <MX_GPIO_Init+0xf4>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_GPIO_Init+0xf4>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|LD3_Pin|LD5_Pin
 8001596:	2200      	movs	r2, #0
 8001598:	f64f 6188 	movw	r1, #65160	; 0xfe88
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_GPIO_Init+0xf8>)
 800159e:	f001 fffb 	bl	8003598 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80015a2:	2337      	movs	r3, #55	; 0x37
 80015a4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_GPIO_Init+0xf8>)
 80015b8:	f001 fe5c 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|LD3_Pin|LD5_Pin
 80015bc:	f64f 6388 	movw	r3, #65160	; 0xfe88
 80015c0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480a      	ldr	r0, [pc, #40]	; (8001600 <MX_GPIO_Init+0xf8>)
 80015d6:	f001 fe4d 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015da:	2301      	movs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f0:	f001 fe40 	bl	8003274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	48001000 	.word	0x48001000

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>
	...

08001610 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b0d2      	sub	sp, #328	; 0x148
 8001614:	af04      	add	r7, sp, #16
 8001616:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800161a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800161e:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8001644:	230f      	movs	r3, #15
 8001646:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 800164a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800164e:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001652:	230a      	movs	r3, #10
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2301      	movs	r3, #1
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f207 1319 	addw	r3, r7, #281	; 0x119
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	2220      	movs	r2, #32
 8001664:	21d2      	movs	r1, #210	; 0xd2
 8001666:	6800      	ldr	r0, [r0, #0]
 8001668:	f002 f83e 	bl	80036e8 <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001672:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001676:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 800167a:	230a      	movs	r3, #10
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2301      	movs	r3, #1
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2221      	movs	r2, #33	; 0x21
 800168c:	21d2      	movs	r1, #210	; 0xd2
 800168e:	6800      	ldr	r0, [r0, #0]
 8001690:	f002 f82a 	bl	80036e8 <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001694:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001698:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 800169c:	230a      	movs	r3, #10
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	2222      	movs	r2, #34	; 0x22
 80016ae:	21d2      	movs	r1, #210	; 0xd2
 80016b0:	6800      	ldr	r0, [r0, #0]
 80016b2:	f002 f819 	bl	80036e8 <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 80016b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016ba:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80016be:	230a      	movs	r3, #10
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2301      	movs	r3, #1
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	f207 131b 	addw	r3, r7, #283	; 0x11b
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	2220      	movs	r2, #32
 80016d0:	21d3      	movs	r1, #211	; 0xd3
 80016d2:	6800      	ldr	r0, [r0, #0]
 80016d4:	f002 f91c 	bl	8003910 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 80016d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016dc:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80016e0:	230a      	movs	r3, #10
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	2301      	movs	r3, #1
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	2221      	movs	r2, #33	; 0x21
 80016f2:	21d3      	movs	r1, #211	; 0xd3
 80016f4:	6800      	ldr	r0, [r0, #0]
 80016f6:	f002 f90b 	bl	8003910 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8001706:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800170a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8001714:	2300      	movs	r3, #0
 8001716:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8001720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <initialise_ptu_i2c+0x160>)
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8001732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001736:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800173e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001742:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001746:	230a      	movs	r3, #10
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 030b 	add.w	r3, r7, #11
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	2200      	movs	r2, #0
 8001758:	21c4      	movs	r1, #196	; 0xc4
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f001 ffc4 	bl	80036e8 <HAL_I2C_Mem_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8001766:	bf00      	nop
 8001768:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	080077f8 	.word	0x080077f8

08001774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x44>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x44>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x44>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x44>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x44>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017aa:	2007      	movs	r0, #7
 80017ac:	f001 fd20 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017dc:	d124      	bne.n	8001828 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_ADC_MspInit+0x74>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_ADC_MspInit+0x74>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180e:	2304      	movs	r3, #4
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001812:	2303      	movs	r3, #3
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f001 fd26 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_I2C_MspInit+0x7c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d127      	bne.n	80018a6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_I2C_MspInit+0x84>)
 800188a:	f001 fcf3 	bl	8003274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	61d3      	str	r3, [r2, #28]
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_SPI_MspInit+0x7c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d128      	bne.n	8001930 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6193      	str	r3, [r2, #24]
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	6153      	str	r3, [r2, #20]
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_SPI_MspInit+0x80>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800190e:	23e0      	movs	r3, #224	; 0xe0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191e:	2305      	movs	r3, #5
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fca2 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40013000 	.word	0x40013000
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_TIM_Base_MspInit+0x90>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d131      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6153      	str	r3, [r2, #20]
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_TIM_Base_MspInit+0x94>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019a4:	2306      	movs	r3, #6
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f001 fc5f 	bl	8003274 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	201b      	movs	r0, #27
 80019bc:	f001 fc23 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019c0:	201b      	movs	r0, #27
 80019c2:	f001 fc3c 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_TIM_PWM_MspInit+0x44>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_TIM_PWM_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_TIM_PWM_MspInit+0x44>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201c      	movs	r0, #28
 8001a08:	f001 fbfd 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f001 fc16 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d11d      	bne.n	8001a7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIM_MspPostInit+0x68>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_TIM_MspPostInit+0x68>)
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	6153      	str	r3, [r2, #20]
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_MspPostInit+0x68>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001a5a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001a5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f001 fbfb 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_PCD_MspInit+0x80>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d129      	bne.n	8001b02 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ad8:	230e      	movs	r3, #14
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f001 fbc5 	bl	8003274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_PCD_MspInit+0x84>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40005c00 	.word	0x40005c00
 8001b10:	40021000 	.word	0x40021000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f898 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM1_CC_IRQHandler+0x10>)
 8001b6e:	f004 fbdd 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000130 	.word	0x20000130

08001b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM2_IRQHandler+0x10>)
 8001b82:	f004 fbd3 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000017c 	.word	0x2000017c

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb8:	f7ff ffea 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f005 fdc7 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe ff3f 	bl	8000a68 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bf8:	08007838 	.word	0x08007838
  ldr r2, =_sbss
 8001bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c00:	200004c0 	.word	0x200004c0

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x28>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 fae9 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fda6 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fb01 	bl	800325a <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c70:	f001 fac9 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200004bc 	.word	0x200004bc

08001cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200004bc 	.word	0x200004bc

08001cd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b09a      	sub	sp, #104	; 0x68
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e1c9      	b.n	80020d0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d176      	bne.n	8001e3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d152      	bne.n	8001dfc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fd23 	bl	80017bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d13b      	bne.n	8001dfc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 f847 	bl	8002e18 <ADC_Disable>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d12f      	bne.n	8001dfc <HAL_ADC_Init+0xe0>
 8001d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d12b      	bne.n	8001dfc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dac:	f023 0302 	bic.w	r3, r3, #2
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd8:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_ADC_Init+0x2d8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a86      	ldr	r2, [pc, #536]	; (8001ff8 <HAL_ADC_Init+0x2dc>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9a      	lsrs	r2, r3, #18
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dee:	e002      	b.n	8001df6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f9      	bne.n	8001df0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e18:	d110      	bne.n	8001e3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f023 0312 	bic.w	r3, r3, #18
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 8136 	bne.w	80020b6 <HAL_ADC_Init+0x39a>
 8001e4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 8131 	bne.w	80020b6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8129 	bne.w	80020b6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7c:	d004      	beq.n	8001e88 <HAL_ADC_Init+0x16c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5e      	ldr	r2, [pc, #376]	; (8001ffc <HAL_ADC_Init+0x2e0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_Init+0x170>
 8001e88:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_ADC_Init+0x2e4>)
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_Init+0x172>
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_ADC_Init+0x2e8>)
 8001e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e98:	d102      	bne.n	8001ea0 <HAL_ADC_Init+0x184>
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_ADC_Init+0x2e0>)
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e01a      	b.n	8001ed6 <HAL_ADC_Init+0x1ba>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_ADC_Init+0x2e0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d103      	bne.n	8001eb2 <HAL_ADC_Init+0x196>
 8001eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e011      	b.n	8001ed6 <HAL_ADC_Init+0x1ba>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_ADC_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d102      	bne.n	8001ec2 <HAL_ADC_Init+0x1a6>
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_ADC_Init+0x2f0>)
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e009      	b.n	8001ed6 <HAL_ADC_Init+0x1ba>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_ADC_Init+0x2f0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADC_Init+0x1b6>
 8001ecc:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_ADC_Init+0x2ec>)
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e001      	b.n	8001ed6 <HAL_ADC_Init+0x1ba>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <HAL_ADC_Init+0x1da>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Init+0x1da>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_Init+0x1dc>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11c      	bne.n	8001f36 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_ADC_Init+0x202>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x202>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_ADC_Init+0x204>
 8001f1e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7e5b      	ldrb	r3, [r3, #25]
 8001f3a:	035b      	lsls	r3, r3, #13
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f40:	2a01      	cmp	r2, #1
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_Init+0x22e>
 8001f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f48:	e000      	b.n	8001f4c <HAL_ADC_Init+0x230>
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11b      	bne.n	8001fa2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e5b      	ldrb	r3, [r3, #25]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	045a      	lsls	r2, r3, #17
 8001f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f82:	663b      	str	r3, [r7, #96]	; 0x60
 8001f84:	e00d      	b.n	8001fa2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f8e:	f043 0220 	orr.w	r2, r3, #32
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d03a      	beq.n	8002020 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a16      	ldr	r2, [pc, #88]	; (8002008 <HAL_ADC_Init+0x2ec>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_Init+0x2a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_ADC_Init+0x2f0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d128      	bne.n	8002010 <HAL_ADC_Init+0x2f4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001fc6:	d012      	beq.n	8001fee <HAL_ADC_Init+0x2d2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_ADC_Init+0x2cc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001fda:	d002      	beq.n	8001fe2 <HAL_ADC_Init+0x2c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	e018      	b.n	8002014 <HAL_ADC_Init+0x2f8>
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e015      	b.n	8002014 <HAL_ADC_Init+0x2f8>
 8001fe8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001fec:	e012      	b.n	8002014 <HAL_ADC_Init+0x2f8>
 8001fee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ff2:	e00f      	b.n	8002014 <HAL_ADC_Init+0x2f8>
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83
 8001ffc:	50000100 	.word	0x50000100
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700
 8002008:	50000400 	.word	0x50000400
 800200c:	50000500 	.word	0x50000500
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002018:	4313      	orrs	r3, r2
 800201a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800201c:	4313      	orrs	r3, r2
 800201e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d114      	bne.n	8002058 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7e1b      	ldrb	r3, [r3, #24]
 8002046:	039a      	lsls	r2, r3, #14
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4313      	orrs	r3, r2
 8002052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002054:	4313      	orrs	r3, r2
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_ADC_Init+0x3bc>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002068:	430b      	orrs	r3, r1
 800206a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f023 010f 	bic.w	r1, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
 800208c:	e007      	b.n	800209e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020f 	bic.w	r2, r2, #15
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f023 0303 	bic.w	r3, r3, #3
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
 80020b4:	e00a      	b.n	80020cc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f023 0312 	bic.w	r3, r3, #18
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3768      	adds	r7, #104	; 0x68
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	fff0c007 	.word	0xfff0c007

080020dc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 80f9 	bne.w	80022ea <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Start+0x2a>
 8002102:	2302      	movs	r3, #2
 8002104:	e0f4      	b.n	80022f0 <HAL_ADC_Start+0x214>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fe1e 	bl	8002d50 <ADC_Enable>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80e0 	bne.w	80022e0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213c:	d004      	beq.n	8002148 <HAL_ADC_Start+0x6c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <HAL_ADC_Start+0x21c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d106      	bne.n	8002156 <HAL_ADC_Start+0x7a>
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <HAL_ADC_Start+0x220>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_ADC_Start+0x9a>
 8002154:	e005      	b.n	8002162 <HAL_ADC_Start+0x86>
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_ADC_Start+0x224>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_ADC_Start+0x9a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216a:	d004      	beq.n	8002176 <HAL_ADC_Start+0x9a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a64      	ldr	r2, [pc, #400]	; (8002304 <HAL_ADC_Start+0x228>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d115      	bne.n	80021a2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d036      	beq.n	80021fe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002198:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021a0:	e02d      	b.n	80021fe <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_Start+0xe6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_ADC_Start+0x21c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_Start+0xfc>
 80021c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e008      	b.n	80021ea <HAL_ADC_Start+0x10e>
 80021d8:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_ADC_Start+0x228>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220a:	d106      	bne.n	800221a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f023 0206 	bic.w	r2, r3, #6
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
 8002218:	e002      	b.n	8002220 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	221c      	movs	r2, #28
 800222e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002238:	d004      	beq.n	8002244 <HAL_ADC_Start+0x168>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_ADC_Start+0x21c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d106      	bne.n	8002252 <HAL_ADC_Start+0x176>
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_ADC_Start+0x220>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2b00      	cmp	r3, #0
 800224e:	d03e      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 8002250:	e005      	b.n	800225e <HAL_ADC_Start+0x182>
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_ADC_Start+0x224>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2b00      	cmp	r3, #0
 800225c:	d037      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Start+0x196>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_ADC_Start+0x21c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <HAL_ADC_Start+0x1a4>
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_ADC_Start+0x220>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b05      	cmp	r3, #5
 800227c:	d027      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 800227e:	e005      	b.n	800228c <HAL_ADC_Start+0x1b0>
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_ADC_Start+0x224>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2b05      	cmp	r3, #5
 800228a:	d020      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002294:	d004      	beq.n	80022a0 <HAL_ADC_Start+0x1c4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_ADC_Start+0x21c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d106      	bne.n	80022ae <HAL_ADC_Start+0x1d2>
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_ADC_Start+0x220>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d010      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 80022ac:	e005      	b.n	80022ba <HAL_ADC_Start+0x1de>
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_ADC_Start+0x224>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	d009      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_Start+0x1f2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_ADC_Start+0x228>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10f      	bne.n	80022ee <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0204 	orr.w	r2, r2, #4
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	e006      	b.n	80022ee <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022e8:	e001      	b.n	80022ee <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	50000100 	.word	0x50000100
 80022fc:	50000300 	.word	0x50000300
 8002300:	50000700 	.word	0x50000700
 8002304:	50000400 	.word	0x50000400

08002308 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Stop+0x1a>
 800231e:	2302      	movs	r3, #2
 8002320:	e023      	b.n	800236a <HAL_ADC_Stop+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800232a:	216c      	movs	r1, #108	; 0x6c
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fdd9 	bl	8002ee4 <ADC_ConversionStop>
 8002332:	4603      	mov	r3, r0
 8002334:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fd6b 	bl	8002e18 <ADC_Disable>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d102      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800238a:	2308      	movs	r3, #8
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e03a      	b.n	8002406 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_PollForConversion+0x30>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a72      	ldr	r2, [pc, #456]	; (8002568 <HAL_ADC_PollForConversion+0x1f4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_PollForConversion+0x34>
 80023a4:	4b71      	ldr	r3, [pc, #452]	; (800256c <HAL_ADC_PollForConversion+0x1f8>)
 80023a6:	e000      	b.n	80023aa <HAL_ADC_PollForConversion+0x36>
 80023a8:	4b71      	ldr	r3, [pc, #452]	; (8002570 <HAL_ADC_PollForConversion+0x1fc>)
 80023aa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11d      	bne.n	8002402 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0bf      	b.n	800255e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0ad      	b.n	800255e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002402:	230c      	movs	r3, #12
 8002404:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d004      	beq.n	800241a <HAL_ADC_PollForConversion+0xa6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_ADC_PollForConversion+0x1f4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d106      	bne.n	8002428 <HAL_ADC_PollForConversion+0xb4>
 800241a:	4b54      	ldr	r3, [pc, #336]	; (800256c <HAL_ADC_PollForConversion+0x1f8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_ADC_PollForConversion+0xd4>
 8002426:	e005      	b.n	8002434 <HAL_ADC_PollForConversion+0xc0>
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_ADC_PollForConversion+0x1fc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_ADC_PollForConversion+0xd4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800243c:	d004      	beq.n	8002448 <HAL_ADC_PollForConversion+0xd4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a4c      	ldr	r2, [pc, #304]	; (8002574 <HAL_ADC_PollForConversion+0x200>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d104      	bne.n	8002452 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	e00f      	b.n	8002472 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245a:	d004      	beq.n	8002466 <HAL_ADC_PollForConversion+0xf2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a41      	ldr	r2, [pc, #260]	; (8002568 <HAL_ADC_PollForConversion+0x1f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d102      	bne.n	800246c <HAL_ADC_PollForConversion+0xf8>
 8002466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800246a:	e000      	b.n	800246e <HAL_ADC_PollForConversion+0xfa>
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_ADC_PollForConversion+0x200>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002472:	f7ff fc23 	bl	8001cbc <HAL_GetTick>
 8002476:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002478:	e021      	b.n	80024be <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	d01d      	beq.n	80024be <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_ADC_PollForConversion+0x124>
 8002488:	f7ff fc18 	bl	8001cbc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d212      	bcs.n	80024be <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0204 	orr.w	r2, r3, #4
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0d6      	beq.n	800247a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d131      	bne.n	800254a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d12c      	bne.n	800254a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d125      	bne.n	800254a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d112      	bne.n	8002532 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d112      	bne.n	800254a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
 8002530:	e00b      	b.n	800254a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	50000100 	.word	0x50000100
 800256c:	50000300 	.word	0x50000300
 8002570:	50000700 	.word	0x50000700
 8002574:	50000400 	.word	0x50000400

08002578 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b09b      	sub	sp, #108	; 0x6c
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e2ca      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x5b8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 82ae 	bne.w	8002b2a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d81c      	bhi.n	8002610 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	461a      	mov	r2, r3
 80025ea:	231f      	movs	r3, #31
 80025ec:	4093      	lsls	r3, r2
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4019      	ands	r1, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
 800260e:	e063      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b09      	cmp	r3, #9
 8002616:	d81e      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	3b1e      	subs	r3, #30
 800262c:	221f      	movs	r2, #31
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	4019      	ands	r1, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	3b1e      	subs	r3, #30
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
 8002654:	e040      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b0e      	cmp	r3, #14
 800265c:	d81e      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	3b3c      	subs	r3, #60	; 0x3c
 8002672:	221f      	movs	r2, #31
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	4019      	ands	r1, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	3b3c      	subs	r3, #60	; 0x3c
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
 800269a:	e01d      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	3b5a      	subs	r3, #90	; 0x5a
 80026b0:	221f      	movs	r2, #31
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4019      	ands	r1, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	3b5a      	subs	r3, #90	; 0x5a
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80e5 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d91c      	bls.n	800272a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	3b1e      	subs	r3, #30
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
 8002728:	e019      	b.n	800275e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6959      	ldr	r1, [r3, #20]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	2207      	movs	r2, #7
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	4019      	ands	r1, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6898      	ldr	r0, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	3b01      	subs	r3, #1
 800277c:	2b03      	cmp	r3, #3
 800277e:	d84f      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x28c>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_ADC_ConfigChannel+0x1f4>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	08002799 	.word	0x08002799
 800278c:	080027bb 	.word	0x080027bb
 8002790:	080027dd 	.word	0x080027dd
 8002794:	080027ff 	.word	0x080027ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279e:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <HAL_ADC_ConfigChannel+0x474>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	0691      	lsls	r1, r2, #26
 80027a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027b8:	e07e      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_ADC_ConfigChannel+0x474>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	0691      	lsls	r1, r2, #26
 80027ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027da:	e06d      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027e2:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <HAL_ADC_ConfigChannel+0x474>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	0691      	lsls	r1, r2, #26
 80027ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ee:	430a      	orrs	r2, r1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027fc:	e05c      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002804:	4b80      	ldr	r3, [pc, #512]	; (8002a08 <HAL_ADC_ConfigChannel+0x474>)
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	0691      	lsls	r1, r2, #26
 800280e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002810:	430a      	orrs	r2, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800281c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800281e:	e04b      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	069b      	lsls	r3, r3, #26
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002842:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002866:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	069b      	lsls	r3, r3, #26
 8002878:	429a      	cmp	r2, r3
 800287a:	d107      	bne.n	800288c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800288a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	429a      	cmp	r2, r3
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80028b0:	e001      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80028b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x344>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x344>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_ADC_ConfigChannel+0x346>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8130 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00f      	beq.n	8002908 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002906:	e049      	b.n	800299c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b09      	cmp	r3, #9
 8002928:	d91c      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6999      	ldr	r1, [r3, #24]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	3b1b      	subs	r3, #27
 800293c:	2207      	movs	r2, #7
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6898      	ldr	r0, [r3, #8]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1b      	subs	r3, #27
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e01b      	b.n	800299c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6959      	ldr	r1, [r3, #20]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6898      	ldr	r0, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x41c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_ADC_ConfigChannel+0x478>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x420>
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_ADC_ConfigChannel+0x47c>)
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x422>
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_ADC_ConfigChannel+0x480>)
 80029b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d105      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029d0:	2b11      	cmp	r3, #17
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	f040 80ab 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80a4 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x484>
 8002a02:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_ADC_ConfigChannel+0x478>)
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e022      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x4ba>
 8002a08:	83fff000 	.word	0x83fff000
 8002a0c:	50000100 	.word	0x50000100
 8002a10:	50000300 	.word	0x50000300
 8002a14:	50000700 	.word	0x50000700
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d103      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x496>
 8002a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e011      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x4ba>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d102      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x4a6>
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e009      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x4ba>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d102      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x4b6>
 8002a44:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e001      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x4ba>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d108      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x4da>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x4da>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x4dc>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d150      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x502>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x502>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x504>
 8002a96:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13c      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d11d      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x54c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aac:	d118      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_ADC_ConfigChannel+0x5d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9a      	lsrs	r2, r3, #18
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f9      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ade:	e02e      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b11      	cmp	r3, #17
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x56c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af0:	d106      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002afe:	e01e      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b12      	cmp	r3, #18
 8002b06:	d11a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b14:	e013      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b28:	e00a      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b3c:	e000      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b3e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	376c      	adds	r7, #108	; 0x6c
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	50000100 	.word	0x50000100
 8002b5c:	50000400 	.word	0x50000400
 8002b60:	50000500 	.word	0x50000500
 8002b64:	20000000 	.word	0x20000000
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b099      	sub	sp, #100	; 0x64
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b84:	d102      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	e01a      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d103      	bne.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	e011      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d102      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ba8:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	e009      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a64      	ldr	r2, [pc, #400]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b0      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0a9      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 808d 	bne.w	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8086 	bne.w	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d004      	beq.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c18:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002c1a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d040      	beq.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c36:	035b      	lsls	r3, r3, #13
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d108      	bne.n	8002c60 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15c      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c82:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d14b      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c90:	f023 030f 	bic.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6811      	ldr	r1, [r2, #0]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca4:	e03c      	b.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d108      	bne.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d123      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002cf4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d112      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d02:	f023 030f 	bic.w	r3, r3, #15
 8002d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d08:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0a:	e009      	b.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d1e:	e000      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d20:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3764      	adds	r7, #100	; 0x64
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	50000100 	.word	0x50000100
 8002d40:	50000400 	.word	0x50000400
 8002d44:	50000500 	.word	0x50000500
 8002d48:	50000300 	.word	0x50000300
 8002d4c:	50000700 	.word	0x50000700

08002d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <ADC_Enable+0x2c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <ADC_Enable+0x2c>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <ADC_Enable+0x2e>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d143      	bne.n	8002e0a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <ADC_Enable+0xc4>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0210 	orr.w	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e02f      	b.n	8002e0c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002dbc:	f7fe ff7e 	bl	8001cbc <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dc2:	e01b      	b.n	8002dfc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dc4:	f7fe ff7a 	bl	8001cbc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d914      	bls.n	8002dfc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00d      	beq.n	8002dfc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d1dc      	bne.n	8002dc4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	8000003f 	.word	0x8000003f

08002e18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d108      	bne.n	8002e44 <ADC_Disable+0x2c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <ADC_Disable+0x2c>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <ADC_Disable+0x2e>
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d047      	beq.n	8002eda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030d 	and.w	r3, r3, #13
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10f      	bne.n	8002e78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0202 	orr.w	r2, r2, #2
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e70:	f7fe ff24 	bl	8001cbc <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e76:	e029      	b.n	8002ecc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e023      	b.n	8002edc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e94:	f7fe ff12 	bl	8001cbc <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d914      	bls.n	8002ecc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d0dc      	beq.n	8002e94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 809b 	beq.w	8003040 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f18:	d12a      	bne.n	8002f70 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d126      	bne.n	8002f70 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d122      	bne.n	8002f70 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f2e:	e014      	b.n	8002f5a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4a46      	ldr	r2, [pc, #280]	; (800304c <ADC_ConversionStop+0x168>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d90d      	bls.n	8002f54 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e076      	b.n	8003042 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3301      	adds	r3, #1
 8002f58:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d1e3      	bne.n	8002f30 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b60      	cmp	r3, #96	; 0x60
 8002f74:	d015      	beq.n	8002fa2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d10e      	bne.n	8002fa2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d015      	beq.n	8002fd4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d10e      	bne.n	8002fd4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b60      	cmp	r3, #96	; 0x60
 8002fd8:	d005      	beq.n	8002fe6 <ADC_ConversionStop+0x102>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b6c      	cmp	r3, #108	; 0x6c
 8002fde:	d105      	bne.n	8002fec <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	617b      	str	r3, [r7, #20]
        break;
 8002fe4:	e005      	b.n	8002ff2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	617b      	str	r3, [r7, #20]
        break;
 8002fea:	e002      	b.n	8002ff2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fec:	2304      	movs	r3, #4
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ff2:	f7fe fe63 	bl	8001cbc <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ff8:	e01b      	b.n	8003032 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ffa:	f7fe fe5f 	bl	8001cbc <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b0b      	cmp	r3, #11
 8003006:	d914      	bls.n	8003032 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e007      	b.n	8003042 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1dc      	bne.n	8002ffa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	000993ff 	.word	0x000993ff

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <__NVIC_EnableIRQ+0x38>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db0a      	blt.n	800311a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	490c      	ldr	r1, [pc, #48]	; (800313c <__NVIC_SetPriority+0x4c>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	440b      	add	r3, r1
 8003114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003118:	e00a      	b.n	8003130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <__NVIC_SetPriority+0x50>)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	3b04      	subs	r3, #4
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	440b      	add	r3, r1
 800312e:	761a      	strb	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf28      	it	cs
 8003162:	2304      	movcs	r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	2b06      	cmp	r3, #6
 800316c:	d902      	bls.n	8003174 <NVIC_EncodePriority+0x30>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b03      	subs	r3, #3
 8003172:	e000      	b.n	8003176 <NVIC_EncodePriority+0x32>
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43d9      	mvns	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	4313      	orrs	r3, r2
         );
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d0:	f7ff ff8e 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff29 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff3e 	bl	8003098 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff8e 	bl	8003144 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5d 	bl	80030f0 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff31 	bl	80030b4 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa2 	bl	80031ac <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003282:	e154      	b.n	800352e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8146 	beq.w	8003528 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d005      	beq.n	80032b4 <HAL_GPIO_Init+0x40>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 0201 	and.w	r2, r3, #1
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b03      	cmp	r3, #3
 8003320:	d017      	beq.n	8003352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d123      	bne.n	80033a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	6939      	ldr	r1, [r7, #16]
 80033a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0203 	and.w	r2, r3, #3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a0 	beq.w	8003528 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_GPIO_Init+0x2d8>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_GPIO_Init+0x2d8>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_GPIO_Init+0x2d8>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003400:	4a53      	ldr	r2, [pc, #332]	; (8003550 <HAL_GPIO_Init+0x2dc>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800342a:	d019      	beq.n	8003460 <HAL_GPIO_Init+0x1ec>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_GPIO_Init+0x2e0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_GPIO_Init+0x1e8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a48      	ldr	r2, [pc, #288]	; (8003558 <HAL_GPIO_Init+0x2e4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00d      	beq.n	8003458 <HAL_GPIO_Init+0x1e4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a47      	ldr	r2, [pc, #284]	; (800355c <HAL_GPIO_Init+0x2e8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x1e0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a46      	ldr	r2, [pc, #280]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_GPIO_Init+0x1dc>
 800344c:	2304      	movs	r3, #4
 800344e:	e008      	b.n	8003462 <HAL_GPIO_Init+0x1ee>
 8003450:	2305      	movs	r3, #5
 8003452:	e006      	b.n	8003462 <HAL_GPIO_Init+0x1ee>
 8003454:	2303      	movs	r3, #3
 8003456:	e004      	b.n	8003462 <HAL_GPIO_Init+0x1ee>
 8003458:	2302      	movs	r3, #2
 800345a:	e002      	b.n	8003462 <HAL_GPIO_Init+0x1ee>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_GPIO_Init+0x1ee>
 8003460:	2300      	movs	r3, #0
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	f002 0203 	and.w	r2, r2, #3
 8003468:	0092      	lsls	r2, r2, #2
 800346a:	4093      	lsls	r3, r2
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003472:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_GPIO_Init+0x2dc>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003480:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034a4:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034aa:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034f8:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aea3 	bne.w	8003284 <HAL_GPIO_Init+0x10>
  }
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000
 8003550:	40010000 	.word	0x40010000
 8003554:	48000400 	.word	0x48000400
 8003558:	48000800 	.word	0x48000800
 800355c:	48000c00 	.word	0x48000c00
 8003560:	48001000 	.word	0x48001000
 8003564:	40010400 	.word	0x40010400

08003568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	887b      	ldrh	r3, [r7, #2]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e001      	b.n	800358a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
 80035a4:	4613      	mov	r3, r2
 80035a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a8:	787b      	ldrb	r3, [r7, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e081      	b.n	80036de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe f920 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2224      	movs	r2, #36	; 0x24
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003618:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003628:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e006      	b.n	8003650 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800364e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d104      	bne.n	8003662 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003660:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	817b      	strh	r3, [r7, #10]
 80036fa:	460b      	mov	r3, r1
 80036fc:	813b      	strh	r3, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b20      	cmp	r3, #32
 800370c:	f040 80f9 	bne.w	8003902 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_I2C_Mem_Write+0x34>
 8003716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0ed      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Mem_Write+0x4e>
 8003732:	2302      	movs	r3, #2
 8003734:	e0e6      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800373e:	f7fe fabd 	bl	8001cbc <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fac3 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0d1      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003788:	88f8      	ldrh	r0, [r7, #6]
 800378a:	893a      	ldrh	r2, [r7, #8]
 800378c:	8979      	ldrh	r1, [r7, #10]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4603      	mov	r3, r0
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f9d3 	bl	8003b44 <I2C_RequestMemoryWrite>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0a9      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2bff      	cmp	r3, #255	; 0xff
 80037b8:	d90e      	bls.n	80037d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	8979      	ldrh	r1, [r7, #10]
 80037c8:	2300      	movs	r3, #0
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fc3d 	bl	8004050 <I2C_TransferConfig>
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8979      	ldrh	r1, [r7, #10]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fc2c 	bl	8004050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fabc 	bl	8003d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e07b      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d034      	beq.n	80038b0 <HAL_I2C_Mem_Write+0x1c8>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d130      	bne.n	80038b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fa3f 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04d      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	d90e      	bls.n	8003890 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fbe1 	bl	8004050 <I2C_TransferConfig>
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fbd0 	bl	8004050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d19e      	bne.n	80037f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 faa2 	bl	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01a      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_I2C_Mem_Write+0x224>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	fe00e800 	.word	0xfe00e800

08003910 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	461a      	mov	r2, r3
 800391e:	4603      	mov	r3, r0
 8003920:	817b      	strh	r3, [r7, #10]
 8003922:	460b      	mov	r3, r1
 8003924:	813b      	strh	r3, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	f040 80fd 	bne.w	8003b32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_I2C_Mem_Read+0x34>
 800393e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0f1      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_I2C_Mem_Read+0x4e>
 800395a:	2302      	movs	r3, #2
 800395c:	e0ea      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003966:	f7fe f9a9 	bl	8001cbc <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2319      	movs	r3, #25
 8003972:	2201      	movs	r2, #1
 8003974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f9af 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0d5      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2222      	movs	r2, #34	; 0x22
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039b0:	88f8      	ldrh	r0, [r7, #6]
 80039b2:	893a      	ldrh	r2, [r7, #8]
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	4603      	mov	r3, r0
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f913 	bl	8003bec <I2C_RequestMemoryRead>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0ad      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2bff      	cmp	r3, #255	; 0xff
 80039e0:	d90e      	bls.n	8003a00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	22ff      	movs	r2, #255	; 0xff
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	4b52      	ldr	r3, [pc, #328]	; (8003b3c <HAL_I2C_Mem_Read+0x22c>)
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fb29 	bl	8004050 <I2C_TransferConfig>
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_I2C_Mem_Read+0x22c>)
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fb18 	bl	8004050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2200      	movs	r2, #0
 8003a28:	2104      	movs	r1, #4
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f956 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07c      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d034      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x1d0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d130      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	2200      	movs	r2, #0
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f927 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04d      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d90e      	bls.n	8003ac0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	8979      	ldrh	r1, [r7, #10]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fac9 	bl	8004050 <I2C_TransferConfig>
 8003abe:	e00f      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fab8 	bl	8004050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d19a      	bne.n	8003a20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f98a 	bl	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e01a      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2220      	movs	r2, #32
 8003b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_I2C_Mem_Read+0x230>)
 8003b12:	400b      	ands	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	80002400 	.word	0x80002400
 8003b40:	fe00e800 	.word	0xfe00e800

08003b44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	8979      	ldrh	r1, [r7, #10]
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <I2C_RequestMemoryWrite+0xa4>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa6f 	bl	8004050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f8ff 	bl	8003d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e02c      	b.n	8003be0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8c:	893b      	ldrh	r3, [r7, #8]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	629a      	str	r2, [r3, #40]	; 0x28
 8003b96:	e015      	b.n	8003bc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f8e5 	bl	8003d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e012      	b.n	8003be0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f884 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	80002000 	.word	0x80002000

08003bec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	813b      	strh	r3, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <I2C_RequestMemoryRead+0xa4>)
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2300      	movs	r3, #0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa1c 	bl	8004050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f8ac 	bl	8003d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e02c      	b.n	8003c86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c32:	893b      	ldrh	r3, [r7, #8]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c3c:	e015      	b.n	8003c6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	69b9      	ldr	r1, [r7, #24]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f892 	bl	8003d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e012      	b.n	8003c86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f831 	bl	8003cdc <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	80002000 	.word	0x80002000

08003c94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d103      	bne.n	8003cb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	619a      	str	r2, [r3, #24]
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cec:	e031      	b.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf4:	d02d      	beq.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fd ffe1 	bl	8001cbc <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d122      	bne.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d113      	bne.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00f      	b.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d0be      	beq.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d86:	e033      	b.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f87f 	bl	8003e90 <I2C_IsErrorOccurred>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e031      	b.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da2:	d025      	beq.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fd ff8a 	bl	8001cbc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11a      	bne.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d013      	beq.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e007      	b.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d1c4      	bne.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e14:	e02f      	b.n	8003e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f838 	bl	8003e90 <I2C_IsErrorOccurred>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd ff47 	bl	8001cbc <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11a      	bne.n	8003e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d013      	beq.n	8003e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d1c8      	bne.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d068      	beq.n	8003f8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ec4:	e049      	b.n	8003f5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d045      	beq.n	8003f5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fd fef5 	bl	8001cbc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_IsErrorOccurred+0x54>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d13a      	bne.n	8003f5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f06:	d121      	bne.n	8003f4c <I2C_IsErrorOccurred+0xbc>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0e:	d01d      	beq.n	8003f4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d01a      	beq.n	8003f4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f26:	f7fd fec9 	bl	8001cbc <HAL_GetTick>
 8003f2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2c:	e00e      	b.n	8003f4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f2e:	f7fd fec5 	bl	8001cbc <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b19      	cmp	r3, #25
 8003f3a:	d907      	bls.n	8003f4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f043 0320 	orr.w	r3, r3, #32
 8003f42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f4a:	e006      	b.n	8003f5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d1e9      	bne.n	8003f2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d003      	beq.n	8003f70 <I2C_IsErrorOccurred+0xe0>
 8003f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0aa      	beq.n	8003ec6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01c      	beq.n	800403e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fe45 	bl	8003c94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <I2C_IsErrorOccurred+0x1bc>)
 8004016:	400b      	ands	r3, r1
 8004018:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800403e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	4613      	mov	r3, r2
 8004060:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004068:	7a7b      	ldrb	r3, [r7, #9]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004070:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	4313      	orrs	r3, r2
 800407a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800407e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	0d5b      	lsrs	r3, r3, #21
 800408a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <I2C_TransferConfig+0x60>)
 8004090:	430b      	orrs	r3, r1
 8004092:	43db      	mvns	r3, r3
 8004094:	ea02 0103 	and.w	r1, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	03ff63ff 	.word	0x03ff63ff

080040b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d138      	bne.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e032      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	d139      	bne.n	80041d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800416a:	2302      	movs	r3, #2
 800416c:	e033      	b.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800419c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e4:	b08b      	sub	sp, #44	; 0x2c
 80041e6:	af06      	add	r7, sp, #24
 80041e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0c4      	b.n	800437e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fc3f 	bl	8001a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f003 fa6e 	bl	80076fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e040      	b.n	80042a8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	3301      	adds	r3, #1
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	440b      	add	r3, r1
 8004260:	3303      	adds	r3, #3
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	440b      	add	r3, r1
 8004274:	3338      	adds	r3, #56	; 0x38
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	440b      	add	r3, r1
 8004288:	333c      	adds	r3, #60	; 0x3c
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	440b      	add	r3, r1
 800429c:	3340      	adds	r3, #64	; 0x40
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	3301      	adds	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3b9      	bcc.n	8004226 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	e044      	b.n	8004342 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	440b      	add	r3, r1
 80042c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	3301      	adds	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3b5      	bcc.n	80042b8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	687e      	ldr	r6, [r7, #4]
 8004354:	466d      	mov	r5, sp
 8004356:	f106 0410 	add.w	r4, r6, #16
 800435a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	1d33      	adds	r3, r6, #4
 8004364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	f003 f9e3 	bl	8007732 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800438e:	af00      	add	r7, sp, #0
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004398:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f001 b823 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 817d 	beq.w	80046be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043c4:	4bbc      	ldr	r3, [pc, #752]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d00c      	beq.n	80043ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043d0:	4bb9      	ldr	r3, [pc, #740]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d15c      	bne.n	8004496 <HAL_RCC_OscConfig+0x10e>
 80043dc:	4bb6      	ldr	r3, [pc, #728]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d155      	bne.n	8004496 <HAL_RCC_OscConfig+0x10e>
 80043ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d102      	bne.n	800441c <HAL_RCC_OscConfig+0x94>
 8004416:	4ba8      	ldr	r3, [pc, #672]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	e015      	b.n	8004448 <HAL_RCC_OscConfig+0xc0>
 800441c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004420:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004434:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004438:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004444:	4b9c      	ldr	r3, [pc, #624]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800444c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004450:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004454:	fa92 f2a2 	rbit	r2, r2
 8004458:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800445c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004460:	fab2 f282 	clz	r2, r2
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	f042 0220 	orr.w	r2, r2, #32
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f002 021f 	and.w	r2, r2, #31
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f202 	lsl.w	r2, r1, r2
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 811f 	beq.w	80046bc <HAL_RCC_OscConfig+0x334>
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 8116 	bne.w	80046bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f000 bfaf 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12e>
 80044a8:	4b83      	ldr	r3, [pc, #524]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a82      	ldr	r2, [pc, #520]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e036      	b.n	8004524 <HAL_RCC_OscConfig+0x19c>
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x158>
 80044c6:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7b      	ldr	r2, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a78      	ldr	r2, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e021      	b.n	8004524 <HAL_RCC_OscConfig+0x19c>
 80044e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x184>
 80044f2:	4b71      	ldr	r3, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a70      	ldr	r2, [pc, #448]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b6e      	ldr	r3, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6d      	ldr	r2, [pc, #436]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x19c>
 800450c:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a69      	ldr	r2, [pc, #420]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a66      	ldr	r2, [pc, #408]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004524:	4b64      	ldr	r3, [pc, #400]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f023 020f 	bic.w	r2, r3, #15
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	495f      	ldr	r1, [pc, #380]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800453a:	4313      	orrs	r3, r2
 800453c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d059      	beq.n	8004602 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd fbb5 	bl	8001cbc <HAL_GetTick>
 8004552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e00a      	b.n	800456e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd fbb0 	bl	8001cbc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d902      	bls.n	800456e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	f000 bf43 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 800456e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004572:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004582:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d102      	bne.n	80045a0 <HAL_RCC_OscConfig+0x218>
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	e015      	b.n	80045cc <HAL_RCC_OscConfig+0x244>
 80045a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80045d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045d8:	fa92 f2a2 	rbit	r2, r2
 80045dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80045e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80045e4:	fab2 f282 	clz	r2, r2
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	f042 0220 	orr.w	r2, r2, #32
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	f002 021f 	and.w	r2, r2, #31
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f202 	lsl.w	r2, r1, r2
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ab      	beq.n	8004558 <HAL_RCC_OscConfig+0x1d0>
 8004600:	e05d      	b.n	80046be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fd fb5b 	bl	8001cbc <HAL_GetTick>
 8004606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd fb56 	bl	8001cbc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	; 0x64
 800461a:	d902      	bls.n	8004622 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	f000 bee9 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004626:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004636:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_RCC_OscConfig+0x2cc>
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	e015      	b.n	8004680 <HAL_RCC_OscConfig+0x2f8>
 8004654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004658:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004670:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_RCC_OscConfig+0x330>)
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004684:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004688:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800468c:	fa92 f2a2 	rbit	r2, r2
 8004690:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004694:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004698:	fab2 f282 	clz	r2, r2
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	f042 0220 	orr.w	r2, r2, #32
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	f002 021f 	and.w	r2, r2, #31
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f202 	lsl.w	r2, r1, r2
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ab      	bne.n	800460c <HAL_RCC_OscConfig+0x284>
 80046b4:	e003      	b.n	80046be <HAL_RCC_OscConfig+0x336>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 817d 	beq.w	80049ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d4:	4ba6      	ldr	r3, [pc, #664]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046e0:	4ba3      	ldr	r3, [pc, #652]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d172      	bne.n	80047d2 <HAL_RCC_OscConfig+0x44a>
 80046ec:	4ba0      	ldr	r3, [pc, #640]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d16c      	bne.n	80047d2 <HAL_RCC_OscConfig+0x44a>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800470a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d102      	bne.n	8004728 <HAL_RCC_OscConfig+0x3a0>
 8004722:	4b93      	ldr	r3, [pc, #588]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	e013      	b.n	8004750 <HAL_RCC_OscConfig+0x3c8>
 8004728:	2302      	movs	r3, #2
 800472a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800473a:	2302      	movs	r3, #2
 800473c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004740:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800474c:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2202      	movs	r2, #2
 8004752:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004756:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800475a:	fa92 f2a2 	rbit	r2, r2
 800475e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004762:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004766:	fab2 f282 	clz	r2, r2
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f042 0220 	orr.w	r2, r2, #32
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	f002 021f 	and.w	r2, r2, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f202 	lsl.w	r2, r1, r2
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCC_OscConfig+0x410>
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d002      	beq.n	8004798 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f000 be2e 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b75      	ldr	r3, [pc, #468]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	21f8      	movs	r1, #248	; 0xf8
 80047ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047b6:	fa91 f1a1 	rbit	r1, r1
 80047ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80047be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047c2:	fab1 f181 	clz	r1, r1
 80047c6:	b2c9      	uxtb	r1, r1
 80047c8:	408b      	lsls	r3, r1
 80047ca:	4969      	ldr	r1, [pc, #420]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d0:	e0fd      	b.n	80049ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8088 	beq.w	80048f4 <HAL_RCC_OscConfig+0x56c>
 80047e4:	2301      	movs	r3, #1
 80047e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80047f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004804:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	461a      	mov	r2, r3
 800480c:	2301      	movs	r3, #1
 800480e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd fa54 	bl	8001cbc <HAL_GetTick>
 8004814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481a:	f7fd fa4f 	bl	8001cbc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d902      	bls.n	8004830 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	f000 bde2 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004830:	2302      	movs	r3, #2
 8004832:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004842:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <HAL_RCC_OscConfig+0x4d8>
 800485a:	4b45      	ldr	r3, [pc, #276]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	e013      	b.n	8004888 <HAL_RCC_OscConfig+0x500>
 8004860:	2302      	movs	r3, #2
 8004862:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004872:	2302      	movs	r3, #2
 8004874:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004878:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2202      	movs	r2, #2
 800488a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800488e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004892:	fa92 f2a2 	rbit	r2, r2
 8004896:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800489a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800489e:	fab2 f282 	clz	r2, r2
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f042 0220 	orr.w	r2, r2, #32
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	f002 021f 	and.w	r2, r2, #31
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f202 	lsl.w	r2, r1, r2
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0af      	beq.n	800481a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	21f8      	movs	r1, #248	; 0xf8
 80048d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048d8:	fa91 f1a1 	rbit	r1, r1
 80048dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80048e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048e4:	fab1 f181 	clz	r1, r1
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	408b      	lsls	r3, r1
 80048ec:	4920      	ldr	r1, [pc, #128]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]
 80048f2:	e06c      	b.n	80049ce <HAL_RCC_OscConfig+0x646>
 80048f4:	2301      	movs	r3, #1
 80048f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004906:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	fab3 f383 	clz	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	461a      	mov	r2, r3
 800491c:	2300      	movs	r3, #0
 800491e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fd f9cc 	bl	8001cbc <HAL_GetTick>
 8004924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492a:	f7fd f9c7 	bl	8001cbc <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	f000 bd5a 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004940:	2302      	movs	r3, #2
 8004942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d104      	bne.n	8004974 <HAL_RCC_OscConfig+0x5ec>
 800496a:	4b01      	ldr	r3, [pc, #4]	; (8004970 <HAL_RCC_OscConfig+0x5e8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	e015      	b.n	800499c <HAL_RCC_OscConfig+0x614>
 8004970:	40021000 	.word	0x40021000
 8004974:	2302      	movs	r3, #2
 8004976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004986:	2302      	movs	r3, #2
 8004988:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800498c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004998:	4bc8      	ldr	r3, [pc, #800]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2202      	movs	r2, #2
 800499e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80049a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049a6:	fa92 f2a2 	rbit	r2, r2
 80049aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80049ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80049b2:	fab2 f282 	clz	r2, r2
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	f042 0220 	orr.w	r2, r2, #32
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f002 021f 	and.w	r2, r2, #31
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f202 	lsl.w	r2, r1, r2
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ad      	bne.n	800492a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8110 	beq.w	8004c04 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d079      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x760>
 80049f4:	2301      	movs	r3, #1
 80049f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4bab      	ldr	r3, [pc, #684]	; (8004cc0 <HAL_RCC_OscConfig+0x938>)
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd f94d 	bl	8001cbc <HAL_GetTick>
 8004a22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fd f948 	bl	8001cbc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d902      	bls.n	8004a3e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f000 bcdb 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a58:	2202      	movs	r2, #2
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	fa93 f2a3 	rbit	r2, r3
 8004a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	6019      	str	r1, [r3, #0]
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	fa93 f1a3 	rbit	r1, r3
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004abe:	6019      	str	r1, [r3, #0]
  return result;
 8004ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0a0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x6a0>
 8004ae6:	e08d      	b.n	8004c04 <HAL_RCC_OscConfig+0x87c>
 8004ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	fa93 f2a3 	rbit	r2, r3
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b0a:	601a      	str	r2, [r3, #0]
  return result;
 8004b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b68      	ldr	r3, [pc, #416]	; (8004cc0 <HAL_RCC_OscConfig+0x938>)
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd f8c7 	bl	8001cbc <HAL_GetTick>
 8004b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fd f8c2 	bl	8001cbc <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d902      	bls.n	8004b4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	f000 bc55 	b.w	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b52:	2202      	movs	r2, #2
 8004b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	fa93 f2a3 	rbit	r2, r3
 8004b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b76:	2202      	movs	r2, #2
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	fa93 f2a3 	rbit	r2, r3
 8004b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	fa93 f2a3 	rbit	r2, r3
 8004bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb6:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	6019      	str	r1, [r3, #0]
 8004bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	fa93 f1a3 	rbit	r1, r3
 8004bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bdc:	6019      	str	r1, [r3, #0]
  return result;
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	fab3 f383 	clz	r3, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d197      	bne.n	8004b34 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 81a1 	beq.w	8004f5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c20:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d116      	bne.n	8004c5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2c:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c36:	61d3      	str	r3, [r2, #28]
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c44:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCC_OscConfig+0x93c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11a      	bne.n	8004c9c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c66:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <HAL_RCC_OscConfig+0x93c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <HAL_RCC_OscConfig+0x93c>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c72:	f7fd f823 	bl	8001cbc <HAL_GetTick>
 8004c76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	e009      	b.n	8004c90 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7c:	f7fd f81e 	bl	8001cbc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e3b1      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_RCC_OscConfig+0x93c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ef      	beq.n	8004c7c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10d      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x940>
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <HAL_RCC_OscConfig+0x934>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6213      	str	r3, [r2, #32]
 8004cb8:	e03c      	b.n	8004d34 <HAL_RCC_OscConfig+0x9ac>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	10908120 	.word	0x10908120
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x96a>
 8004cd8:	4bc1      	ldr	r3, [pc, #772]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	4ac0      	ldr	r2, [pc, #768]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6213      	str	r3, [r2, #32]
 8004ce4:	4bbe      	ldr	r3, [pc, #760]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4abd      	ldr	r2, [pc, #756]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	6213      	str	r3, [r2, #32]
 8004cf0:	e020      	b.n	8004d34 <HAL_RCC_OscConfig+0x9ac>
 8004cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x994>
 8004d02:	4bb7      	ldr	r3, [pc, #732]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	4ab6      	ldr	r2, [pc, #728]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	6213      	str	r3, [r2, #32]
 8004d0e:	4bb4      	ldr	r3, [pc, #720]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4ab3      	ldr	r2, [pc, #716]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6213      	str	r3, [r2, #32]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0x9ac>
 8004d1c:	4bb0      	ldr	r3, [pc, #704]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4aaf      	ldr	r2, [pc, #700]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6213      	str	r3, [r2, #32]
 8004d28:	4bad      	ldr	r3, [pc, #692]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4aac      	ldr	r2, [pc, #688]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8081 	beq.w	8004e48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fc ffb9 	bl	8001cbc <HAL_GetTick>
 8004d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d50:	f7fc ffb4 	bl	8001cbc <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e345      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d70:	2202      	movs	r2, #2
 8004d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	fa93 f2a3 	rbit	r2, r3
 8004d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d94:	2202      	movs	r2, #2
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	fa93 f2a3 	rbit	r2, r3
 8004da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004daa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dae:	601a      	str	r2, [r3, #0]
  return result;
 8004db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004db8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d102      	bne.n	8004dd4 <HAL_RCC_OscConfig+0xa4c>
 8004dce:	4b84      	ldr	r3, [pc, #528]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	e013      	b.n	8004dfc <HAL_RCC_OscConfig+0xa74>
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ddc:	2202      	movs	r2, #2
 8004dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	fa93 f2a3 	rbit	r2, r3
 8004dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	4b79      	ldr	r3, [pc, #484]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e04:	2102      	movs	r1, #2
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	fa92 f1a2 	rbit	r1, r2
 8004e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e1e:	6011      	str	r1, [r2, #0]
  return result;
 8004e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e24:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	fab2 f282 	clz	r2, r2
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	f002 021f 	and.w	r2, r2, #31
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d084      	beq.n	8004d50 <HAL_RCC_OscConfig+0x9c8>
 8004e46:	e07f      	b.n	8004f48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e48:	f7fc ff38 	bl	8001cbc <HAL_GetTick>
 8004e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00b      	b.n	8004e6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fc ff33 	bl	8001cbc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e2c4      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e72:	2202      	movs	r2, #2
 8004e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	fa93 f2a3 	rbit	r2, r3
 8004e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e96:	2202      	movs	r2, #2
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	fa93 f2a3 	rbit	r2, r3
 8004ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eb0:	601a      	str	r2, [r3, #0]
  return result;
 8004eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	fab3 f383 	clz	r3, r3
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f043 0302 	orr.w	r3, r3, #2
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_OscConfig+0xb4e>
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	e013      	b.n	8004efe <HAL_RCC_OscConfig+0xb76>
 8004ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ede:	2202      	movs	r2, #2
 8004ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	fa93 f2a3 	rbit	r2, r3
 8004ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f06:	2102      	movs	r1, #2
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	fa92 f1a2 	rbit	r1, r2
 8004f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f20:	6011      	str	r1, [r2, #0]
  return result;
 8004f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	fab2 f282 	clz	r2, r2
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f002 021f 	and.w	r2, r2, #31
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d184      	bne.n	8004e52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8242 	beq.w	80053f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6e:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_RCC_OscConfig+0xc58>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	f000 8213 	beq.w	80053a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f040 8162 	bne.w	8005252 <HAL_RCC_OscConfig+0xeca>
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	fa93 f2a3 	rbit	r2, r3
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fb2:	601a      	str	r2, [r3, #0]
  return result;
 8004fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fe72 	bl	8001cbc <HAL_GetTick>
 8004fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fdc:	e00c      	b.n	8004ff8 <HAL_RCC_OscConfig+0xc70>
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc fe6a 	bl	8001cbc <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1fd      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	fa93 f2a3 	rbit	r2, r3
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800501c:	601a      	str	r2, [r3, #0]
  return result;
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005026:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005028:	fab3 f383 	clz	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <HAL_RCC_OscConfig+0xcba>
 800503c:	4bb0      	ldr	r3, [pc, #704]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	e027      	b.n	8005092 <HAL_RCC_OscConfig+0xd0a>
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800504a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800504e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	fa93 f2a3 	rbit	r2, r3
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005088:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4b9c      	ldr	r3, [pc, #624]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005096:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800509a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800509e:	6011      	str	r1, [r2, #0]
 80050a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	fa92 f1a2 	rbit	r1, r2
 80050ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050b6:	6011      	str	r1, [r2, #0]
  return result;
 80050b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	fab2 f282 	clz	r2, r2
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	f042 0220 	orr.w	r2, r2, #32
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	f002 021f 	and.w	r2, r2, #31
 80050d2:	2101      	movs	r1, #1
 80050d4:	fa01 f202 	lsl.w	r2, r1, r2
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d182      	bne.n	8004fe4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050de:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	430b      	orrs	r3, r1
 8005100:	497f      	ldr	r1, [pc, #508]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800510e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	fa93 f2a3 	rbit	r2, r3
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800512a:	601a      	str	r2, [r3, #0]
  return result;
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005134:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	461a      	mov	r2, r3
 8005148:	2301      	movs	r3, #1
 800514a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc fdb6 	bl	8001cbc <HAL_GetTick>
 8005150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005154:	e009      	b.n	800516a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7fc fdb1 	bl	8001cbc <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e144      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	fa93 f2a3 	rbit	r2, r3
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800518e:	601a      	str	r2, [r3, #0]
  return result;
 8005190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005194:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_RCC_OscConfig+0xe2c>
 80051ae:	4b54      	ldr	r3, [pc, #336]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e027      	b.n	8005204 <HAL_RCC_OscConfig+0xe7c>
 80051b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	fa93 f2a3 	rbit	r2, r3
 80051d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	fa93 f2a3 	rbit	r2, r3
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005208:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800520c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005216:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	fa92 f1a2 	rbit	r1, r2
 8005220:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005224:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005228:	6011      	str	r1, [r2, #0]
  return result;
 800522a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800522e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	fab2 f282 	clz	r2, r2
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	f042 0220 	orr.w	r2, r2, #32
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	f002 021f 	and.w	r2, r2, #31
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f202 	lsl.w	r2, r1, r2
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d082      	beq.n	8005156 <HAL_RCC_OscConfig+0xdce>
 8005250:	e0cf      	b.n	80053f2 <HAL_RCC_OscConfig+0x106a>
 8005252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005256:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800525a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800525e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005264:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005276:	601a      	str	r2, [r3, #0]
  return result;
 8005278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005280:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800528c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	461a      	mov	r2, r3
 8005294:	2300      	movs	r3, #0
 8005296:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fc fd10 	bl	8001cbc <HAL_GetTick>
 800529c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a0:	e009      	b.n	80052b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a2:	f7fc fd0b 	bl	8001cbc <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e09e      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
 80052b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	fa93 f2a3 	rbit	r2, r3
 80052d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052da:	601a      	str	r2, [r3, #0]
  return result;
 80052dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d104      	bne.n	8005304 <HAL_RCC_OscConfig+0xf7c>
 80052fa:	4b01      	ldr	r3, [pc, #4]	; (8005300 <HAL_RCC_OscConfig+0xf78>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e029      	b.n	8005354 <HAL_RCC_OscConfig+0xfcc>
 8005300:	40021000 	.word	0x40021000
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800530c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005316:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	fa93 f2a3 	rbit	r2, r3
 8005320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005324:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	fa93 f2a3 	rbit	r2, r3
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x1078>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005358:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800535c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005366:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	fa92 f1a2 	rbit	r1, r2
 8005370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005374:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005378:	6011      	str	r1, [r2, #0]
  return result;
 800537a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800537e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	fab2 f282 	clz	r2, r2
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f042 0220 	orr.w	r2, r2, #32
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	f002 021f 	and.w	r2, r2, #31
 8005394:	2101      	movs	r1, #1
 8005396:	fa01 f202 	lsl.w	r2, r1, r2
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d180      	bne.n	80052a2 <HAL_RCC_OscConfig+0xf1a>
 80053a0:	e027      	b.n	80053f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e01e      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <HAL_RCC_OscConfig+0x1078>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d10b      	bne.n	80053ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d001      	beq.n	80053f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b09e      	sub	sp, #120	; 0x78
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e162      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800541c:	4b90      	ldr	r3, [pc, #576]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d910      	bls.n	800544c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b8d      	ldr	r3, [pc, #564]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 0207 	bic.w	r2, r3, #7
 8005432:	498b      	ldr	r1, [pc, #556]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b89      	ldr	r3, [pc, #548]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e14a      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005458:	4b82      	ldr	r3, [pc, #520]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	497f      	ldr	r1, [pc, #508]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80dc 	beq.w	8005630 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d13c      	bne.n	80054fa <HAL_RCC_ClockConfig+0xf6>
 8005480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005490:	fab3 f383 	clz	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <HAL_RCC_ClockConfig+0xa6>
 80054a4:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	e00f      	b.n	80054ca <HAL_RCC_ClockConfig+0xc6>
 80054aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	667b      	str	r3, [r7, #100]	; 0x64
 80054b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054bc:	663b      	str	r3, [r7, #96]	; 0x60
 80054be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c6:	4b67      	ldr	r3, [pc, #412]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80054d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d2:	fa92 f2a2 	rbit	r2, r2
 80054d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054da:	fab2 f282 	clz	r2, r2
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	f042 0220 	orr.w	r2, r2, #32
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	f002 021f 	and.w	r2, r2, #31
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f202 	lsl.w	r2, r1, r2
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d17b      	bne.n	80055ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e0f3      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d13c      	bne.n	800557c <HAL_RCC_ClockConfig+0x178>
 8005502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d102      	bne.n	800552c <HAL_RCC_ClockConfig+0x128>
 8005526:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	e00f      	b.n	800554c <HAL_RCC_ClockConfig+0x148>
 800552c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005530:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	647b      	str	r3, [r7, #68]	; 0x44
 800553a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
 8005540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005548:	4b46      	ldr	r3, [pc, #280]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005550:	63ba      	str	r2, [r7, #56]	; 0x38
 8005552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005554:	fa92 f2a2 	rbit	r2, r2
 8005558:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800555a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555c:	fab2 f282 	clz	r2, r2
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	f042 0220 	orr.w	r2, r2, #32
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	f002 021f 	and.w	r2, r2, #31
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d13a      	bne.n	80055ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0b2      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
 800557c:	2302      	movs	r3, #2
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d102      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x1a0>
 800559e:	4b31      	ldr	r3, [pc, #196]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	e00d      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1bc>
 80055a4:	2302      	movs	r3, #2
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	fa93 f3a3 	rbit	r3, r3
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	2302      	movs	r3, #2
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	4b29      	ldr	r3, [pc, #164]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2202      	movs	r2, #2
 80055c2:	61ba      	str	r2, [r7, #24]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	fa92 f2a2 	rbit	r2, r2
 80055ca:	617a      	str	r2, [r7, #20]
  return result;
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	fab2 f282 	clz	r2, r2
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	f042 0220 	orr.w	r2, r2, #32
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	f002 021f 	and.w	r2, r2, #31
 80055de:	2101      	movs	r1, #1
 80055e0:	fa01 f202 	lsl.w	r2, r1, r2
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e079      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f023 0203 	bic.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	491a      	ldr	r1, [pc, #104]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005600:	f7fc fb5c 	bl	8001cbc <HAL_GetTick>
 8005604:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005606:	e00a      	b.n	800561e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005608:	f7fc fb58 	bl	8001cbc <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e061      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 020c 	and.w	r2, r3, #12
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	429a      	cmp	r2, r3
 800562e:	d1eb      	bne.n	8005608 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d214      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 0207 	bic.w	r2, r3, #7
 8005646:	4906      	ldr	r1, [pc, #24]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <HAL_RCC_ClockConfig+0x25c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d005      	beq.n	8005668 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e040      	b.n	80056e2 <HAL_RCC_ClockConfig+0x2de>
 8005660:	40022000 	.word	0x40022000
 8005664:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <HAL_RCC_ClockConfig+0x2e8>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	491a      	ldr	r1, [pc, #104]	; (80056ec <HAL_RCC_ClockConfig+0x2e8>)
 8005682:	4313      	orrs	r3, r2
 8005684:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005692:	4b16      	ldr	r3, [pc, #88]	; (80056ec <HAL_RCC_ClockConfig+0x2e8>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4912      	ldr	r1, [pc, #72]	; (80056ec <HAL_RCC_ClockConfig+0x2e8>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056a6:	f000 f829 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80056aa:	4601      	mov	r1, r0
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_RCC_ClockConfig+0x2e8>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b4:	22f0      	movs	r2, #240	; 0xf0
 80056b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	fa92 f2a2 	rbit	r2, r2
 80056be:	60fa      	str	r2, [r7, #12]
  return result;
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	fab2 f282 	clz	r2, r2
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	40d3      	lsrs	r3, r2
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_RCC_ClockConfig+0x2ec>)
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	fa21 f303 	lsr.w	r3, r1, r3
 80056d2:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <HAL_RCC_ClockConfig+0x2f0>)
 80056d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <HAL_RCC_ClockConfig+0x2f4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fc faaa 	bl	8001c34 <HAL_InitTick>
  
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3778      	adds	r7, #120	; 0x78
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	08007800 	.word	0x08007800
 80056f4:	20000000 	.word	0x20000000
 80056f8:	20000004 	.word	0x20000004

080056fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b08b      	sub	sp, #44	; 0x2c
 8005700:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005716:	4b29      	ldr	r3, [pc, #164]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b04      	cmp	r3, #4
 8005724:	d002      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x30>
 8005726:	2b08      	cmp	r3, #8
 8005728:	d003      	beq.n	8005732 <HAL_RCC_GetSysClockFreq+0x36>
 800572a:	e03c      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800572e:	623b      	str	r3, [r7, #32]
      break;
 8005730:	e03c      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005738:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800573c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	fa92 f2a2 	rbit	r2, r2
 8005744:	607a      	str	r2, [r7, #4]
  return result;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	fab2 f282 	clz	r2, r2
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	40d3      	lsrs	r3, r2
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005752:	5cd3      	ldrb	r3, [r2, r3]
 8005754:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005756:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	220f      	movs	r2, #15
 8005760:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	fa92 f2a2 	rbit	r2, r2
 8005768:	60fa      	str	r2, [r7, #12]
  return result;
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	fab2 f282 	clz	r2, r2
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	40d3      	lsrs	r3, r2
 8005774:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005776:	5cd3      	ldrb	r3, [r2, r3]
 8005778:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	fbb2 f2f3 	udiv	r2, r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	e004      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	623b      	str	r3, [r7, #32]
      break;
 80057a4:	e002      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057a8:	623b      	str	r3, [r7, #32]
      break;
 80057aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ac:	6a3b      	ldr	r3, [r7, #32]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	372c      	adds	r7, #44	; 0x2c
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	007a1200 	.word	0x007a1200
 80057c4:	08007810 	.word	0x08007810
 80057c8:	08007820 	.word	0x08007820
 80057cc:	003d0900 	.word	0x003d0900

080057d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b092      	sub	sp, #72	; 0x48
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80d4 	beq.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f4:	4b4e      	ldr	r3, [pc, #312]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10e      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005800:	4b4b      	ldr	r3, [pc, #300]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4a4a      	ldr	r2, [pc, #296]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580a:	61d3      	str	r3, [r2, #28]
 800580c:	4b48      	ldr	r3, [pc, #288]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005826:	2b00      	cmp	r3, #0
 8005828:	d118      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800582a:	4b42      	ldr	r3, [pc, #264]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a41      	ldr	r2, [pc, #260]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005834:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005836:	f7fc fa41 	bl	8001cbc <HAL_GetTick>
 800583a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583c:	e008      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583e:	f7fc fa3d 	bl	8001cbc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b64      	cmp	r3, #100	; 0x64
 800584a:	d901      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e169      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005850:	4b38      	ldr	r3, [pc, #224]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800585c:	4b34      	ldr	r3, [pc, #208]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8084 	beq.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005878:	429a      	cmp	r2, r3
 800587a:	d07c      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800587c:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800588a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	fa93 f3a3 	rbit	r3, r3
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	461a      	mov	r2, r3
 80058a6:	2301      	movs	r3, #1
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	fa93 f3a3 	rbit	r3, r3
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04b      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058de:	f7fc f9ed 	bl	8001cbc <HAL_GetTick>
 80058e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fc f9e9 	bl	8001cbc <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e113      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80058fc:	2302      	movs	r3, #2
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	2302      	movs	r3, #2
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	fa93 f3a3 	rbit	r3, r3
 8005912:	61fb      	str	r3, [r7, #28]
  return result;
 8005914:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d108      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800592a:	4b01      	ldr	r3, [pc, #4]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	e00d      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
 8005938:	10908100 	.word	0x10908100
 800593c:	2302      	movs	r3, #2
 800593e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	fa93 f3a3 	rbit	r3, r3
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	4b78      	ldr	r3, [pc, #480]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2202      	movs	r2, #2
 800594e:	613a      	str	r2, [r7, #16]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	fa92 f2a2 	rbit	r2, r2
 8005956:	60fa      	str	r2, [r7, #12]
  return result;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	fab2 f282 	clz	r2, r2
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	f002 021f 	and.w	r2, r2, #31
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f202 	lsl.w	r2, r1, r2
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0b7      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005976:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	496a      	ldr	r1, [pc, #424]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a8:	4b60      	ldr	r3, [pc, #384]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f023 0203 	bic.w	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	495d      	ldr	r1, [pc, #372]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059c6:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4956      	ldr	r1, [pc, #344]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059e4:	4b51      	ldr	r3, [pc, #324]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	494e      	ldr	r1, [pc, #312]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4947      	ldr	r1, [pc, #284]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a20:	4b42      	ldr	r3, [pc, #264]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	493f      	ldr	r1, [pc, #252]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f023 0220 	bic.w	r2, r3, #32
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4938      	ldr	r1, [pc, #224]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a5c:	4b33      	ldr	r3, [pc, #204]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	4930      	ldr	r1, [pc, #192]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	4929      	ldr	r1, [pc, #164]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4921      	ldr	r1, [pc, #132]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	491a      	ldr	r1, [pc, #104]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	4912      	ldr	r1, [pc, #72]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005af2:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	490b      	ldr	r1, [pc, #44]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	4903      	ldr	r1, [pc, #12]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3748      	adds	r7, #72	; 0x48
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e09d      	b.n	8005c7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b52:	d009      	beq.n	8005b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e005      	b.n	8005b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fe9a 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba8:	d902      	bls.n	8005bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e002      	b.n	8005bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0204 	and.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e049      	b.n	8005d2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fb fe47 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f000 ff37 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e049      	b.n	8005dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb fe3c 	bl	80019d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fee0 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_TIM_PWM_Start+0x24>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e03c      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d109      	bne.n	8005e22 <HAL_TIM_PWM_Start+0x3e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e02f      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d109      	bne.n	8005e3c <HAL_TIM_PWM_Start+0x58>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e022      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d109      	bne.n	8005e56 <HAL_TIM_PWM_Start+0x72>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	e015      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d109      	bne.n	8005e70 <HAL_TIM_PWM_Start+0x8c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_PWM_Start+0x9e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e097      	b.n	8005fba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0xb6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e98:	e023      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xc6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea8:	e01b      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xd6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb8:	e013      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xe6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec8:	e00b      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xf6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed8:	e003      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fb42 	bl	8007574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a33      	ldr	r2, [pc, #204]	; (8005fc4 <HAL_TIM_PWM_Start+0x1e0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x13e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <HAL_TIM_PWM_Start+0x1e4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x13e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a30      	ldr	r2, [pc, #192]	; (8005fcc <HAL_TIM_PWM_Start+0x1e8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x13e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <HAL_TIM_PWM_Start+0x1ec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x13e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2d      	ldr	r2, [pc, #180]	; (8005fd4 <HAL_TIM_PWM_Start+0x1f0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_PWM_Start+0x142>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_TIM_PWM_Start+0x144>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a20      	ldr	r2, [pc, #128]	; (8005fc4 <HAL_TIM_PWM_Start+0x1e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x194>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d013      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x194>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <HAL_TIM_PWM_Start+0x1f4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x194>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <HAL_TIM_PWM_Start+0x1f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x194>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <HAL_TIM_PWM_Start+0x1e4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x194>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <HAL_TIM_PWM_Start+0x1e8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d115      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d015      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x1d2>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f90:	d011      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	e008      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e000      	b.n	8005fb8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	00010007 	.word	0x00010007

08005fe4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e049      	b.n	800608a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f841 	bl	8006092 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f000 fd88 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_IC_Start_IT+0x1e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	e023      	b.n	800610e <HAL_TIM_IC_Start_IT+0x66>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_IC_Start_IT+0x2e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	e01b      	b.n	800610e <HAL_TIM_IC_Start_IT+0x66>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_IC_Start_IT+0x3e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e013      	b.n	800610e <HAL_TIM_IC_Start_IT+0x66>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_IC_Start_IT+0x4e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e00b      	b.n	800610e <HAL_TIM_IC_Start_IT+0x66>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_IC_Start_IT+0x5e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e003      	b.n	800610e <HAL_TIM_IC_Start_IT+0x66>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800610c:	b2db      	uxtb	r3, r3
 800610e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <HAL_TIM_IC_Start_IT+0x78>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800611c:	b2db      	uxtb	r3, r3
 800611e:	e013      	b.n	8006148 <HAL_TIM_IC_Start_IT+0xa0>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b04      	cmp	r3, #4
 8006124:	d104      	bne.n	8006130 <HAL_TIM_IC_Start_IT+0x88>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e00b      	b.n	8006148 <HAL_TIM_IC_Start_IT+0xa0>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b08      	cmp	r3, #8
 8006134:	d104      	bne.n	8006140 <HAL_TIM_IC_Start_IT+0x98>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e003      	b.n	8006148 <HAL_TIM_IC_Start_IT+0xa0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006146:	b2db      	uxtb	r3, r3
 8006148:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d102      	bne.n	8006156 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006150:	7b7b      	ldrb	r3, [r7, #13]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d001      	beq.n	800615a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0d8      	b.n	800630c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_TIM_IC_Start_IT+0xc2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006168:	e023      	b.n	80061b2 <HAL_TIM_IC_Start_IT+0x10a>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d104      	bne.n	800617a <HAL_TIM_IC_Start_IT+0xd2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006178:	e01b      	b.n	80061b2 <HAL_TIM_IC_Start_IT+0x10a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d104      	bne.n	800618a <HAL_TIM_IC_Start_IT+0xe2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	e013      	b.n	80061b2 <HAL_TIM_IC_Start_IT+0x10a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d104      	bne.n	800619a <HAL_TIM_IC_Start_IT+0xf2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006198:	e00b      	b.n	80061b2 <HAL_TIM_IC_Start_IT+0x10a>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b10      	cmp	r3, #16
 800619e:	d104      	bne.n	80061aa <HAL_TIM_IC_Start_IT+0x102>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	e003      	b.n	80061b2 <HAL_TIM_IC_Start_IT+0x10a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_IC_Start_IT+0x11a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	e013      	b.n	80061ea <HAL_TIM_IC_Start_IT+0x142>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_IC_Start_IT+0x12a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_IC_Start_IT+0x142>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_IC_Start_IT+0x13a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061e0:	e003      	b.n	80061ea <HAL_TIM_IC_Start_IT+0x142>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d841      	bhi.n	8006274 <HAL_TIM_IC_Start_IT+0x1cc>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <HAL_TIM_IC_Start_IT+0x150>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	08006275 	.word	0x08006275
 8006200:	08006275 	.word	0x08006275
 8006204:	08006275 	.word	0x08006275
 8006208:	0800623f 	.word	0x0800623f
 800620c:	08006275 	.word	0x08006275
 8006210:	08006275 	.word	0x08006275
 8006214:	08006275 	.word	0x08006275
 8006218:	08006251 	.word	0x08006251
 800621c:	08006275 	.word	0x08006275
 8006220:	08006275 	.word	0x08006275
 8006224:	08006275 	.word	0x08006275
 8006228:	08006263 	.word	0x08006263
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0202 	orr.w	r2, r2, #2
 800623a:	60da      	str	r2, [r3, #12]
      break;
 800623c:	e01d      	b.n	800627a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0204 	orr.w	r2, r2, #4
 800624c:	60da      	str	r2, [r3, #12]
      break;
 800624e:	e014      	b.n	800627a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0208 	orr.w	r2, r2, #8
 800625e:	60da      	str	r2, [r3, #12]
      break;
 8006260:	e00b      	b.n	800627a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0210 	orr.w	r2, r2, #16
 8006270:	60da      	str	r2, [r3, #12]
      break;
 8006272:	e002      	b.n	800627a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	bf00      	nop
  }

  if (status == HAL_OK)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d144      	bne.n	800630a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2201      	movs	r2, #1
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f001 f973 	bl	8007574 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a20      	ldr	r2, [pc, #128]	; (8006314 <HAL_TIM_IC_Start_IT+0x26c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d018      	beq.n	80062ca <HAL_TIM_IC_Start_IT+0x222>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d013      	beq.n	80062ca <HAL_TIM_IC_Start_IT+0x222>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_TIM_IC_Start_IT+0x270>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_TIM_IC_Start_IT+0x222>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_TIM_IC_Start_IT+0x274>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_IC_Start_IT+0x222>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a19      	ldr	r2, [pc, #100]	; (8006320 <HAL_TIM_IC_Start_IT+0x278>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_TIM_IC_Start_IT+0x222>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a17      	ldr	r2, [pc, #92]	; (8006324 <HAL_TIM_IC_Start_IT+0x27c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d115      	bne.n	80062f6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b15      	ldr	r3, [pc, #84]	; (8006328 <HAL_TIM_IC_Start_IT+0x280>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d015      	beq.n	8006308 <HAL_TIM_IC_Start_IT+0x260>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e2:	d011      	beq.n	8006308 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	e008      	b.n	8006308 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e000      	b.n	800630a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40013400 	.word	0x40013400
 8006324:	40014000 	.word	0x40014000
 8006328:	00010007 	.word	0x00010007

0800632c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0202 	mvn.w	r2, #2
 8006358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fa fb3a 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fbc0 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fbc7 	bl	8006b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0204 	mvn.w	r2, #4
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fb10 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fb96 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fb9d 	bl	8006b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fa fae6 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fb6c 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fb73 	bl	8006b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa fabc 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fb42 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb49 	bl	8006b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10e      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fb1c 	bl	8006ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 f8fc 	bl	80076d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ea:	d10e      	bne.n	800650a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d107      	bne.n	800650a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f8ef 	bl	80076e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d10e      	bne.n	8006536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d107      	bne.n	8006536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800652e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 faf7 	bl	8006b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d10e      	bne.n	8006562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d107      	bne.n	8006562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f06f 0220 	mvn.w	r2, #32
 800655a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 f8af 	bl	80076c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006584:	2302      	movs	r3, #2
 8006586:	e088      	b.n	800669a <HAL_TIM_IC_ConfigChannel+0x130>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11b      	bne.n	80065ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6819      	ldr	r1, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f000 fe2d 	bl	8007204 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 020c 	bic.w	r2, r2, #12
 80065b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6999      	ldr	r1, [r3, #24]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	619a      	str	r2, [r3, #24]
 80065cc:	e060      	b.n	8006690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d11c      	bne.n	800660e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f000 fea5 	bl	8007332 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	619a      	str	r2, [r3, #24]
 800660c:	e040      	b.n	8006690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f000 fef2 	bl	800740c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69da      	ldr	r2, [r3, #28]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 020c 	bic.w	r2, r2, #12
 8006636:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69d9      	ldr	r1, [r3, #28]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	61da      	str	r2, [r3, #28]
 800664a:	e021      	b.n	8006690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d11c      	bne.n	800668c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f000 ff0f 	bl	8007484 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006674:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69d9      	ldr	r1, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	021a      	lsls	r2, r3, #8
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	61da      	str	r2, [r3, #28]
 800668a:	e001      	b.n	8006690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066be:	2302      	movs	r3, #2
 80066c0:	e0ff      	b.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b14      	cmp	r3, #20
 80066ce:	f200 80f0 	bhi.w	80068b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	0800672d 	.word	0x0800672d
 80066dc:	080068b3 	.word	0x080068b3
 80066e0:	080068b3 	.word	0x080068b3
 80066e4:	080068b3 	.word	0x080068b3
 80066e8:	0800676d 	.word	0x0800676d
 80066ec:	080068b3 	.word	0x080068b3
 80066f0:	080068b3 	.word	0x080068b3
 80066f4:	080068b3 	.word	0x080068b3
 80066f8:	080067af 	.word	0x080067af
 80066fc:	080068b3 	.word	0x080068b3
 8006700:	080068b3 	.word	0x080068b3
 8006704:	080068b3 	.word	0x080068b3
 8006708:	080067ef 	.word	0x080067ef
 800670c:	080068b3 	.word	0x080068b3
 8006710:	080068b3 	.word	0x080068b3
 8006714:	080068b3 	.word	0x080068b3
 8006718:	08006831 	.word	0x08006831
 800671c:	080068b3 	.word	0x080068b3
 8006720:	080068b3 	.word	0x080068b3
 8006724:	080068b3 	.word	0x080068b3
 8006728:	08006871 	.word	0x08006871
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fa90 	bl	8006c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0208 	orr.w	r2, r2, #8
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0204 	bic.w	r2, r2, #4
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	619a      	str	r2, [r3, #24]
      break;
 800676a:	e0a5      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb00 	bl	8006d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6999      	ldr	r1, [r3, #24]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	619a      	str	r2, [r3, #24]
      break;
 80067ac:	e084      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fb69 	bl	8006e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0208 	orr.w	r2, r2, #8
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0204 	bic.w	r2, r2, #4
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	61da      	str	r2, [r3, #28]
      break;
 80067ec:	e064      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fbd1 	bl	8006f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69d9      	ldr	r1, [r3, #28]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	021a      	lsls	r2, r3, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	61da      	str	r2, [r3, #28]
      break;
 800682e:	e043      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fc1a 	bl	8007070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0208 	orr.w	r2, r2, #8
 800684a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0204 	bic.w	r2, r2, #4
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800686e:	e023      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fc5e 	bl	8007138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	021a      	lsls	r2, r3, #8
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068b0:	e002      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]
      break;
 80068b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIM_ConfigClockSource+0x1c>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e0b6      	b.n	8006a56 <HAL_TIM_ConfigClockSource+0x18a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d03e      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	f200 8087 	bhi.w	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	f000 8086 	beq.w	8006a42 <HAL_TIM_ConfigClockSource+0x176>
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d87f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 800693c:	2b70      	cmp	r3, #112	; 0x70
 800693e:	d01a      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xaa>
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d87b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d050      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x11e>
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d877      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d03c      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0xfe>
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d873      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d058      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x13e>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d86f      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 800695c:	2b30      	cmp	r3, #48	; 0x30
 800695e:	d064      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15e>
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d86b      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 8006964:	2b20      	cmp	r3, #32
 8006966:	d060      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15e>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d867      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d05c      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15e>
 8006970:	2b10      	cmp	r3, #16
 8006972:	d05a      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x15e>
 8006974:	e062      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6899      	ldr	r1, [r3, #8]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f000 fdd5 	bl	8007534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	609a      	str	r2, [r3, #8]
      break;
 80069a2:	e04f      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6899      	ldr	r1, [r3, #8]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f000 fdbe 	bl	8007534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069c6:	609a      	str	r2, [r3, #8]
      break;
 80069c8:	e03c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 fc7c 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2150      	movs	r1, #80	; 0x50
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fd8b 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 80069e8:	e02c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6859      	ldr	r1, [r3, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f000 fcd8 	bl	80073ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2160      	movs	r1, #96	; 0x60
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fd7b 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006a08:	e01c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6859      	ldr	r1, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f000 fc5c 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2140      	movs	r1, #64	; 0x40
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd6b 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006a28:	e00c      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f000 fd62 	bl	80074fe <TIM_ITRx_SetConfig>
      break;
 8006a3a:	e003      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	e000      	b.n	8006a44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d831      	bhi.n	8006ad8 <HAL_TIM_ReadCapturedValue+0x78>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006ad9 	.word	0x08006ad9
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006abb 	.word	0x08006abb
 8006a90:	08006ad9 	.word	0x08006ad9
 8006a94:	08006ad9 	.word	0x08006ad9
 8006a98:	08006ad9 	.word	0x08006ad9
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006ad9 	.word	0x08006ad9
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006ad9 	.word	0x08006ad9
 8006aac:	08006acf 	.word	0x08006acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	60fb      	str	r3, [r7, #12]

      break;
 8006ab8:	e00f      	b.n	8006ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	60fb      	str	r3, [r7, #12]

      break;
 8006ac2:	e00a      	b.n	8006ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	60fb      	str	r3, [r7, #12]

      break;
 8006acc:	e005      	b.n	8006ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	60fb      	str	r3, [r7, #12]

      break;
 8006ad6:	e000      	b.n	8006ada <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006ad8:	bf00      	nop
  }

  return tmpreg;
 8006ada:	68fb      	ldr	r3, [r7, #12]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3c      	ldr	r2, [pc, #240]	; (8006c3c <TIM_Base_SetConfig+0x104>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00f      	beq.n	8006b70 <TIM_Base_SetConfig+0x38>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b56:	d00b      	beq.n	8006b70 <TIM_Base_SetConfig+0x38>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a39      	ldr	r2, [pc, #228]	; (8006c40 <TIM_Base_SetConfig+0x108>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_Base_SetConfig+0x38>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a38      	ldr	r2, [pc, #224]	; (8006c44 <TIM_Base_SetConfig+0x10c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_Base_SetConfig+0x38>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a37      	ldr	r2, [pc, #220]	; (8006c48 <TIM_Base_SetConfig+0x110>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d108      	bne.n	8006b82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <TIM_Base_SetConfig+0x104>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01b      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d017      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <TIM_Base_SetConfig+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a29      	ldr	r2, [pc, #164]	; (8006c44 <TIM_Base_SetConfig+0x10c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00f      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a28      	ldr	r2, [pc, #160]	; (8006c48 <TIM_Base_SetConfig+0x110>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <TIM_Base_SetConfig+0x114>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <TIM_Base_SetConfig+0x118>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_Base_SetConfig+0x8a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <TIM_Base_SetConfig+0x11c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d108      	bne.n	8006bd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <TIM_Base_SetConfig+0x104>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00f      	beq.n	8006c20 <TIM_Base_SetConfig+0xe8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <TIM_Base_SetConfig+0x110>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0xe8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a10      	ldr	r2, [pc, #64]	; (8006c4c <TIM_Base_SetConfig+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0xe8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a0f      	ldr	r2, [pc, #60]	; (8006c50 <TIM_Base_SetConfig+0x118>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0xe8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <TIM_Base_SetConfig+0x11c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d103      	bne.n	8006c28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	615a      	str	r2, [r3, #20]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40013400 	.word	0x40013400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800

08006c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f023 0201 	bic.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f023 0302 	bic.w	r3, r3, #2
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <TIM_OC1_SetConfig+0x10c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_OC1_SetConfig+0x80>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <TIM_OC1_SetConfig+0x110>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_OC1_SetConfig+0x80>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <TIM_OC1_SetConfig+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC1_SetConfig+0x80>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <TIM_OC1_SetConfig+0x118>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC1_SetConfig+0x80>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a28      	ldr	r2, [pc, #160]	; (8006d74 <TIM_OC1_SetConfig+0x11c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d10c      	bne.n	8006cf2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0308 	bic.w	r3, r3, #8
 8006cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 0304 	bic.w	r3, r3, #4
 8006cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <TIM_OC1_SetConfig+0x10c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_OC1_SetConfig+0xc2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	; (8006d68 <TIM_OC1_SetConfig+0x110>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_OC1_SetConfig+0xc2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a19      	ldr	r2, [pc, #100]	; (8006d6c <TIM_OC1_SetConfig+0x114>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_OC1_SetConfig+0xc2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <TIM_OC1_SetConfig+0x118>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_OC1_SetConfig+0xc2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <TIM_OC1_SetConfig+0x11c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d111      	bne.n	8006d3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0210 	bic.w	r2, r3, #16
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0320 	bic.w	r3, r3, #32
 8006dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <TIM_OC2_SetConfig+0x100>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC2_SetConfig+0x6c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a27      	ldr	r2, [pc, #156]	; (8006e7c <TIM_OC2_SetConfig+0x104>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10d      	bne.n	8006e00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <TIM_OC2_SetConfig+0x100>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00f      	beq.n	8006e28 <TIM_OC2_SetConfig+0xb0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1c      	ldr	r2, [pc, #112]	; (8006e7c <TIM_OC2_SetConfig+0x104>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00b      	beq.n	8006e28 <TIM_OC2_SetConfig+0xb0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <TIM_OC2_SetConfig+0x108>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d007      	beq.n	8006e28 <TIM_OC2_SetConfig+0xb0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <TIM_OC2_SetConfig+0x10c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC2_SetConfig+0xb0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <TIM_OC2_SetConfig+0x110>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d113      	bne.n	8006e50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <TIM_OC3_SetConfig+0xfc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_OC3_SetConfig+0x6a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a26      	ldr	r2, [pc, #152]	; (8006f8c <TIM_OC3_SetConfig+0x100>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d10d      	bne.n	8006f12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <TIM_OC3_SetConfig+0xfc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00f      	beq.n	8006f3a <TIM_OC3_SetConfig+0xae>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <TIM_OC3_SetConfig+0x100>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00b      	beq.n	8006f3a <TIM_OC3_SetConfig+0xae>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <TIM_OC3_SetConfig+0x104>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <TIM_OC3_SetConfig+0xae>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	; (8006f94 <TIM_OC3_SetConfig+0x108>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_OC3_SetConfig+0xae>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <TIM_OC3_SetConfig+0x10c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d113      	bne.n	8006f62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	621a      	str	r2, [r3, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40013400 	.word	0x40013400
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800

08006f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <TIM_OC4_SetConfig+0xc0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_OC4_SetConfig+0x84>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a17      	ldr	r2, [pc, #92]	; (8007060 <TIM_OC4_SetConfig+0xc4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_OC4_SetConfig+0x84>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a16      	ldr	r2, [pc, #88]	; (8007064 <TIM_OC4_SetConfig+0xc8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC4_SetConfig+0x84>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <TIM_OC4_SetConfig+0xcc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC4_SetConfig+0x84>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a14      	ldr	r2, [pc, #80]	; (800706c <TIM_OC4_SetConfig+0xd0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d109      	bne.n	8007034 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	019b      	lsls	r3, r3, #6
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a17      	ldr	r2, [pc, #92]	; (8007124 <TIM_OC5_SetConfig+0xb4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_OC5_SetConfig+0x7a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <TIM_OC5_SetConfig+0xb8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_OC5_SetConfig+0x7a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a15      	ldr	r2, [pc, #84]	; (800712c <TIM_OC5_SetConfig+0xbc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_OC5_SetConfig+0x7a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a14      	ldr	r2, [pc, #80]	; (8007130 <TIM_OC5_SetConfig+0xc0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_OC5_SetConfig+0x7a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a13      	ldr	r2, [pc, #76]	; (8007134 <TIM_OC5_SetConfig+0xc4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d109      	bne.n	80070fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	621a      	str	r2, [r3, #32]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800717e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	051b      	lsls	r3, r3, #20
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <TIM_OC6_SetConfig+0xb8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_OC6_SetConfig+0x7c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <TIM_OC6_SetConfig+0xbc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_OC6_SetConfig+0x7c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a16      	ldr	r2, [pc, #88]	; (80071f8 <TIM_OC6_SetConfig+0xc0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_OC6_SetConfig+0x7c>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a15      	ldr	r2, [pc, #84]	; (80071fc <TIM_OC6_SetConfig+0xc4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC6_SetConfig+0x7c>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a14      	ldr	r2, [pc, #80]	; (8007200 <TIM_OC6_SetConfig+0xc8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d109      	bne.n	80071c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	029b      	lsls	r3, r3, #10
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40013400 	.word	0x40013400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <TIM_TI1_SetConfig+0xbc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <TIM_TI1_SetConfig+0x56>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007238:	d00f      	beq.n	800725a <TIM_TI1_SetConfig+0x56>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a21      	ldr	r2, [pc, #132]	; (80072c4 <TIM_TI1_SetConfig+0xc0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00b      	beq.n	800725a <TIM_TI1_SetConfig+0x56>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <TIM_TI1_SetConfig+0xc4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d007      	beq.n	800725a <TIM_TI1_SetConfig+0x56>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <TIM_TI1_SetConfig+0xc8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_TI1_SetConfig+0x56>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <TIM_TI1_SetConfig+0xcc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <TIM_TI1_SetConfig+0x5a>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <TIM_TI1_SetConfig+0x5c>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f023 0303 	bic.w	r3, r3, #3
 800726a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e003      	b.n	800727e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	b2db      	uxtb	r3, r3
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f023 030a 	bic.w	r3, r3, #10
 8007298:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 030a 	and.w	r3, r3, #10
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	bf00      	nop
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40012c00 	.word	0x40012c00
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40014000 	.word	0x40014000

080072d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 030a 	bic.w	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f023 0210 	bic.w	r2, r3, #16
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	031b      	lsls	r3, r3, #12
 8007376:	b29b      	uxth	r3, r3
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007384:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	621a      	str	r2, [r3, #32]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	f023 0210 	bic.w	r2, r3, #16
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	031b      	lsls	r3, r3, #12
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	621a      	str	r2, [r3, #32]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 0303 	bic.w	r3, r3, #3
 8007438:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	b2db      	uxtb	r3, r3
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800745c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	621a      	str	r2, [r3, #32]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	031b      	lsls	r3, r3, #12
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	031b      	lsls	r3, r3, #12
 80074dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	f043 0307 	orr.w	r3, r3, #7
 8007520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800754e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	431a      	orrs	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2201      	movs	r2, #1
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1a      	ldr	r2, [r3, #32]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	43db      	mvns	r3, r3
 8007596:	401a      	ands	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e063      	b.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2b      	ldr	r2, [pc, #172]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1b      	ldr	r2, [pc, #108]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d013      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a18      	ldr	r2, [pc, #96]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a13      	ldr	r2, [pc, #76]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10c      	bne.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40014000 	.word	0x40014000

080076c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007704:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	b29b      	uxth	r3, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	b29b      	uxth	r3, r3
 800771a:	4013      	ands	r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007732:	b084      	sub	sp, #16
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	f107 0014 	add.w	r0, r7, #20
 8007740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	b004      	add	sp, #16
 8007772:	4770      	bx	lr

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	; (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	; (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	; (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	; (80077b8 <__libc_init_array+0x44>)
 8007788:	f000 f820 	bl	80077cc <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	08007830 	.word	0x08007830
 80077b0:	08007830 	.word	0x08007830
 80077b4:	08007830 	.word	0x08007830
 80077b8:	08007834 	.word	0x08007834

080077bc <memset>:
 80077bc:	4402      	add	r2, r0
 80077be:	4603      	mov	r3, r0
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d100      	bne.n	80077c6 <memset+0xa>
 80077c4:	4770      	bx	lr
 80077c6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ca:	e7f9      	b.n	80077c0 <memset+0x4>

080077cc <_init>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr

080077d8 <_fini>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr
