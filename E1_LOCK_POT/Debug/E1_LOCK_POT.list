
E1_LOCK_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef4  08007ef4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ef4  08007ef4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ef4  08007ef4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000534  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000540  20000540  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b31f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003975  00000000  00000000  0003b35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00040298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d2a  00000000  00000000  000416a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022c46  00000000  00000000  000653d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c76db  00000000  00000000  00088018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f6f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b70  00000000  00000000  0014f744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e98 	.word	0x08007e98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007e98 	.word	0x08007e98

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC1_Init+0xdc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a22:	f001 f821 	bl	8001a68 <HAL_ADC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 fcf4 	bl	8001418 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a3c:	f001 ff3c 	bl	80028b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a46:	f000 fce7 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_ADC1_Init+0xdc>)
 8000a68:	f001 fc3a 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a72:	f000 fcd1 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000028 	.word	0x20000028

08000a84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aa4:	d124      	bne.n	8000af0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_ADC_MspInit+0x74>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ada:	2303      	movs	r3, #3
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f002 fa68 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000

08000afc <getADCValue>:

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

uint32_t getADCValue() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	uint32_t adcValue = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1); // Start ADC1 (or the appropriate ADCx for your specific microcontroller)
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <getADCValue+0x38>)
 8000b08:	f001 f98e 	bl	8001e28 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <getADCValue+0x38>)
 8000b10:	f001 fad6 	bl	80020c0 <HAL_ADC_PollForConversion>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d103      	bne.n	8000b22 <getADCValue+0x26>
		adcValue = HAL_ADC_GetValue(&hadc1); // Read the ADC value
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <getADCValue+0x38>)
 8000b1c:	f001 fbd2 	bl	80022c4 <HAL_ADC_GetValue>
 8000b20:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <getADCValue+0x38>)
 8000b24:	f001 fa96 	bl	8002054 <HAL_ADC_Stop>
	return adcValue;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000028 	.word	0x20000028

08000b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_GPIO_Init+0xf4>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|LD3_Pin
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f64f 7188 	movw	r1, #65416	; 0xff88
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_GPIO_Init+0xf8>)
 8000bce:	f002 fb71 	bl	80032b4 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000bd2:	2337      	movs	r3, #55	; 0x37
 8000bd4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xf8>)
 8000be8:	f002 f9ea 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PE7 PE8 PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|LD3_Pin
 8000bec:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000bf0:	617b      	str	r3, [r7, #20]
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <MX_GPIO_Init+0xf8>)
 8000c06:	f002 f9db 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f002 f9ce 	bl	8002fc0 <HAL_GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48001000 	.word	0x48001000

08000c34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <MX_I2C1_Init+0x78>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_I2C1_Init+0x7c>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c70:	f002 fb38 	bl	80032e4 <HAL_I2C_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7a:	f000 fbcd 	bl	8001418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c82:	f003 f8a5 	bl	8003dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fbc4 	bl	8001418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_I2C1_Init+0x74>)
 8000c94:	f003 f8e7 	bl	8003e66 <HAL_I2CEx_ConfigDigitalFilter>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fbbb 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	2000090e 	.word	0x2000090e

08000cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d127      	bne.n	8000d26 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cee:	23c0      	movs	r3, #192	; 0xc0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000d0a:	f002 f959 	bl	8002fc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <main>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0



	/* Initialise all peripherals */
	Init_Peripherals();
 8000d40:	f000 f82e 	bl	8000da0 <Init_Peripherals>

	run_safecracker();
 8000d44:	f000 f940 	bl	8000fc8 <run_safecracker>
	while (1) {}
 8000d48:	e7fe      	b.n	8000d48 <main+0xc>

08000d4a <move_motor>:
 *  Created on: May 24, 2023
 *      Author: haz
 */
#include "motor.h"

volatile uint16_t move_motor(volatile uint16_t vertical_PWM, uint32_t angle) {
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	6039      	str	r1, [r7, #0]
 8000d54:	80fb      	strh	r3, [r7, #6]
	while (vertical_PWM != angle) {
 8000d56:	e015      	b.n	8000d84 <move_motor+0x3a>
		if (vertical_PWM < angle) {
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d905      	bls.n	8000d70 <move_motor+0x26>
			vertical_PWM += 5;
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3305      	adds	r3, #5
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	80fb      	strh	r3, [r7, #6]
 8000d6e:	e004      	b.n	8000d7a <move_motor+0x30>
		} else {
			vertical_PWM -= 5;
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3b05      	subs	r3, #5
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	80fb      	strh	r3, [r7, #6]
		}
		TIM2->CCR1 = vertical_PWM;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
	while (vertical_PWM != angle) {
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d1e3      	bne.n	8000d58 <move_motor+0xe>
	}
	return vertical_PWM;
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	b29b      	uxth	r3, r3
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <Init_Peripherals>:
#include "peripherals.h"

void Init_Peripherals() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000da4:	f000 fdd6 	bl	8001954 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000da8:	f000 face 	bl	8001348 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dac:	f7ff fec4 	bl	8000b38 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000db0:	f7ff ff40 	bl	8000c34 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000db4:	f000 f9e6 	bl	8001184 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000db8:	f000 fd3c 	bl	8001834 <MX_USB_PCD_Init>
	MX_TIM2_Init();
 8000dbc:	f000 fbba 	bl	8001534 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000dc0:	f000 fb42 	bl	8001448 <MX_TIM1_Init>
	MX_ADC1_Init();
 8000dc4:	f7ff fdee 	bl	80009a4 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000dc8:	f000 fcc0 	bl	800174c <MX_USART1_UART_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <Init_Peripherals+0x68>)
 8000dd0:	f004 fee6 	bl	8005ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <Init_Peripherals+0x68>)
 8000dd8:	f004 fee2 	bl	8005ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <Init_Peripherals+0x6c>)
 8000de0:	f005 f840 	bl	8005e64 <HAL_TIM_IC_Start_IT>
	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfc:	6013      	str	r3, [r2, #0]
	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.
	initialise_ptu_i2c(&hi2c1);
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <Init_Peripherals+0x70>)
 8000e00:	f000 f808 	bl	8000e14 <initialise_ptu_i2c>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000017c 	.word	0x2000017c
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	20000078 	.word	0x20000078

08000e14 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0d2      	sub	sp, #328	; 0x148
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e22:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e52:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000e56:	230a      	movs	r3, #10
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f207 1319 	addw	r3, r7, #281	; 0x119
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	2220      	movs	r2, #32
 8000e68:	21d2      	movs	r1, #210	; 0xd2
 8000e6a:	6800      	ldr	r0, [r0, #0]
 8000e6c:	f002 faca 	bl	8003404 <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000e76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e7a:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000e7e:	230a      	movs	r3, #10
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2221      	movs	r2, #33	; 0x21
 8000e90:	21d2      	movs	r1, #210	; 0xd2
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	f002 fab6 	bl	8003404 <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e9c:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000ea0:	230a      	movs	r3, #10
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2222      	movs	r2, #34	; 0x22
 8000eb2:	21d2      	movs	r1, #210	; 0xd2
 8000eb4:	6800      	ldr	r0, [r0, #0]
 8000eb6:	f002 faa5 	bl	8003404 <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 8000eba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ebe:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	f207 131b 	addw	r3, r7, #283	; 0x11b
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	21d3      	movs	r1, #211	; 0xd3
 8000ed6:	6800      	ldr	r0, [r0, #0]
 8000ed8:	f002 fba8 	bl	800362c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 8000edc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ee0:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	2221      	movs	r2, #33	; 0x21
 8000ef6:	21d3      	movs	r1, #211	; 0xd3
 8000ef8:	6800      	ldr	r0, [r0, #0]
 8000efa:	f002 fb97 	bl	800362c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8000f0a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8000f24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <initialise_ptu_i2c+0x160>)
 8000f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f32:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000f36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f3a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000f42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f46:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	f107 030b 	add.w	r3, r7, #11
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	21c4      	movs	r1, #196	; 0xc4
 8000f5e:	6800      	ldr	r0, [r0, #0]
 8000f60:	f002 fa50 	bl	8003404 <HAL_I2C_Mem_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8000f6a:	bf00      	nop
 8000f6c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08007eb0 	.word	0x08007eb0

08000f78 <generate_target_angles>:
#include "safecracker.h"

void generate_target_angles(uint32_t angles_degrees[5]) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < 5; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e011      	b.n	8000faa <generate_target_angles+0x32>
		angles_degrees[i] = (SysTick->VAL % 181); // generate a random number within the loop
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <generate_target_angles+0x48>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4419      	add	r1, r3
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <generate_target_angles+0x4c>)
 8000f94:	fba3 0302 	umull	r0, r3, r3, r2
 8000f98:	09db      	lsrs	r3, r3, #7
 8000f9a:	20b5      	movs	r0, #181	; 0xb5
 8000f9c:	fb00 f303 	mul.w	r3, r0, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	600b      	str	r3, [r1, #0]
	for (uint32_t i = 0; i < 5; i++) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d9ea      	bls.n	8000f86 <generate_target_angles+0xe>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010
 8000fc4:	b509e68b 	.word	0xb509e68b

08000fc8 <run_safecracker>:

void run_safecracker() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
	volatile uint16_t vertical_PWM = 1000;
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	837b      	strh	r3, [r7, #26]
	uint8_t current_state = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t led_on = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint32_t led_timestamp = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t state_timestamp = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t angles_degrees[NUM_ENTRIES];
	uint32_t DEGREES_TO_SERVO = 1900 / 180;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t target_angle, robot_angle;
	generate_target_angles(angles_degrees);
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffc2 	bl	8000f78 <generate_target_angles>
	// delay for initialisation of the lidar
	while (current_state < NUM_ENTRIES) {
 8000ff4:	e0b2      	b.n	800115c <run_safecracker+0x194>
		robot_angle = angles_degrees[current_state]
 8000ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	3338      	adds	r3, #56	; 0x38
 8000ffe:	443b      	add	r3, r7
 8001000:	f853 3c34 	ldr.w	r3, [r3, #-52]
				* DEGREES_TO_SERVO+ ROBOT_ZERO_ANGLE;
 8001004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001006:	fb02 f303 	mul.w	r3, r2, r3
		robot_angle = angles_degrees[current_state]
 800100a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fd04 	bl	8001a20 <HAL_Delay>
		vertical_PWM = move_motor(vertical_PWM, robot_angle);
 8001018:	8b7b      	ldrh	r3, [r7, #26]
 800101a:	b29b      	uxth	r3, r3
 800101c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe93 	bl	8000d4a <move_motor>
 8001024:	4603      	mov	r3, r0
 8001026:	837b      	strh	r3, [r7, #26]
		HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f000 fcf8 	bl	8001a20 <HAL_Delay>
		vertical_PWM = move_motor(vertical_PWM, RESET_ANGLE);
 8001030:	8b7b      	ldrh	r3, [r7, #26]
 8001032:	b29b      	uxth	r3, r3
 8001034:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe86 	bl	8000d4a <move_motor>
 800103e:	4603      	mov	r3, r0
 8001040:	837b      	strh	r3, [r7, #26]
		uint32_t adcValue = getADCValue();
 8001042:	f7ff fd5b 	bl	8000afc <getADCValue>
 8001046:	6238      	str	r0, [r7, #32]
		target_angle = angles_degrees[current_state]
 8001048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	3338      	adds	r3, #56	; 0x38
 8001050:	443b      	add	r3, r7
 8001052:	f853 3c34 	ldr.w	r3, [r3, #-52]
				* (UPPER_CALIBRATION - LOWER_CALIBRATION)
 8001056:	f640 2228 	movw	r2, #2600	; 0xa28
 800105a:	fb02 f303 	mul.w	r3, r2, r3
				/ 180.0+ LOWER_CALIBRATION;
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9f4 	bl	800044c <__aeabi_ui2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <run_safecracker+0x1a8>)
 800106a:	f7ff fb93 	bl	8000794 <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <run_safecracker+0x1ac>)
 800107c:	f7ff f8aa 	bl	80001d4 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
		target_angle = angles_degrees[current_state]
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fc6c 	bl	8000964 <__aeabi_d2uiz>
 800108c:	4603      	mov	r3, r0
 800108e:	61fb      	str	r3, [r7, #28]
		if (abs(adcValue - target_angle) <= TOLERANCE) {
 8001090:	6a3a      	ldr	r2, [r7, #32]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800109a:	db37      	blt.n	800110c <run_safecracker+0x144>
 800109c:	6a3a      	ldr	r2, [r7, #32]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010a6:	dc31      	bgt.n	800110c <run_safecracker+0x144>
			if (state_timestamp == 0) {
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <run_safecracker+0xee>
				state_timestamp = HAL_GetTick();
 80010ae:	f000 fcab 	bl	8001a08 <HAL_GetTick>
 80010b2:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (state_timestamp == 0) {
 80010b4:	e02d      	b.n	8001112 <run_safecracker+0x14a>
			} else if (HAL_GetTick() - state_timestamp > 1000) {
 80010b6:	f000 fca7 	bl	8001a08 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c4:	d925      	bls.n	8001112 <run_safecracker+0x14a>
				current_state++;
 80010c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010ca:	3301      	adds	r3, #1
 80010cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				state_timestamp = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				led_timestamp = HAL_GetTick();
 80010d4:	f000 fc98 	bl	8001a08 <HAL_GetTick>
 80010d8:	6338      	str	r0, [r7, #48]	; 0x30
				if (current_state == 5) {
 80010da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d110      	bne.n	8001104 <run_safecracker+0x13c>
					HAL_GPIO_WritePin(FINISHED_LOCK_GPIO_PORT,
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	4823      	ldr	r0, [pc, #140]	; (8001178 <run_safecracker+0x1b0>)
 80010ea:	f002 f8e3 	bl	80032b4 <HAL_GPIO_WritePin>
							FINISHED_LOCK_PIN, GPIO_PIN_SET);
					HAL_UART_Transmit(&huart1, (uint8_t*) "]", strlen("]"),
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f2:	2201      	movs	r2, #1
 80010f4:	4921      	ldr	r1, [pc, #132]	; (800117c <run_safecracker+0x1b4>)
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <run_safecracker+0x1b8>)
 80010f8:	f006 f9f2 	bl	80074e0 <HAL_UART_Transmit>
							HAL_MAX_DELAY);
					led_on = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8001102:	e031      	b.n	8001168 <run_safecracker+0x1a0>
				} else {
					led_on = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (state_timestamp == 0) {
 800110a:	e002      	b.n	8001112 <run_safecracker+0x14a>
				}
			}
		} else {
			state_timestamp = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001110:	e000      	b.n	8001114 <run_safecracker+0x14c>
			if (state_timestamp == 0) {
 8001112:	bf00      	nop
		}
		if (led_on) {
 8001114:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01a      	beq.n	8001152 <run_safecracker+0x18a>
			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET); // Turn on the LED
 800111c:	2201      	movs	r2, #1
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <run_safecracker+0x1b0>)
 8001122:	f002 f8c7 	bl	80032b4 <HAL_GPIO_WritePin>
			if (led_on == 1 && HAL_GetTick() - led_timestamp >= 3000) // Check if 3 seconds have passed and led_on is not 2
 8001126:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800112a:	2b01      	cmp	r3, #1
 800112c:	d116      	bne.n	800115c <run_safecracker+0x194>
 800112e:	f000 fc6b 	bl	8001a08 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800113c:	4293      	cmp	r3, r2
 800113e:	d90d      	bls.n	800115c <run_safecracker+0x194>
					{
				led_on = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 8001146:	2200      	movs	r2, #0
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <run_safecracker+0x1b0>)
 800114c:	f002 f8b2 	bl	80032b4 <HAL_GPIO_WritePin>
 8001150:	e004      	b.n	800115c <run_safecracker+0x194>
			}
		} else {
			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn off the LED
 8001152:	2200      	movs	r2, #0
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <run_safecracker+0x1b0>)
 8001158:	f002 f8ac 	bl	80032b4 <HAL_GPIO_WritePin>
	while (current_state < NUM_ENTRIES) {
 800115c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001160:	2b04      	cmp	r3, #4
 8001162:	f67f af48 	bls.w	8000ff6 <run_safecracker+0x2e>
		}
	}
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	; 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40668000 	.word	0x40668000
 8001174:	4092c000 	.word	0x4092c000
 8001178:	48001000 	.word	0x48001000
 800117c:	08007eb8 	.word	0x08007eb8
 8001180:	200001c8 	.word	0x200001c8

08001184 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_SPI1_Init+0x74>)
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <MX_SPI1_Init+0x78>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_SPI1_Init+0x74>)
 8001190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_SPI1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI1_Init+0x74>)
 800119e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011de:	2208      	movs	r2, #8
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_SPI1_Init+0x74>)
 80011e4:	f004 fb82 	bl	80058ec <HAL_SPI_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 f913 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000cc 	.word	0x200000cc
 80011fc:	40013000 	.word	0x40013000

08001200 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_SPI_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d128      	bne.n	8001274 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_SPI_MspInit+0x80>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_SPI_MspInit+0x80>)
 8001228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_SPI_MspInit+0x80>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_SPI_MspInit+0x80>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_SPI_MspInit+0x80>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_SPI_MspInit+0x80>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001252:	23e0      	movs	r3, #224	; 0xe0
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001262:	2305      	movs	r3, #5
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f001 fea6 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013000 	.word	0x40013000
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_MspInit+0x44>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_MspInit+0x44>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x44>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x44>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ba:	2007      	movs	r0, #7
 80012bc:	f001 fe3e 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 fb62 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <TIM1_CC_IRQHandler+0x10>)
 8001326:	f004 fedf 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000130 	.word	0x20000130

08001334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM2_IRQHandler+0x10>)
 800133a:	f004 fed5 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000017c 	.word	0x2000017c

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b09e      	sub	sp, #120	; 0x78
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f006 fd96 	bl	8007e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	223c      	movs	r2, #60	; 0x3c
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fd88 	bl	8007e88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001378:	2303      	movs	r3, #3
 800137a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800137c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001380:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138a:	2310      	movs	r3, #16
 800138c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001396:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001398:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800139c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fe7e 	bl	80040a4 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013ae:	f000 f833 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 fea6 	bl	8005120 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013da:	f000 f81d 	bl	8001418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <SystemClock_Config+0xcc>)
 80013e0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80013f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 f8c5 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001408:	f000 f806 	bl	8001418 <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3778      	adds	r7, #120	; 0x78
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	000210a1 	.word	0x000210a1

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <MX_TIM1_Init+0xe4>)
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <MX_TIM1_Init+0xe8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <MX_TIM1_Init+0xe4>)
 800147c:	222f      	movs	r2, #47	; 0x2f
 800147e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MX_TIM1_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <MX_TIM1_Init+0xe4>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_TIM1_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_TIM1_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <MX_TIM1_Init+0xe4>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a0:	4822      	ldr	r0, [pc, #136]	; (800152c <MX_TIM1_Init+0xe4>)
 80014a2:	f004 face 	bl	8005a42 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80014ac:	f7ff ffb4 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	4619      	mov	r1, r3
 80014bc:	481b      	ldr	r0, [pc, #108]	; (800152c <MX_TIM1_Init+0xe4>)
 80014be:	f005 f8e3 	bl	8006688 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80014c8:	f7ff ffa6 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <MX_TIM1_Init+0xe4>)
 80014ce:	f004 fc67 	bl	8005da0 <HAL_TIM_IC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014d8:	f7ff ff9e 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <MX_TIM1_Init+0xe4>)
 80014f0:	f005 ff0a 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80014fa:	f7ff ff8d 	bl	8001418 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014fe:	230a      	movs	r3, #10
 8001500:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM1_Init+0xe4>)
 8001516:	f004 ff06 	bl	8006326 <HAL_TIM_IC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001520:	f7ff ff7a 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000130 	.word	0x20000130
 8001530:	40012c00 	.word	0x40012c00

08001534 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <MX_TIM2_Init+0xc8>)
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_TIM2_Init+0xc8>)
 8001562:	222f      	movs	r2, #47	; 0x2f
 8001564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <MX_TIM2_Init+0xc8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <MX_TIM2_Init+0xc8>)
 800156e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM2_Init+0xc8>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_TIM2_Init+0xc8>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_TIM2_Init+0xc8>)
 8001582:	f004 fab5 	bl	8005af0 <HAL_TIM_PWM_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800158c:	f7ff ff44 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <MX_TIM2_Init+0xc8>)
 80015a0:	f005 feb2 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015aa:	f7ff ff35 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ae:	2360      	movs	r3, #96	; 0x60
 80015b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80015b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_TIM2_Init+0xc8>)
 80015c8:	f004 ff4a 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015d2:	f7ff ff21 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	2204      	movs	r2, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <MX_TIM2_Init+0xc8>)
 80015de:	f004 ff3f 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80015e8:	f7ff ff16 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <MX_TIM2_Init+0xc8>)
 80015ee:	f000 f877 	bl	80016e0 <HAL_TIM_MspPostInit>

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000017c 	.word	0x2000017c

08001600 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_TIM_Base_MspInit+0x90>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d131      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 8001628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_Base_MspInit+0x94>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001664:	2306      	movs	r3, #6
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f001 fca5 	bl	8002fc0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201b      	movs	r0, #27
 800167c:	f001 fc69 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001680:	201b      	movs	r0, #27
 8001682:	f001 fc82 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_TIM_PWM_MspInit+0x44>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_PWM_MspInit+0x44>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_PWM_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201c      	movs	r0, #28
 80016c8:	f001 fc43 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016cc:	201c      	movs	r0, #28
 80016ce:	f001 fc5c 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001700:	d11d      	bne.n	800173e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_TIM_MspPostInit+0x68>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_TIM_MspPostInit+0x68>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_TIM_MspPostInit+0x68>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800171a:	f248 0302 	movw	r3, #32770	; 0x8002
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f001 fc41 	bl	8002fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_USART1_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART1_UART_Init+0x58>)
 8001790:	f005 fe58 	bl	8007444 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f7ff fe3d 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200001c8 	.word	0x200001c8
 80017a8:	40013800 	.word	0x40013800

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_UART_MspInit+0x7c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d127      	bne.n	800181e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_UART_MspInit+0x80>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_UART_MspInit+0x80>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0x80>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0x80>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_MspInit+0x80>)
 80017ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017f0:	6153      	str	r3, [r2, #20]
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_UART_MspInit+0x80>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017fe:	2330      	movs	r3, #48	; 0x30
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800180e:	2307      	movs	r3, #7
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_UART_MspInit+0x84>)
 800181a:	f001 fbd1 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40013800 	.word	0x40013800
 800182c:	40021000 	.word	0x40021000
 8001830:	48000800 	.word	0x48000800

08001834 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <MX_USB_PCD_Init+0x40>)
 800183c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 8001840:	2208      	movs	r2, #8
 8001842:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 8001846:	2202      	movs	r2, #2
 8001848:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 800184c:	2202      	movs	r2, #2
 800184e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USB_PCD_Init+0x3c>)
 800185e:	f002 fb4e 	bl	8003efe <HAL_PCD_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001868:	f7ff fdd6 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000250 	.word	0x20000250
 8001874:	40005c00 	.word	0x40005c00

08001878 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_PCD_MspInit+0x80>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d129      	bne.n	80018ee <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_PCD_MspInit+0x84>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018c4:	230e      	movs	r3, #14
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f001 fb75 	bl	8002fc0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_PCD_MspInit+0x84>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40005c00 	.word	0x40005c00
 80018fc:	40021000 	.word	0x40021000

08001900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001904:	f7ff fd8e 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <LoopForever+0x6>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	; (8001940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <LoopForever+0xe>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <LoopForever+0x16>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f006 fa87 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001932:	f7ff fa03 	bl	8000d3c <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001938:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001944:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 8001948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800194c:	20000540 	.word	0x20000540

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x28>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f001 fae9 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fc88 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40022000 	.word	0x40022000

08001980 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fb01 	bl	8002fa6 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f001 fac9 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	2000053c 	.word	0x2000053c

08001a08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000053c 	.word	0x2000053c

08001a20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09a      	sub	sp, #104	; 0x68
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e1c9      	b.n	8001e1c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d176      	bne.n	8001b88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d152      	bne.n	8001b48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe ffe1 	bl	8000a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d13b      	bne.n	8001b48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 f847 	bl	8002b64 <ADC_Disable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d12f      	bne.n	8001b48 <HAL_ADC_Init+0xe0>
 8001ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12b      	bne.n	8001b48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b24:	4b86      	ldr	r3, [pc, #536]	; (8001d40 <HAL_ADC_Init+0x2d8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a86      	ldr	r2, [pc, #536]	; (8001d44 <HAL_ADC_Init+0x2dc>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9a      	lsrs	r2, r3, #18
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b64:	d110      	bne.n	8001b88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f023 0312 	bic.w	r3, r3, #18
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 8136 	bne.w	8001e02 <HAL_ADC_Init+0x39a>
 8001b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8131 	bne.w	8001e02 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8129 	bne.w	8001e02 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d004      	beq.n	8001bd4 <HAL_ADC_Init+0x16c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <HAL_ADC_Init+0x2e0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_Init+0x170>
 8001bd4:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_ADC_Init+0x2e4>)
 8001bd6:	e000      	b.n	8001bda <HAL_ADC_Init+0x172>
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_ADC_Init+0x2e8>)
 8001bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d102      	bne.n	8001bec <HAL_ADC_Init+0x184>
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_ADC_Init+0x2e0>)
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e01a      	b.n	8001c22 <HAL_ADC_Init+0x1ba>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_ADC_Init+0x2e0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d103      	bne.n	8001bfe <HAL_ADC_Init+0x196>
 8001bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e011      	b.n	8001c22 <HAL_ADC_Init+0x1ba>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_ADC_Init+0x2ec>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <HAL_ADC_Init+0x1a6>
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_ADC_Init+0x2f0>)
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e009      	b.n	8001c22 <HAL_ADC_Init+0x1ba>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_ADC_Init+0x2f0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <HAL_ADC_Init+0x1b6>
 8001c18:	4b4e      	ldr	r3, [pc, #312]	; (8001d54 <HAL_ADC_Init+0x2ec>)
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e001      	b.n	8001c22 <HAL_ADC_Init+0x1ba>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <HAL_ADC_Init+0x1da>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x1da>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_Init+0x1dc>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11c      	bne.n	8001c82 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_Init+0x202>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x202>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_Init+0x204>
 8001c6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c8c:	2a01      	cmp	r2, #1
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_Init+0x22e>
 8001c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c94:	e000      	b.n	8001c98 <HAL_ADC_Init+0x230>
 8001c96:	2200      	movs	r2, #0
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11b      	bne.n	8001cee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7e5b      	ldrb	r3, [r3, #25]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	045a      	lsls	r2, r3, #17
 8001cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd0:	e00d      	b.n	8001cee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cda:	f043 0220 	orr.w	r2, r3, #32
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d03a      	beq.n	8001d6c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <HAL_ADC_Init+0x2ec>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Init+0x2a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <HAL_ADC_Init+0x2f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d128      	bne.n	8001d5c <HAL_ADC_Init+0x2f4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d12:	d012      	beq.n	8001d3a <HAL_ADC_Init+0x2d2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d00a      	beq.n	8001d34 <HAL_ADC_Init+0x2cc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d26:	d002      	beq.n	8001d2e <HAL_ADC_Init+0x2c6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	e018      	b.n	8001d60 <HAL_ADC_Init+0x2f8>
 8001d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d32:	e015      	b.n	8001d60 <HAL_ADC_Init+0x2f8>
 8001d34:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001d38:	e012      	b.n	8001d60 <HAL_ADC_Init+0x2f8>
 8001d3a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001d3e:	e00f      	b.n	8001d60 <HAL_ADC_Init+0x2f8>
 8001d40:	20000000 	.word	0x20000000
 8001d44:	431bde83 	.word	0x431bde83
 8001d48:	50000100 	.word	0x50000100
 8001d4c:	50000300 	.word	0x50000300
 8001d50:	50000700 	.word	0x50000700
 8001d54:	50000400 	.word	0x50000400
 8001d58:	50000500 	.word	0x50000500
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d64:	4313      	orrs	r3, r2
 8001d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d114      	bne.n	8001da4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e1b      	ldrb	r3, [r3, #24]
 8001d92:	039a      	lsls	r2, r3, #14
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da0:	4313      	orrs	r3, r2
 8001da2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_ADC_Init+0x3bc>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001db4:	430b      	orrs	r3, r1
 8001db6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d10c      	bne.n	8001dda <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f023 010f 	bic.w	r1, r3, #15
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd8:	e007      	b.n	8001dea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 020f 	bic.w	r2, r2, #15
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f023 0303 	bic.w	r3, r3, #3
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8001e00:	e00a      	b.n	8001e18 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f023 0312 	bic.w	r3, r3, #18
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3768      	adds	r7, #104	; 0x68
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	fff0c007 	.word	0xfff0c007

08001e28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80f9 	bne.w	8002036 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start+0x2a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0f4      	b.n	800203c <HAL_ADC_Start+0x214>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fe1e 	bl	8002a9c <ADC_Enable>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80e0 	bne.w	800202c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_Start+0x6c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6d      	ldr	r2, [pc, #436]	; (8002044 <HAL_ADC_Start+0x21c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d106      	bne.n	8001ea2 <HAL_ADC_Start+0x7a>
 8001e94:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <HAL_ADC_Start+0x220>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_ADC_Start+0x9a>
 8001ea0:	e005      	b.n	8001eae <HAL_ADC_Start+0x86>
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_ADC_Start+0x224>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_ADC_Start+0x9a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Start+0x9a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a64      	ldr	r2, [pc, #400]	; (8002050 <HAL_ADC_Start+0x228>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d115      	bne.n	8001eee <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d036      	beq.n	8001f4a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001eec:	e02d      	b.n	8001f4a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_Start+0xe6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <HAL_ADC_Start+0x21c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10a      	bne.n	8001f24 <HAL_ADC_Start+0xfc>
 8001f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e008      	b.n	8001f36 <HAL_ADC_Start+0x10e>
 8001f24:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_ADC_Start+0x228>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f56:	d106      	bne.n	8001f66 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f023 0206 	bic.w	r2, r3, #6
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	221c      	movs	r2, #28
 8001f7a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f84:	d004      	beq.n	8001f90 <HAL_ADC_Start+0x168>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <HAL_ADC_Start+0x21c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d106      	bne.n	8001f9e <HAL_ADC_Start+0x176>
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_ADC_Start+0x220>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03e      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8001f9c:	e005      	b.n	8001faa <HAL_ADC_Start+0x182>
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_ADC_Start+0x224>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d037      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_Start+0x196>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_ADC_Start+0x21c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Start+0x1a4>
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_ADC_Start+0x220>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d027      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8001fca:	e005      	b.n	8001fd8 <HAL_ADC_Start+0x1b0>
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_ADC_Start+0x224>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d020      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_Start+0x1c4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_ADC_Start+0x21c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_Start+0x1d2>
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_ADC_Start+0x220>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d010      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8001ff8:	e005      	b.n	8002006 <HAL_ADC_Start+0x1de>
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_ADC_Start+0x224>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2b09      	cmp	r3, #9
 8002004:	d009      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200e:	d004      	beq.n	800201a <HAL_ADC_Start+0x1f2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_ADC_Start+0x228>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10f      	bne.n	800203a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	e006      	b.n	800203a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002034:	e001      	b.n	800203a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	50000100 	.word	0x50000100
 8002048:	50000300 	.word	0x50000300
 800204c:	50000700 	.word	0x50000700
 8002050:	50000400 	.word	0x50000400

08002054 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_ADC_Stop+0x1a>
 800206a:	2302      	movs	r3, #2
 800206c:	e023      	b.n	80020b6 <HAL_ADC_Stop+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002076:	216c      	movs	r1, #108	; 0x6c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fdd9 	bl	8002c30 <ADC_ConversionStop>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d111      	bne.n	80020ac <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fd6b 	bl	8002b64 <ADC_Disable>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d102      	bne.n	80020dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020d6:	2308      	movs	r3, #8
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e03a      	b.n	8002152 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_PollForConversion+0x30>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a72      	ldr	r2, [pc, #456]	; (80022b4 <HAL_ADC_PollForConversion+0x1f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_PollForConversion+0x34>
 80020f0:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <HAL_ADC_PollForConversion+0x1f8>)
 80020f2:	e000      	b.n	80020f6 <HAL_ADC_PollForConversion+0x36>
 80020f4:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_ADC_PollForConversion+0x1fc>)
 80020f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b00      	cmp	r3, #0
 8002102:	d112      	bne.n	800212a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d11d      	bne.n	800214e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0bf      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0ad      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800214e:	230c      	movs	r3, #12
 8002150:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215a:	d004      	beq.n	8002166 <HAL_ADC_PollForConversion+0xa6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a54      	ldr	r2, [pc, #336]	; (80022b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d106      	bne.n	8002174 <HAL_ADC_PollForConversion+0xb4>
 8002166:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <HAL_ADC_PollForConversion+0x1f8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_ADC_PollForConversion+0xd4>
 8002172:	e005      	b.n	8002180 <HAL_ADC_PollForConversion+0xc0>
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_ADC_PollForConversion+0x1fc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_ADC_PollForConversion+0xd4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002188:	d004      	beq.n	8002194 <HAL_ADC_PollForConversion+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_ADC_PollForConversion+0x200>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d104      	bne.n	800219e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e00f      	b.n	80021be <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_PollForConversion+0xf2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_ADC_PollForConversion+0x1f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d102      	bne.n	80021b8 <HAL_ADC_PollForConversion+0xf8>
 80021b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b6:	e000      	b.n	80021ba <HAL_ADC_PollForConversion+0xfa>
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_ADC_PollForConversion+0x200>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80021be:	f7ff fc23 	bl	8001a08 <HAL_GetTick>
 80021c2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021c4:	e021      	b.n	800220a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021cc:	d01d      	beq.n	800220a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_ADC_PollForConversion+0x124>
 80021d4:	f7ff fc18 	bl	8001a08 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d212      	bcs.n	800220a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e04f      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0d6      	beq.n	80021c6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800222e:	2b00      	cmp	r3, #0
 8002230:	d131      	bne.n	8002296 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002238:	2b00      	cmp	r3, #0
 800223a:	d12c      	bne.n	8002296 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b08      	cmp	r3, #8
 8002248:	d125      	bne.n	8002296 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d112      	bne.n	800227e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d112      	bne.n	8002296 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
 800227c:	e00b      	b.n	8002296 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	50000100 	.word	0x50000100
 80022b8:	50000300 	.word	0x50000300
 80022bc:	50000700 	.word	0x50000700
 80022c0:	50000400 	.word	0x50000400

080022c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b09b      	sub	sp, #108	; 0x6c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x22>
 80022fe:	2302      	movs	r3, #2
 8002300:	e2ca      	b.n	8002898 <HAL_ADC_ConfigChannel+0x5b8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 82ae 	bne.w	8002876 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d81c      	bhi.n	800235c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	461a      	mov	r2, r3
 8002336:	231f      	movs	r3, #31
 8002338:	4093      	lsls	r3, r2
 800233a:	43db      	mvns	r3, r3
 800233c:	4019      	ands	r1, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa00 f203 	lsl.w	r2, r0, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e063      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d81e      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	3b1e      	subs	r3, #30
 8002378:	221f      	movs	r2, #31
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	4019      	ands	r1, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3b1e      	subs	r3, #30
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	e040      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0e      	cmp	r3, #14
 80023a8:	d81e      	bhi.n	80023e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	3b3c      	subs	r3, #60	; 0x3c
 80023be:	221f      	movs	r2, #31
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4019      	ands	r1, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	3b3c      	subs	r3, #60	; 0x3c
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
 80023e6:	e01d      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3b5a      	subs	r3, #90	; 0x5a
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	4019      	ands	r1, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3b5a      	subs	r3, #90	; 0x5a
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80e5 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d91c      	bls.n	8002476 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1e      	subs	r3, #30
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6898      	ldr	r0, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3b1e      	subs	r3, #30
 8002468:	fa00 f203 	lsl.w	r2, r0, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e019      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6898      	ldr	r0, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d84f      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x28c>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	08002507 	.word	0x08002507
 80024dc:	08002529 	.word	0x08002529
 80024e0:	0800254b 	.word	0x0800254b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ea:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <HAL_ADC_ConfigChannel+0x474>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	0691      	lsls	r1, r2, #26
 80024f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024f6:	430a      	orrs	r2, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002502:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002504:	e07e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250c:	4b91      	ldr	r3, [pc, #580]	; (8002754 <HAL_ADC_ConfigChannel+0x474>)
 800250e:	4013      	ands	r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	0691      	lsls	r1, r2, #26
 8002516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002518:	430a      	orrs	r2, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002524:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002526:	e06d      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_ADC_ConfigChannel+0x474>)
 8002530:	4013      	ands	r3, r2
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	0691      	lsls	r1, r2, #26
 8002538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253a:	430a      	orrs	r2, r1
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002548:	e05c      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002550:	4b80      	ldr	r3, [pc, #512]	; (8002754 <HAL_ADC_ConfigChannel+0x474>)
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	0691      	lsls	r1, r2, #26
 800255a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800255c:	430a      	orrs	r2, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002568:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800256a:	e04b      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800258e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	069b      	lsls	r3, r3, #26
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025fc:	e001      	b.n	8002602 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002602:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x344>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x344>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x346>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8130 	bne.w	800288c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00f      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002652:	e049      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b09      	cmp	r3, #9
 8002674:	d91c      	bls.n	80026b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6999      	ldr	r1, [r3, #24]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3b1b      	subs	r3, #27
 8002688:	2207      	movs	r2, #7
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	4019      	ands	r1, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6898      	ldr	r0, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	3b1b      	subs	r3, #27
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	619a      	str	r2, [r3, #24]
 80026ae:	e01b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6959      	ldr	r1, [r3, #20]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f0:	d004      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x41c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_ADC_ConfigChannel+0x478>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x420>
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_ADC_ConfigChannel+0x47c>)
 80026fe:	e000      	b.n	8002702 <HAL_ADC_ConfigChannel+0x422>
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_ADC_ConfigChannel+0x480>)
 8002702:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b10      	cmp	r3, #16
 800270a:	d105      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800270c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800271c:	2b11      	cmp	r3, #17
 800271e:	d105      	bne.n	800272c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002730:	2b12      	cmp	r3, #18
 8002732:	f040 80ab 	bne.w	800288c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 80a4 	bne.w	800288c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d10a      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x484>
 800274e:	4b02      	ldr	r3, [pc, #8]	; (8002758 <HAL_ADC_ConfigChannel+0x478>)
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e022      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ba>
 8002754:	83fff000 	.word	0x83fff000
 8002758:	50000100 	.word	0x50000100
 800275c:	50000300 	.word	0x50000300
 8002760:	50000700 	.word	0x50000700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_ADC_ConfigChannel+0x5c4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d103      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x496>
 800276e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e011      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ba>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d102      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x4a6>
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_ADC_ConfigChannel+0x5cc>)
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e009      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ba>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a48      	ldr	r2, [pc, #288]	; (80028ac <HAL_ADC_ConfigChannel+0x5cc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d102      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x4b6>
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e001      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ba>
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d108      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x4da>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x4da>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_ADC_ConfigChannel+0x4dc>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d150      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x502>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x502>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x504>
 80027e2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d13c      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d11d      	bne.n	800282c <HAL_ADC_ConfigChannel+0x54c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f8:	d118      	bne.n	800282c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_ADC_ConfigChannel+0x5d4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9a      	lsrs	r2, r3, #18
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800281c:	e002      	b.n	8002824 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800282a:	e02e      	b.n	800288a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b11      	cmp	r3, #17
 8002832:	d10b      	bne.n	800284c <HAL_ADC_ConfigChannel+0x56c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283c:	d106      	bne.n	800284c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800284a:	e01e      	b.n	800288a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d11a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800285c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002860:	e013      	b.n	800288a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002874:	e00a      	b.n	800288c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002888:	e000      	b.n	800288c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800288a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002894:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002898:	4618      	mov	r0, r3
 800289a:	376c      	adds	r7, #108	; 0x6c
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	50000100 	.word	0x50000100
 80028a8:	50000400 	.word	0x50000400
 80028ac:	50000500 	.word	0x50000500
 80028b0:	20000000 	.word	0x20000000
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b099      	sub	sp, #100	; 0x64
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d0:	d102      	bne.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	e01a      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d103      	bne.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80028e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	e011      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	e009      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a64      	ldr	r2, [pc, #400]	; (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d102      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	e001      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b0      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002922:	2302      	movs	r3, #2
 8002924:	e0a9      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 808d 	bne.w	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 8086 	bne.w	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d004      	beq.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a4b      	ldr	r2, [pc, #300]	; (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002962:	e000      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002966:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d040      	beq.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002982:	035b      	lsls	r3, r3, #13
 8002984:	430b      	orrs	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d15c      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80029ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d14b      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029dc:	f023 030f 	bic.w	r3, r3, #15
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	6811      	ldr	r1, [r2, #0]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	6892      	ldr	r2, [r2, #8]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f0:	e03c      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d123      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002a40:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a4e:	f023 030f 	bic.w	r3, r3, #15
 8002a52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a54:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a56:	e009      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a6a:	e000      	b.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3764      	adds	r7, #100	; 0x64
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	50000100 	.word	0x50000100
 8002a8c:	50000400 	.word	0x50000400
 8002a90:	50000500 	.word	0x50000500
 8002a94:	50000300 	.word	0x50000300
 8002a98:	50000700 	.word	0x50000700

08002a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <ADC_Enable+0x2c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <ADC_Enable+0x2c>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <ADC_Enable+0x2e>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d143      	bne.n	8002b56 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <ADC_Enable+0xc4>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e02f      	b.n	8002b58 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b08:	f7fe ff7e 	bl	8001a08 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b0e:	e01b      	b.n	8002b48 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b10:	f7fe ff7a 	bl	8001a08 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d914      	bls.n	8002b48 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d00d      	beq.n	8002b48 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e007      	b.n	8002b58 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1dc      	bne.n	8002b10 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	8000003f 	.word	0x8000003f

08002b64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <ADC_Disable+0x2c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <ADC_Disable+0x2c>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <ADC_Disable+0x2e>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d047      	beq.n	8002c26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030d 	and.w	r3, r3, #13
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10f      	bne.n	8002bc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0202 	orr.w	r2, r2, #2
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe ff24 	bl	8001a08 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bc2:	e029      	b.n	8002c18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e023      	b.n	8002c28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002be0:	f7fe ff12 	bl	8001a08 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d914      	bls.n	8002c18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d10d      	bne.n	8002c18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e007      	b.n	8002c28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d0dc      	beq.n	8002be0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 809b 	beq.w	8002d8c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c64:	d12a      	bne.n	8002cbc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d126      	bne.n	8002cbc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d122      	bne.n	8002cbc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002c76:	230c      	movs	r3, #12
 8002c78:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002c7a:	e014      	b.n	8002ca6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <ADC_ConversionStop+0x168>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d90d      	bls.n	8002ca0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f043 0210 	orr.w	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e076      	b.n	8002d8e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d1e3      	bne.n	8002c7c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2240      	movs	r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b60      	cmp	r3, #96	; 0x60
 8002cc0:	d015      	beq.n	8002cee <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d10e      	bne.n	8002cee <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0210 	orr.w	r2, r2, #16
 8002cec:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d015      	beq.n	8002d20 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d10e      	bne.n	8002d20 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b60      	cmp	r3, #96	; 0x60
 8002d24:	d005      	beq.n	8002d32 <ADC_ConversionStop+0x102>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b6c      	cmp	r3, #108	; 0x6c
 8002d2a:	d105      	bne.n	8002d38 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	617b      	str	r3, [r7, #20]
        break;
 8002d30:	e005      	b.n	8002d3e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d32:	2308      	movs	r3, #8
 8002d34:	617b      	str	r3, [r7, #20]
        break;
 8002d36:	e002      	b.n	8002d3e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	617b      	str	r3, [r7, #20]
        break;
 8002d3c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fe63 	bl	8001a08 <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d44:	e01b      	b.n	8002d7e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d46:	f7fe fe5f 	bl	8001a08 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b0b      	cmp	r3, #11
 8002d52:	d914      	bls.n	8002d7e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1dc      	bne.n	8002d46 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	000993ff 	.word	0x000993ff

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	; (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fce:	e154      	b.n	800327a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8146 	beq.w	8003274 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d005      	beq.n	8003000 <HAL_GPIO_Init+0x40>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d130      	bne.n	8003062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003036:	2201      	movs	r2, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0201 	and.w	r2, r3, #1
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b03      	cmp	r3, #3
 800306c:	d017      	beq.n	800309e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d123      	bne.n	80030f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	6939      	ldr	r1, [r7, #16]
 80030ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80a0 	beq.w	8003274 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_GPIO_Init+0x2d8>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_GPIO_Init+0x2d8>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6193      	str	r3, [r2, #24]
 8003140:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_GPIO_Init+0x2d8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800314c:	4a53      	ldr	r2, [pc, #332]	; (800329c <HAL_GPIO_Init+0x2dc>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003176:	d019      	beq.n	80031ac <HAL_GPIO_Init+0x1ec>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a49      	ldr	r2, [pc, #292]	; (80032a0 <HAL_GPIO_Init+0x2e0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_GPIO_Init+0x1e8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_GPIO_Init+0x2e4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00d      	beq.n	80031a4 <HAL_GPIO_Init+0x1e4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_GPIO_Init+0x2e8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <HAL_GPIO_Init+0x1e0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_GPIO_Init+0x2ec>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_GPIO_Init+0x1dc>
 8003198:	2304      	movs	r3, #4
 800319a:	e008      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 800319c:	2305      	movs	r3, #5
 800319e:	e006      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a0:	2303      	movs	r3, #3
 80031a2:	e004      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e002      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031ac:	2300      	movs	r3, #0
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	f002 0203 	and.w	r2, r2, #3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4093      	lsls	r3, r2
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031be:	4937      	ldr	r1, [pc, #220]	; (800329c <HAL_GPIO_Init+0x2dc>)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031cc:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f0:	4a2f      	ldr	r2, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800321a:	4a25      	ldr	r2, [pc, #148]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003220:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_GPIO_Init+0x2f0>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3301      	adds	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f aea3 	bne.w	8002fd0 <HAL_GPIO_Init+0x10>
  }
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40021000 	.word	0x40021000
 800329c:	40010000 	.word	0x40010000
 80032a0:	48000400 	.word	0x48000400
 80032a4:	48000800 	.word	0x48000800
 80032a8:	48000c00 	.word	0x48000c00
 80032ac:	48001000 	.word	0x48001000
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e081      	b.n	80033fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fcd2 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e006      	b.n	800336c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800336a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d104      	bne.n	800337e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800337c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	4603      	mov	r3, r0
 8003414:	817b      	strh	r3, [r7, #10]
 8003416:	460b      	mov	r3, r1
 8003418:	813b      	strh	r3, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	f040 80f9 	bne.w	800361e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_I2C_Mem_Write+0x34>
 8003432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0ed      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Mem_Write+0x4e>
 800344e:	2302      	movs	r3, #2
 8003450:	e0e6      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345a:	f7fe fad5 	bl	8001a08 <HAL_GetTick>
 800345e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2319      	movs	r3, #25
 8003466:	2201      	movs	r2, #1
 8003468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fac3 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0d1      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2221      	movs	r2, #33	; 0x21
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a4:	88f8      	ldrh	r0, [r7, #6]
 80034a6:	893a      	ldrh	r2, [r7, #8]
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4603      	mov	r3, r0
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f9d3 	bl	8003860 <I2C_RequestMemoryWrite>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0a9      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2bff      	cmp	r3, #255	; 0xff
 80034d4:	d90e      	bls.n	80034f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	22ff      	movs	r2, #255	; 0xff
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8979      	ldrh	r1, [r7, #10]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fc3d 	bl	8003d6c <I2C_TransferConfig>
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	b2da      	uxtb	r2, r3
 8003504:	8979      	ldrh	r1, [r7, #10]
 8003506:	2300      	movs	r3, #0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fc2c 	bl	8003d6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fabc 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e07b      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d034      	beq.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d130      	bne.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fa3f 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04d      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2bff      	cmp	r3, #255	; 0xff
 800358c:	d90e      	bls.n	80035ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	b2da      	uxtb	r2, r3
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fbe1 	bl	8003d6c <I2C_TransferConfig>
 80035aa:	e00f      	b.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fbd0 	bl	8003d6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d19e      	bne.n	8003514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 faa2 	bl	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e01a      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2220      	movs	r2, #32
 80035f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_I2C_Mem_Write+0x224>)
 80035fe:	400b      	ands	r3, r1
 8003600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b20      	cmp	r3, #32
 8003650:	f040 80fd 	bne.w	800384e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_I2C_Mem_Read+0x34>
 800365a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0f1      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_I2C_Mem_Read+0x4e>
 8003676:	2302      	movs	r3, #2
 8003678:	e0ea      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003682:	f7fe f9c1 	bl	8001a08 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f9af 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d5      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2222      	movs	r2, #34	; 0x22
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036cc:	88f8      	ldrh	r0, [r7, #6]
 80036ce:	893a      	ldrh	r2, [r7, #8]
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4603      	mov	r3, r0
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f913 	bl	8003908 <I2C_RequestMemoryRead>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0ad      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2bff      	cmp	r3, #255	; 0xff
 80036fc:	d90e      	bls.n	800371c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	4b52      	ldr	r3, [pc, #328]	; (8003858 <HAL_I2C_Mem_Read+0x22c>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fb29 	bl	8003d6c <I2C_TransferConfig>
 800371a:	e00f      	b.n	800373c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	b2da      	uxtb	r2, r3
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_I2C_Mem_Read+0x22c>)
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fb18 	bl	8003d6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2200      	movs	r2, #0
 8003744:	2104      	movs	r1, #4
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f956 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07c      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d034      	beq.n	80037fc <HAL_I2C_Mem_Read+0x1d0>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d130      	bne.n	80037fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f927 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e04d      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2bff      	cmp	r3, #255	; 0xff
 80037bc:	d90e      	bls.n	80037dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	2300      	movs	r3, #0
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fac9 	bl	8003d6c <I2C_TransferConfig>
 80037da:	e00f      	b.n	80037fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fab8 	bl	8003d6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19a      	bne.n	800373c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f98a 	bl	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e01a      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2220      	movs	r2, #32
 8003820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_I2C_Mem_Read+0x230>)
 800382e:	400b      	ands	r3, r1
 8003830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	80002400 	.word	0x80002400
 800385c:	fe00e800 	.word	0xfe00e800

08003860 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	460b      	mov	r3, r1
 8003874:	813b      	strh	r3, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <I2C_RequestMemoryWrite+0xa4>)
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa6f 	bl	8003d6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8ff 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e02c      	b.n	80038fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038a8:	893b      	ldrh	r3, [r7, #8]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
 80038b2:	e015      	b.n	80038e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f8e5 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e012      	b.n	80038fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d6:	893b      	ldrh	r3, [r7, #8]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f884 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	80002000 	.word	0x80002000

08003908 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4603      	mov	r3, r0
 8003918:	817b      	strh	r3, [r7, #10]
 800391a:	460b      	mov	r3, r1
 800391c:	813b      	strh	r3, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <I2C_RequestMemoryRead+0xa4>)
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa1c 	bl	8003d6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	69b9      	ldr	r1, [r7, #24]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8ac 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e02c      	b.n	80039a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
 8003958:	e015      	b.n	8003986 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	b29b      	uxth	r3, r3
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f892 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e012      	b.n	80039a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800397c:	893b      	ldrh	r3, [r7, #8]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2200      	movs	r2, #0
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f831 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	80002000 	.word	0x80002000

080039b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d103      	bne.n	80039ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d007      	beq.n	80039ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	619a      	str	r2, [r3, #24]
  }
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a08:	e031      	b.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a10:	d02d      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fd fff9 	bl	8001a08 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d122      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d113      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0be      	beq.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa2:	e033      	b.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f87f 	bl	8003bac <I2C_IsErrorOccurred>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e031      	b.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003abe:	d025      	beq.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7fd ffa2 	bl	8001a08 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11a      	bne.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d013      	beq.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d1c4      	bne.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b30:	e02f      	b.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f838 	bl	8003bac <I2C_IsErrorOccurred>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e02d      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd ff5f 	bl	8001a08 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11a      	bne.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d013      	beq.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e007      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d1c8      	bne.n	8003b32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d068      	beq.n	8003caa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be0:	e049      	b.n	8003c76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be8:	d045      	beq.n	8003c76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fd ff0d 	bl	8001a08 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_IsErrorOccurred+0x54>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d13a      	bne.n	8003c76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d121      	bne.n	8003c68 <I2C_IsErrorOccurred+0xbc>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2a:	d01d      	beq.n	8003c68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d01a      	beq.n	8003c68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c42:	f7fd fee1 	bl	8001a08 <HAL_GetTick>
 8003c46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c48:	e00e      	b.n	8003c68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c4a:	f7fd fedd 	bl	8001a08 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b19      	cmp	r3, #25
 8003c56:	d907      	bls.n	8003c68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f043 0320 	orr.w	r3, r3, #32
 8003c5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c66:	e006      	b.n	8003c76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d1e9      	bne.n	8003c4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d003      	beq.n	8003c8c <I2C_IsErrorOccurred+0xe0>
 8003c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0aa      	beq.n	8003be2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ccc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01c      	beq.n	8003d5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fe45 	bl	80039b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <I2C_IsErrorOccurred+0x1bc>)
 8003d32:	400b      	ands	r3, r1
 8003d34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	fe00e800 	.word	0xfe00e800

08003d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d84:	7a7b      	ldrb	r3, [r7, #9]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	0d5b      	lsrs	r3, r3, #21
 8003da6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <I2C_TransferConfig+0x60>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	43db      	mvns	r3, r3
 8003db0:	ea02 0103 	and.w	r1, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	03ff63ff 	.word	0x03ff63ff

08003dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d138      	bne.n	8003e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e032      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d139      	bne.n	8003ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e033      	b.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2224      	movs	r2, #36	; 0x24
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f00:	b08b      	sub	sp, #44	; 0x2c
 8003f02:	af06      	add	r7, sp, #24
 8003f04:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0c4      	b.n	800409a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd fca7 	bl	8001878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 ff45 	bl	8007dc6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e040      	b.n	8003fc4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3301      	adds	r3, #1
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3303      	adds	r3, #3
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	3338      	adds	r3, #56	; 0x38
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	333c      	adds	r3, #60	; 0x3c
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3340      	adds	r3, #64	; 0x40
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3b9      	bcc.n	8003f42 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e044      	b.n	800405e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	3301      	adds	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d3b5      	bcc.n	8003fd4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	687e      	ldr	r6, [r7, #4]
 8004070:	466d      	mov	r5, sp
 8004072:	f106 0410 	add.w	r4, r6, #16
 8004076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	1d33      	adds	r3, r6, #4
 8004080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004082:	6838      	ldr	r0, [r7, #0]
 8004084:	f003 feba 	bl	8007dfc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f001 b823 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 817d 	beq.w	80043da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040e0:	4bbc      	ldr	r3, [pc, #752]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00c      	beq.n	8004106 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040ec:	4bb9      	ldr	r3, [pc, #740]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d15c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x10e>
 80040f8:	4bb6      	ldr	r3, [pc, #728]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d155      	bne.n	80041b2 <HAL_RCC_OscConfig+0x10e>
 8004106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800411a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0x94>
 8004132:	4ba8      	ldr	r3, [pc, #672]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e015      	b.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800413c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800414c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004150:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004154:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004160:	4b9c      	ldr	r3, [pc, #624]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004168:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800416c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004170:	fa92 f2a2 	rbit	r2, r2
 8004174:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004178:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f042 0220 	orr.w	r2, r2, #32
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f002 021f 	and.w	r2, r2, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 811f 	beq.w	80043d8 <HAL_RCC_OscConfig+0x334>
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8116 	bne.w	80043d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f000 bfaf 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12e>
 80041c4:	4b83      	ldr	r3, [pc, #524]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a82      	ldr	r2, [pc, #520]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e036      	b.n	8004240 <HAL_RCC_OscConfig+0x19c>
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x158>
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a7b      	ldr	r2, [pc, #492]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b79      	ldr	r3, [pc, #484]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a78      	ldr	r2, [pc, #480]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80041f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e021      	b.n	8004240 <HAL_RCC_OscConfig+0x19c>
 80041fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x184>
 800420e:	4b71      	ldr	r3, [pc, #452]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a70      	ldr	r2, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6d      	ldr	r2, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x19c>
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a69      	ldr	r2, [pc, #420]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a66      	ldr	r2, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f023 020f 	bic.w	r2, r3, #15
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	495f      	ldr	r1, [pc, #380]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 8004256:	4313      	orrs	r3, r2
 8004258:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d059      	beq.n	800431e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fd fbcd 	bl	8001a08 <HAL_GetTick>
 800426e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd fbc8 	bl	8001a08 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b64      	cmp	r3, #100	; 0x64
 8004282:	d902      	bls.n	800428a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	f000 bf43 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 800428a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800429e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d102      	bne.n	80042bc <HAL_RCC_OscConfig+0x218>
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	e015      	b.n	80042e8 <HAL_RCC_OscConfig+0x244>
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80042d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80042f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80042f4:	fa92 f2a2 	rbit	r2, r2
 80042f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80042fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004300:	fab2 f282 	clz	r2, r2
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	f042 0220 	orr.w	r2, r2, #32
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f002 021f 	and.w	r2, r2, #31
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f202 	lsl.w	r2, r1, r2
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ab      	beq.n	8004274 <HAL_RCC_OscConfig+0x1d0>
 800431c:	e05d      	b.n	80043da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd fb73 	bl	8001a08 <HAL_GetTick>
 8004322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fb6e 	bl	8001a08 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d902      	bls.n	800433e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	f000 bee9 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 800433e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004342:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d102      	bne.n	8004370 <HAL_RCC_OscConfig+0x2cc>
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	e015      	b.n	800439c <HAL_RCC_OscConfig+0x2f8>
 8004370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004374:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004388:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800438c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_RCC_OscConfig+0x330>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80043a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043a8:	fa92 f2a2 	rbit	r2, r2
 80043ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80043b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80043b4:	fab2 f282 	clz	r2, r2
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	f042 0220 	orr.w	r2, r2, #32
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	f002 021f 	and.w	r2, r2, #31
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ab      	bne.n	8004328 <HAL_RCC_OscConfig+0x284>
 80043d0:	e003      	b.n	80043da <HAL_RCC_OscConfig+0x336>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 817d 	beq.w	80046ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043f0:	4ba6      	ldr	r3, [pc, #664]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043fc:	4ba3      	ldr	r3, [pc, #652]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	d172      	bne.n	80044ee <HAL_RCC_OscConfig+0x44a>
 8004408:	4ba0      	ldr	r3, [pc, #640]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d16c      	bne.n	80044ee <HAL_RCC_OscConfig+0x44a>
 8004414:	2302      	movs	r3, #2
 8004416:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004426:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d102      	bne.n	8004444 <HAL_RCC_OscConfig+0x3a0>
 800443e:	4b93      	ldr	r3, [pc, #588]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e013      	b.n	800446c <HAL_RCC_OscConfig+0x3c8>
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004456:	2302      	movs	r3, #2
 8004458:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800445c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004468:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2202      	movs	r2, #2
 800446e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004472:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004476:	fa92 f2a2 	rbit	r2, r2
 800447a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800447e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCC_OscConfig+0x410>
 800449e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f000 be2e 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	21f8      	movs	r1, #248	; 0xf8
 80044ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80044d2:	fa91 f1a1 	rbit	r1, r1
 80044d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80044da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80044de:	fab1 f181 	clz	r1, r1
 80044e2:	b2c9      	uxtb	r1, r1
 80044e4:	408b      	lsls	r3, r1
 80044e6:	4969      	ldr	r1, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ec:	e0fd      	b.n	80046ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8088 	beq.w	8004610 <HAL_RCC_OscConfig+0x56c>
 8004500:	2301      	movs	r3, #1
 8004502:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004512:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	461a      	mov	r2, r3
 8004528:	2301      	movs	r3, #1
 800452a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd fa6c 	bl	8001a08 <HAL_GetTick>
 8004530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004536:	f7fd fa67 	bl	8001a08 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	f000 bde2 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 800454c:	2302      	movs	r3, #2
 800454e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800455e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d102      	bne.n	800457c <HAL_RCC_OscConfig+0x4d8>
 8004576:	4b45      	ldr	r3, [pc, #276]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	e013      	b.n	80045a4 <HAL_RCC_OscConfig+0x500>
 800457c:	2302      	movs	r3, #2
 800457e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800458e:	2302      	movs	r3, #2
 8004590:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004594:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80045a0:	4b3a      	ldr	r3, [pc, #232]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2202      	movs	r2, #2
 80045a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80045aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045ae:	fa92 f2a2 	rbit	r2, r2
 80045b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80045b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80045ba:	fab2 f282 	clz	r2, r2
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	f042 0220 	orr.w	r2, r2, #32
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f002 021f 	and.w	r2, r2, #31
 80045ca:	2101      	movs	r1, #1
 80045cc:	fa01 f202 	lsl.w	r2, r1, r2
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0af      	beq.n	8004536 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	21f8      	movs	r1, #248	; 0xf8
 80045ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045f4:	fa91 f1a1 	rbit	r1, r1
 80045f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80045fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004600:	fab1 f181 	clz	r1, r1
 8004604:	b2c9      	uxtb	r1, r1
 8004606:	408b      	lsls	r3, r1
 8004608:	4920      	ldr	r1, [pc, #128]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
 800460e:	e06c      	b.n	80046ea <HAL_RCC_OscConfig+0x646>
 8004610:	2301      	movs	r3, #1
 8004612:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004622:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fd f9e4 	bl	8001a08 <HAL_GetTick>
 8004640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004646:	f7fd f9df 	bl	8001a08 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	f000 bd5a 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 800465c:	2302      	movs	r3, #2
 800465e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800466e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d104      	bne.n	8004690 <HAL_RCC_OscConfig+0x5ec>
 8004686:	4b01      	ldr	r3, [pc, #4]	; (800468c <HAL_RCC_OscConfig+0x5e8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	e015      	b.n	80046b8 <HAL_RCC_OscConfig+0x614>
 800468c:	40021000 	.word	0x40021000
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046b4:	4bc8      	ldr	r3, [pc, #800]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2202      	movs	r2, #2
 80046ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80046be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80046c2:	fa92 f2a2 	rbit	r2, r2
 80046c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80046ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80046ce:	fab2 f282 	clz	r2, r2
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f042 0220 	orr.w	r2, r2, #32
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f002 021f 	and.w	r2, r2, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ad      	bne.n	8004646 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8110 	beq.w	8004920 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d079      	beq.n	8004804 <HAL_RCC_OscConfig+0x760>
 8004710:	2301      	movs	r3, #1
 8004712:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	4bab      	ldr	r3, [pc, #684]	; (80049dc <HAL_RCC_OscConfig+0x938>)
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	2301      	movs	r3, #1
 8004738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fd f965 	bl	8001a08 <HAL_GetTick>
 800473e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fd f960 	bl	8001a08 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d902      	bls.n	800475a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f000 bcdb 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 800475a:	2302      	movs	r3, #2
 800475c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004774:	2202      	movs	r2, #2
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	fa93 f2a3 	rbit	r2, r3
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004798:	2202      	movs	r2, #2
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	fa93 f2a3 	rbit	r2, r3
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b4:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 80047b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047c0:	2102      	movs	r1, #2
 80047c2:	6019      	str	r1, [r3, #0]
 80047c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	fa93 f1a3 	rbit	r1, r3
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047da:	6019      	str	r1, [r3, #0]
  return result;
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0a0      	beq.n	8004744 <HAL_RCC_OscConfig+0x6a0>
 8004802:	e08d      	b.n	8004920 <HAL_RCC_OscConfig+0x87c>
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	fa93 f2a3 	rbit	r2, r3
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004826:	601a      	str	r2, [r3, #0]
  return result;
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004830:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x938>)
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	461a      	mov	r2, r3
 8004842:	2300      	movs	r3, #0
 8004844:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fd f8df 	bl	8001a08 <HAL_GetTick>
 800484a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484e:	e00a      	b.n	8004866 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004850:	f7fd f8da 	bl	8001a08 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d902      	bls.n	8004866 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	f000 bc55 	b.w	8005110 <HAL_RCC_OscConfig+0x106c>
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800486e:	2202      	movs	r2, #2
 8004870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fa93 f2a3 	rbit	r2, r3
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004892:	2202      	movs	r2, #2
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	fa93 f2a3 	rbit	r2, r3
 80048a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b6:	2202      	movs	r2, #2
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	fa93 f2a3 	rbit	r2, r3
 80048c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80048d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 80048d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048de:	2102      	movs	r1, #2
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f1a3 	rbit	r1, r3
 80048f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048f8:	6019      	str	r1, [r3, #0]
  return result;
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d197      	bne.n	8004850 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 81a1 	beq.w	8004c78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	61d3      	str	r3, [r2, #28]
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800496e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_OscConfig+0x93c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11a      	bne.n	80049b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_RCC_OscConfig+0x93c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_RCC_OscConfig+0x93c>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd f83b 	bl	8001a08 <HAL_GetTick>
 8004992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	e009      	b.n	80049ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fd f836 	bl	8001a08 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b64      	cmp	r3, #100	; 0x64
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e3b1      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <HAL_RCC_OscConfig+0x93c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ef      	beq.n	8004998 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10d      	bne.n	80049e4 <HAL_RCC_OscConfig+0x940>
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4a02      	ldr	r2, [pc, #8]	; (80049d8 <HAL_RCC_OscConfig+0x934>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6213      	str	r3, [r2, #32]
 80049d4:	e03c      	b.n	8004a50 <HAL_RCC_OscConfig+0x9ac>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	10908120 	.word	0x10908120
 80049e0:	40007000 	.word	0x40007000
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10c      	bne.n	8004a0e <HAL_RCC_OscConfig+0x96a>
 80049f4:	4bc1      	ldr	r3, [pc, #772]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4ac0      	ldr	r2, [pc, #768]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	6213      	str	r3, [r2, #32]
 8004a00:	4bbe      	ldr	r3, [pc, #760]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4abd      	ldr	r2, [pc, #756]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a06:	f023 0304 	bic.w	r3, r3, #4
 8004a0a:	6213      	str	r3, [r2, #32]
 8004a0c:	e020      	b.n	8004a50 <HAL_RCC_OscConfig+0x9ac>
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x994>
 8004a1e:	4bb7      	ldr	r3, [pc, #732]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4ab6      	ldr	r2, [pc, #728]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	6213      	str	r3, [r2, #32]
 8004a2a:	4bb4      	ldr	r3, [pc, #720]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4ab3      	ldr	r2, [pc, #716]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x9ac>
 8004a38:	4bb0      	ldr	r3, [pc, #704]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4aaf      	ldr	r2, [pc, #700]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6213      	str	r3, [r2, #32]
 8004a44:	4bad      	ldr	r3, [pc, #692]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4aac      	ldr	r2, [pc, #688]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8081 	beq.w	8004b64 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fc ffd1 	bl	8001a08 <HAL_GetTick>
 8004a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7fc ffcc 	bl	8001a08 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e345      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	fa93 f2a3 	rbit	r2, r3
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	fa93 f2a3 	rbit	r2, r3
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aca:	601a      	str	r2, [r3, #0]
  return result;
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ad4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCC_OscConfig+0xa4c>
 8004aea:	4b84      	ldr	r3, [pc, #528]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	e013      	b.n	8004b18 <HAL_RCC_OscConfig+0xa74>
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004af8:	2202      	movs	r2, #2
 8004afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	fa93 f2a3 	rbit	r2, r3
 8004b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	4b79      	ldr	r3, [pc, #484]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b20:	2102      	movs	r1, #2
 8004b22:	6011      	str	r1, [r2, #0]
 8004b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	fa92 f1a2 	rbit	r1, r2
 8004b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b3a:	6011      	str	r1, [r2, #0]
  return result;
 8004b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b40:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	fab2 f282 	clz	r2, r2
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	f002 021f 	and.w	r2, r2, #31
 8004b56:	2101      	movs	r1, #1
 8004b58:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d084      	beq.n	8004a6c <HAL_RCC_OscConfig+0x9c8>
 8004b62:	e07f      	b.n	8004c64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b64:	f7fc ff50 	bl	8001a08 <HAL_GetTick>
 8004b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6c:	e00b      	b.n	8004b86 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fc ff4b 	bl	8001a08 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e2c4      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
 8004b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b8e:	2202      	movs	r2, #2
 8004b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	fa93 f2a3 	rbit	r2, r3
 8004ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	fa93 f2a3 	rbit	r2, r3
 8004bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004bcc:	601a      	str	r2, [r3, #0]
  return result;
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f043 0302 	orr.w	r3, r3, #2
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d102      	bne.n	8004bf2 <HAL_RCC_OscConfig+0xb4e>
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	e013      	b.n	8004c1a <HAL_RCC_OscConfig+0xb76>
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	fa93 f2a3 	rbit	r2, r3
 8004c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c22:	2102      	movs	r1, #2
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	fa92 f1a2 	rbit	r1, r2
 8004c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c3c:	6011      	str	r1, [r2, #0]
  return result;
 8004c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	fab2 f282 	clz	r2, r2
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	f002 021f 	and.w	r2, r2, #31
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d184      	bne.n	8004b6e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c64:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8242 	beq.w	800510e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_RCC_OscConfig+0xc58>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	f000 8213 	beq.w	80050be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f040 8162 	bne.w	8004f6e <HAL_RCC_OscConfig+0xeca>
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	fa93 f2a3 	rbit	r2, r3
 8004cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004cce:	601a      	str	r2, [r3, #0]
  return result;
 8004cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004cd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fe8a 	bl	8001a08 <HAL_GetTick>
 8004cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf8:	e00c      	b.n	8004d14 <HAL_RCC_OscConfig+0xc70>
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fc fe82 	bl	8001a08 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1fd      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	fa93 f2a3 	rbit	r2, r3
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d38:	601a      	str	r2, [r3, #0]
  return result;
 8004d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_OscConfig+0xcba>
 8004d58:	4bb0      	ldr	r3, [pc, #704]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	e027      	b.n	8004dae <HAL_RCC_OscConfig+0xd0a>
 8004d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d62:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	fa93 f2a3 	rbit	r2, r3
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d88:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d96:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	fa93 f2a3 	rbit	r2, r3
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	4b9c      	ldr	r3, [pc, #624]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004db6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	fa92 f1a2 	rbit	r1, r2
 8004dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004dd2:	6011      	str	r1, [r2, #0]
  return result;
 8004dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dd8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	fab2 f282 	clz	r2, r2
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	f042 0220 	orr.w	r2, r2, #32
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f002 021f 	and.w	r2, r2, #31
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d182      	bne.n	8004d00 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfa:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	497f      	ldr	r1, [pc, #508]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
 8004e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e26:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e34:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	fa93 f2a3 	rbit	r2, r3
 8004e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e46:	601a      	str	r2, [r3, #0]
  return result;
 8004e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	2301      	movs	r3, #1
 8004e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fc fdce 	bl	8001a08 <HAL_GetTick>
 8004e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e70:	e009      	b.n	8004e86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fc fdc9 	bl	8001a08 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e144      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
 8004e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	fa93 f2a3 	rbit	r2, r3
 8004ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004eaa:	601a      	str	r2, [r3, #0]
  return result;
 8004eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004eb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xe2c>
 8004eca:	4b54      	ldr	r3, [pc, #336]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	e027      	b.n	8004f20 <HAL_RCC_OscConfig+0xe7c>
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	fa93 f2a3 	rbit	r2, r3
 8004eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	fa93 f2a3 	rbit	r2, r3
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f24:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f32:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	fa92 f1a2 	rbit	r1, r2
 8004f3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f44:	6011      	str	r1, [r2, #0]
  return result;
 8004f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	fab2 f282 	clz	r2, r2
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	f042 0220 	orr.w	r2, r2, #32
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	f002 021f 	and.w	r2, r2, #31
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f202 	lsl.w	r2, r1, r2
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d082      	beq.n	8004e72 <HAL_RCC_OscConfig+0xdce>
 8004f6c:	e0cf      	b.n	800510e <HAL_RCC_OscConfig+0x106a>
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f92:	601a      	str	r2, [r3, #0]
  return result;
 8004f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fd28 	bl	8001a08 <HAL_GetTick>
 8004fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbc:	e009      	b.n	8004fd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fc fd23 	bl	8001a08 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e09e      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
 8004fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	fa93 f2a3 	rbit	r2, r3
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ff6:	601a      	str	r2, [r3, #0]
  return result;
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005000:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d104      	bne.n	8005020 <HAL_RCC_OscConfig+0xf7c>
 8005016:	4b01      	ldr	r3, [pc, #4]	; (800501c <HAL_RCC_OscConfig+0xf78>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	e029      	b.n	8005070 <HAL_RCC_OscConfig+0xfcc>
 800501c:	40021000 	.word	0x40021000
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800502c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	fa93 f2a3 	rbit	r2, r3
 800503c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005040:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800504e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	4b2b      	ldr	r3, [pc, #172]	; (800511c <HAL_RCC_OscConfig+0x1078>)
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005074:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005078:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800507c:	6011      	str	r1, [r2, #0]
 800507e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005082:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	fa92 f1a2 	rbit	r1, r2
 800508c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005090:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005094:	6011      	str	r1, [r2, #0]
  return result;
 8005096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800509a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	f042 0220 	orr.w	r2, r2, #32
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f002 021f 	and.w	r2, r2, #31
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f202 	lsl.w	r2, r1, r2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d180      	bne.n	8004fbe <HAL_RCC_OscConfig+0xf1a>
 80050bc:	e027      	b.n	800510e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e01e      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <HAL_RCC_OscConfig+0x1078>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80050de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d10b      	bne.n	800510a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80050f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80050f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005106:	429a      	cmp	r2, r3
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b09e      	sub	sp, #120	; 0x78
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e162      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d910      	bls.n	8005168 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 0207 	bic.w	r2, r3, #7
 800514e:	498b      	ldr	r1, [pc, #556]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b89      	ldr	r3, [pc, #548]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e14a      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b82      	ldr	r3, [pc, #520]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	497f      	ldr	r1, [pc, #508]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80dc 	beq.w	800534c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d13c      	bne.n	8005216 <HAL_RCC_ClockConfig+0xf6>
 800519c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xa6>
 80051c0:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	e00f      	b.n	80051e6 <HAL_RCC_ClockConfig+0xc6>
 80051c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
 80051d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
 80051da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ee:	fa92 f2a2 	rbit	r2, r2
 80051f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80051f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051f6:	fab2 f282 	clz	r2, r2
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	f042 0220 	orr.w	r2, r2, #32
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	f002 021f 	and.w	r2, r2, #31
 8005206:	2101      	movs	r1, #1
 8005208:	fa01 f202 	lsl.w	r2, r1, r2
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d17b      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0f3      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d13c      	bne.n	8005298 <HAL_RCC_ClockConfig+0x178>
 800521e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005222:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800522c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d102      	bne.n	8005248 <HAL_RCC_ClockConfig+0x128>
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e00f      	b.n	8005268 <HAL_RCC_ClockConfig+0x148>
 8005248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800524c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
 8005256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005264:	4b46      	ldr	r3, [pc, #280]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800526c:	63ba      	str	r2, [r7, #56]	; 0x38
 800526e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005270:	fa92 f2a2 	rbit	r2, r2
 8005274:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005278:	fab2 f282 	clz	r2, r2
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	f002 021f 	and.w	r2, r2, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f202 	lsl.w	r2, r1, r2
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13a      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0b2      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
 8005298:	2302      	movs	r3, #2
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1a0>
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	e00d      	b.n	80052dc <HAL_RCC_ClockConfig+0x1bc>
 80052c0:	2302      	movs	r3, #2
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	2302      	movs	r3, #2
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	61ba      	str	r2, [r7, #24]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	fa92 f2a2 	rbit	r2, r2
 80052e6:	617a      	str	r2, [r7, #20]
  return result;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	fab2 f282 	clz	r2, r2
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	f042 0220 	orr.w	r2, r2, #32
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	f002 021f 	and.w	r2, r2, #31
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e079      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	491a      	ldr	r1, [pc, #104]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7fc fb74 	bl	8001a08 <HAL_GetTick>
 8005320:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fc fb70 	bl	8001a08 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e061      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d214      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4906      	ldr	r1, [pc, #24]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_RCC_ClockConfig+0x25c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e040      	b.n	80053fe <HAL_RCC_ClockConfig+0x2de>
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	491a      	ldr	r1, [pc, #104]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4912      	ldr	r1, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053c2:	f000 f829 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053c6:	4601      	mov	r1, r0
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <HAL_RCC_ClockConfig+0x2e8>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d0:	22f0      	movs	r2, #240	; 0xf0
 80053d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	fa92 f2a2 	rbit	r2, r2
 80053da:	60fa      	str	r2, [r7, #12]
  return result;
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	fab2 f282 	clz	r2, r2
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	40d3      	lsrs	r3, r2
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <HAL_RCC_ClockConfig+0x2ec>)
 80053e8:	5cd3      	ldrb	r3, [r2, r3]
 80053ea:	fa21 f303 	lsr.w	r3, r1, r3
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <HAL_RCC_ClockConfig+0x2f0>)
 80053f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_RCC_ClockConfig+0x2f4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc fac2 	bl	8001980 <HAL_InitTick>
  
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3778      	adds	r7, #120	; 0x78
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000
 800540c:	08007ebc 	.word	0x08007ebc
 8005410:	20000000 	.word	0x20000000
 8005414:	20000004 	.word	0x20000004

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b08b      	sub	sp, #44	; 0x2c
 800541c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d002      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x30>
 8005442:	2b08      	cmp	r3, #8
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x36>
 8005446:	e03c      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005448:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800544a:	623b      	str	r3, [r7, #32]
      break;
 800544c:	e03c      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005454:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005458:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	fa92 f2a2 	rbit	r2, r2
 8005460:	607a      	str	r2, [r7, #4]
  return result;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	fab2 f282 	clz	r2, r2
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	40d3      	lsrs	r3, r2
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005472:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	220f      	movs	r2, #15
 800547c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	fa92 f2a2 	rbit	r2, r2
 8005484:	60fa      	str	r2, [r7, #12]
  return result;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	fab2 f282 	clz	r2, r2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	40d3      	lsrs	r3, r2
 8005490:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e004      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	623b      	str	r3, [r7, #32]
      break;
 80054c0:	e002      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80054c4:	623b      	str	r3, [r7, #32]
      break;
 80054c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c8:	6a3b      	ldr	r3, [r7, #32]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	372c      	adds	r7, #44	; 0x2c
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	007a1200 	.word	0x007a1200
 80054e0:	08007ed4 	.word	0x08007ed4
 80054e4:	08007ee4 	.word	0x08007ee4
 80054e8:	003d0900 	.word	0x003d0900

080054ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000000 	.word	0x20000000

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800550a:	f7ff ffef 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 800550e:	4601      	mov	r1, r0
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005518:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800551c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	fa92 f2a2 	rbit	r2, r2
 8005524:	603a      	str	r2, [r7, #0]
  return result;
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	fab2 f282 	clz	r2, r2
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	40d3      	lsrs	r3, r2
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005532:	5cd3      	ldrb	r3, [r2, r3]
 8005534:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	08007ecc 	.word	0x08007ecc

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800554e:	f7ff ffcd 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005552:	4601      	mov	r1, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800555c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	fa92 f2a2 	rbit	r2, r2
 8005568:	603a      	str	r2, [r7, #0]
  return result;
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	40d3      	lsrs	r3, r2
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005576:	5cd3      	ldrb	r3, [r2, r3]
 8005578:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08007ecc 	.word	0x08007ecc

0800558c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b092      	sub	sp, #72	; 0x48
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80d4 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b0:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10e      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055bc:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	4a4a      	ldr	r2, [pc, #296]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	61d3      	str	r3, [r2, #28]
 80055c8:	4b48      	ldr	r3, [pc, #288]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e6:	4b42      	ldr	r3, [pc, #264]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a41      	ldr	r2, [pc, #260]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f2:	f7fc fa09 	bl	8001a08 <HAL_GetTick>
 80055f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	e008      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fc fa05 	bl	8001a08 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b64      	cmp	r3, #100	; 0x64
 8005606:	d901      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e169      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8084 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005634:	429a      	cmp	r2, r3
 8005636:	d07c      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005638:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	461a      	mov	r2, r3
 8005662:	2301      	movs	r3, #1
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	461a      	mov	r2, r3
 8005686:	2300      	movs	r3, #0
 8005688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04b      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fc f9b5 	bl	8001a08 <HAL_GetTick>
 800569e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fc f9b1 	bl	8001a08 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e113      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80056b8:	2302      	movs	r3, #2
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	2302      	movs	r3, #2
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	61fb      	str	r3, [r7, #28]
  return result;
 80056d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d108      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056e6:	4b01      	ldr	r3, [pc, #4]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	e00d      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40007000 	.word	0x40007000
 80056f4:	10908100 	.word	0x10908100
 80056f8:	2302      	movs	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	4b78      	ldr	r3, [pc, #480]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2202      	movs	r2, #2
 800570a:	613a      	str	r2, [r7, #16]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	fa92 f2a2 	rbit	r2, r2
 8005712:	60fa      	str	r2, [r7, #12]
  return result;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	fab2 f282 	clz	r2, r2
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0b7      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005732:	4b6d      	ldr	r3, [pc, #436]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	496a      	ldr	r1, [pc, #424]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574c:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005764:	4b60      	ldr	r3, [pc, #384]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f023 0203 	bic.w	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	495d      	ldr	r1, [pc, #372]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005782:	4b59      	ldr	r3, [pc, #356]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	4956      	ldr	r1, [pc, #344]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057a0:	4b51      	ldr	r3, [pc, #324]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	494e      	ldr	r1, [pc, #312]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4947      	ldr	r1, [pc, #284]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057dc:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	493f      	ldr	r1, [pc, #252]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f023 0220 	bic.w	r2, r3, #32
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	4938      	ldr	r1, [pc, #224]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4930      	ldr	r1, [pc, #192]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005836:	4b2c      	ldr	r3, [pc, #176]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	4929      	ldr	r1, [pc, #164]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	4921      	ldr	r1, [pc, #132]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	491a      	ldr	r1, [pc, #104]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005890:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	4912      	ldr	r1, [pc, #72]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058ae:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	490b      	ldr	r1, [pc, #44]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	4903      	ldr	r1, [pc, #12]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3748      	adds	r7, #72	; 0x48
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021000 	.word	0x40021000

080058ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e09d      	b.n	8005a3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590e:	d009      	beq.n	8005924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	61da      	str	r2, [r3, #28]
 8005916:	e005      	b.n	8005924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fc5e 	bl	8001200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005964:	d902      	bls.n	800596c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e002      	b.n	8005972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800596c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800597a:	d007      	beq.n	800598c <HAL_SPI_Init+0xa0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005984:	d002      	beq.n	800598c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	ea42 0103 	orr.w	r1, r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 0204 	and.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a08:	ea42 0103 	orr.w	r1, r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e049      	b.n	8005ae8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fb fdc9 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 fefd 	bl	8006880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e049      	b.n	8005b96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb fdbe 	bl	8001698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 fea6 	bl	8006880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x24>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e03c      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d109      	bne.n	8005bde <HAL_TIM_PWM_Start+0x3e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e02f      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d109      	bne.n	8005bf8 <HAL_TIM_PWM_Start+0x58>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	e022      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d109      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x72>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	bf14      	ite	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	2300      	moveq	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e015      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d109      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x8c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e008      	b.n	8005c3e <HAL_TIM_PWM_Start+0x9e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e097      	b.n	8005d76 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xb6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	e023      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xc6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c64:	e01b      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xd6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	e013      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xe6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c84:	e00b      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0xf6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c94:	e003      	b.n	8005c9e <HAL_TIM_PWM_Start+0xfe>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fb08 	bl	80072bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a33      	ldr	r2, [pc, #204]	; (8005d80 <HAL_TIM_PWM_Start+0x1e0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a32      	ldr	r2, [pc, #200]	; (8005d84 <HAL_TIM_PWM_Start+0x1e4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a30      	ldr	r2, [pc, #192]	; (8005d88 <HAL_TIM_PWM_Start+0x1e8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <HAL_TIM_PWM_Start+0x1ec>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_PWM_Start+0x13e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <HAL_TIM_PWM_Start+0x1f0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0x142>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_TIM_PWM_Start+0x144>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <HAL_TIM_PWM_Start+0x1e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d013      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <HAL_TIM_PWM_Start+0x1f4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <HAL_TIM_PWM_Start+0x1f8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_TIM_PWM_Start+0x1e4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIM_PWM_Start+0x194>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <HAL_TIM_PWM_Start+0x1e8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d115      	bne.n	8005d60 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <HAL_TIM_PWM_Start+0x1fc>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d015      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d011      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	e008      	b.n	8005d72 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e049      	b.n	8005e46 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f841 	bl	8005e4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 fd4e 	bl	8006880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_IC_Start_IT+0x1e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	e023      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x66>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_IC_Start_IT+0x2e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e01b      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x66>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_IC_Start_IT+0x3e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	e013      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x66>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_IC_Start_IT+0x4e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	e00b      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x66>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_IC_Start_IT+0x5e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	e003      	b.n	8005eca <HAL_TIM_IC_Start_IT+0x66>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_TIM_IC_Start_IT+0x78>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e013      	b.n	8005f04 <HAL_TIM_IC_Start_IT+0xa0>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d104      	bne.n	8005eec <HAL_TIM_IC_Start_IT+0x88>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e00b      	b.n	8005f04 <HAL_TIM_IC_Start_IT+0xa0>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d104      	bne.n	8005efc <HAL_TIM_IC_Start_IT+0x98>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	e003      	b.n	8005f04 <HAL_TIM_IC_Start_IT+0xa0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d102      	bne.n	8005f12 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f0c:	7b7b      	ldrb	r3, [r7, #13]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d001      	beq.n	8005f16 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0d8      	b.n	80060c8 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_IC_Start_IT+0xc2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f24:	e023      	b.n	8005f6e <HAL_TIM_IC_Start_IT+0x10a>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIM_IC_Start_IT+0xd2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f34:	e01b      	b.n	8005f6e <HAL_TIM_IC_Start_IT+0x10a>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d104      	bne.n	8005f46 <HAL_TIM_IC_Start_IT+0xe2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f44:	e013      	b.n	8005f6e <HAL_TIM_IC_Start_IT+0x10a>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b0c      	cmp	r3, #12
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIM_IC_Start_IT+0xf2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f54:	e00b      	b.n	8005f6e <HAL_TIM_IC_Start_IT+0x10a>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d104      	bne.n	8005f66 <HAL_TIM_IC_Start_IT+0x102>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f64:	e003      	b.n	8005f6e <HAL_TIM_IC_Start_IT+0x10a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_IC_Start_IT+0x11a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	e013      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x142>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_IC_Start_IT+0x12a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f8c:	e00b      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x142>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_IC_Start_IT+0x13a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f9c:	e003      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x142>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d841      	bhi.n	8006030 <HAL_TIM_IC_Start_IT+0x1cc>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <HAL_TIM_IC_Start_IT+0x150>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	08006031 	.word	0x08006031
 8005fbc:	08006031 	.word	0x08006031
 8005fc0:	08006031 	.word	0x08006031
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08006031 	.word	0x08006031
 8005fd0:	08006031 	.word	0x08006031
 8005fd4:	0800600d 	.word	0x0800600d
 8005fd8:	08006031 	.word	0x08006031
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08006031 	.word	0x08006031
 8005fe4:	0800601f 	.word	0x0800601f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0202 	orr.w	r2, r2, #2
 8005ff6:	60da      	str	r2, [r3, #12]
      break;
 8005ff8:	e01d      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0204 	orr.w	r2, r2, #4
 8006008:	60da      	str	r2, [r3, #12]
      break;
 800600a:	e014      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0208 	orr.w	r2, r2, #8
 800601a:	60da      	str	r2, [r3, #12]
      break;
 800601c:	e00b      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0210 	orr.w	r2, r2, #16
 800602c:	60da      	str	r2, [r3, #12]
      break;
 800602e:	e002      	b.n	8006036 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
      break;
 8006034:	bf00      	nop
  }

  if (status == HAL_OK)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d144      	bne.n	80060c6 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f939 	bl	80072bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <HAL_TIM_IC_Start_IT+0x26c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x222>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d013      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x222>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_TIM_IC_Start_IT+0x270>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x222>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <HAL_TIM_IC_Start_IT+0x274>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x222>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_TIM_IC_Start_IT+0x278>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x222>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_TIM_IC_Start_IT+0x27c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d115      	bne.n	80060b2 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <HAL_TIM_IC_Start_IT+0x280>)
 800608e:	4013      	ands	r3, r2
 8006090:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d015      	beq.n	80060c4 <HAL_TIM_IC_Start_IT+0x260>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609e:	d011      	beq.n	80060c4 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	e008      	b.n	80060c4 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e000      	b.n	80060c6 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	00010007 	.word	0x00010007

080060e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d122      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d11b      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0202 	mvn.w	r2, #2
 8006114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fb89 	bl	8006842 <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb7b 	bl	800682e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fb8c 	bl	8006856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b04      	cmp	r3, #4
 8006150:	d122      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	d11b      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0204 	mvn.w	r2, #4
 8006168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fb5f 	bl	8006842 <HAL_TIM_IC_CaptureCallback>
 8006184:	e005      	b.n	8006192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fb51 	bl	800682e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb62 	bl	8006856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d122      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d11b      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0208 	mvn.w	r2, #8
 80061bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fb35 	bl	8006842 <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb27 	bl	800682e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fb38 	bl	8006856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0210 	mvn.w	r2, #16
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2208      	movs	r2, #8
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb0b 	bl	8006842 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fafd 	bl	800682e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fb0e 	bl	8006856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10e      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fad7 	bl	800681a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f8c2 	bl	800741c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d10e      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 f8b5 	bl	8007430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d10e      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fabc 	bl	800686a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d10e      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d107      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0220 	mvn.w	r2, #32
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 f875 	bl	8007408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006340:	2302      	movs	r3, #2
 8006342:	e088      	b.n	8006456 <HAL_TIM_IC_ConfigChannel+0x130>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11b      	bne.n	800638a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f000 fdf3 	bl	8006f4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 020c 	bic.w	r2, r2, #12
 8006374:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6999      	ldr	r1, [r3, #24]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	619a      	str	r2, [r3, #24]
 8006388:	e060      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d11c      	bne.n	80063ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f000 fe6b 	bl	800707a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6999      	ldr	r1, [r3, #24]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	619a      	str	r2, [r3, #24]
 80063c8:	e040      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6819      	ldr	r1, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f000 feb8 	bl	8007154 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 020c 	bic.w	r2, r2, #12
 80063f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69d9      	ldr	r1, [r3, #28]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	61da      	str	r2, [r3, #28]
 8006406:	e021      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d11c      	bne.n	8006448 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6819      	ldr	r1, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f000 fed5 	bl	80071cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006430:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	61da      	str	r2, [r3, #28]
 8006446:	e001      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e0ff      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b14      	cmp	r3, #20
 800648a:	f200 80f0 	bhi.w	800666e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064e9 	.word	0x080064e9
 8006498:	0800666f 	.word	0x0800666f
 800649c:	0800666f 	.word	0x0800666f
 80064a0:	0800666f 	.word	0x0800666f
 80064a4:	08006529 	.word	0x08006529
 80064a8:	0800666f 	.word	0x0800666f
 80064ac:	0800666f 	.word	0x0800666f
 80064b0:	0800666f 	.word	0x0800666f
 80064b4:	0800656b 	.word	0x0800656b
 80064b8:	0800666f 	.word	0x0800666f
 80064bc:	0800666f 	.word	0x0800666f
 80064c0:	0800666f 	.word	0x0800666f
 80064c4:	080065ab 	.word	0x080065ab
 80064c8:	0800666f 	.word	0x0800666f
 80064cc:	0800666f 	.word	0x0800666f
 80064d0:	0800666f 	.word	0x0800666f
 80064d4:	080065ed 	.word	0x080065ed
 80064d8:	0800666f 	.word	0x0800666f
 80064dc:	0800666f 	.word	0x0800666f
 80064e0:	0800666f 	.word	0x0800666f
 80064e4:	0800662d 	.word	0x0800662d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fa56 	bl	80069a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0208 	orr.w	r2, r2, #8
 8006502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0204 	bic.w	r2, r2, #4
 8006512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6999      	ldr	r1, [r3, #24]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	619a      	str	r2, [r3, #24]
      break;
 8006526:	e0a5      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fac6 	bl	8006ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6999      	ldr	r1, [r3, #24]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	021a      	lsls	r2, r3, #8
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	619a      	str	r2, [r3, #24]
      break;
 8006568:	e084      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fb2f 	bl	8006bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0208 	orr.w	r2, r2, #8
 8006584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0204 	bic.w	r2, r2, #4
 8006594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69d9      	ldr	r1, [r3, #28]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	61da      	str	r2, [r3, #28]
      break;
 80065a8:	e064      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fb97 	bl	8006ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69d9      	ldr	r1, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	021a      	lsls	r2, r3, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	61da      	str	r2, [r3, #28]
      break;
 80065ea:	e043      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fbe0 	bl	8006db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0208 	orr.w	r2, r2, #8
 8006606:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0204 	bic.w	r2, r2, #4
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800662a:	e023      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fc24 	bl	8006e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	021a      	lsls	r2, r3, #8
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800666c:	e002      	b.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
      break;
 8006672:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop

08006688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_TIM_ConfigClockSource+0x1c>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e0b6      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x18a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e0:	d03e      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0xd8>
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	f200 8087 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	f000 8086 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x176>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d87f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d01a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0xaa>
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d87b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d050      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x11e>
 8006704:	2b60      	cmp	r3, #96	; 0x60
 8006706:	d877      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d03c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xfe>
 800670c:	2b50      	cmp	r3, #80	; 0x50
 800670e:	d873      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d058      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x13e>
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d86f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d064      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15e>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d86b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d060      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d867      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15e>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d05a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15e>
 8006730:	e062      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f000 fd9b 	bl	800727c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04f      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f000 fd84 	bl	800727c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e03c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fc42 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	; 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fd51 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 80067a4:	e02c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fc9e 	bl	80070f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	; 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd41 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 80067c4:	e01c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fc22 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fd31 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fd28 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a3c      	ldr	r2, [pc, #240]	; (8006984 <TIM_Base_SetConfig+0x104>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a39      	ldr	r2, [pc, #228]	; (8006988 <TIM_Base_SetConfig+0x108>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x38>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a38      	ldr	r2, [pc, #224]	; (800698c <TIM_Base_SetConfig+0x10c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x38>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <TIM_Base_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <TIM_Base_SetConfig+0x104>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01b      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d017      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <TIM_Base_SetConfig+0x108>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a29      	ldr	r2, [pc, #164]	; (800698c <TIM_Base_SetConfig+0x10c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <TIM_Base_SetConfig+0x110>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a27      	ldr	r2, [pc, #156]	; (8006994 <TIM_Base_SetConfig+0x114>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a26      	ldr	r2, [pc, #152]	; (8006998 <TIM_Base_SetConfig+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_Base_SetConfig+0x8a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a25      	ldr	r2, [pc, #148]	; (800699c <TIM_Base_SetConfig+0x11c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a10      	ldr	r2, [pc, #64]	; (8006984 <TIM_Base_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00f      	beq.n	8006968 <TIM_Base_SetConfig+0xe8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <TIM_Base_SetConfig+0x110>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00b      	beq.n	8006968 <TIM_Base_SetConfig+0xe8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a10      	ldr	r2, [pc, #64]	; (8006994 <TIM_Base_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <TIM_Base_SetConfig+0xe8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a0f      	ldr	r2, [pc, #60]	; (8006998 <TIM_Base_SetConfig+0x118>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_Base_SetConfig+0xe8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a0e      	ldr	r2, [pc, #56]	; (800699c <TIM_Base_SetConfig+0x11c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d103      	bne.n	8006970 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	615a      	str	r2, [r3, #20]
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0201 	bic.w	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 0302 	bic.w	r3, r3, #2
 80069ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <TIM_OC1_SetConfig+0x10c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00f      	beq.n	8006a20 <TIM_OC1_SetConfig+0x80>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a2b      	ldr	r2, [pc, #172]	; (8006ab0 <TIM_OC1_SetConfig+0x110>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00b      	beq.n	8006a20 <TIM_OC1_SetConfig+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <TIM_OC1_SetConfig+0x114>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d007      	beq.n	8006a20 <TIM_OC1_SetConfig+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <TIM_OC1_SetConfig+0x118>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_OC1_SetConfig+0x80>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a28      	ldr	r2, [pc, #160]	; (8006abc <TIM_OC1_SetConfig+0x11c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10c      	bne.n	8006a3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0308 	bic.w	r3, r3, #8
 8006a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <TIM_OC1_SetConfig+0x10c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00f      	beq.n	8006a62 <TIM_OC1_SetConfig+0xc2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <TIM_OC1_SetConfig+0x110>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00b      	beq.n	8006a62 <TIM_OC1_SetConfig+0xc2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <TIM_OC1_SetConfig+0x114>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d007      	beq.n	8006a62 <TIM_OC1_SetConfig+0xc2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <TIM_OC1_SetConfig+0x118>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC1_SetConfig+0xc2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a17      	ldr	r2, [pc, #92]	; (8006abc <TIM_OC1_SetConfig+0x11c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f023 0210 	bic.w	r2, r3, #16
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0320 	bic.w	r3, r3, #32
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a28      	ldr	r2, [pc, #160]	; (8006bc0 <TIM_OC2_SetConfig+0x100>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC2_SetConfig+0x6c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a27      	ldr	r2, [pc, #156]	; (8006bc4 <TIM_OC2_SetConfig+0x104>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d10d      	bne.n	8006b48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <TIM_OC2_SetConfig+0x100>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00f      	beq.n	8006b70 <TIM_OC2_SetConfig+0xb0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <TIM_OC2_SetConfig+0x104>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <TIM_OC2_SetConfig+0xb0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <TIM_OC2_SetConfig+0x108>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_OC2_SetConfig+0xb0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <TIM_OC2_SetConfig+0x10c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_OC2_SetConfig+0xb0>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <TIM_OC2_SetConfig+0x110>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d113      	bne.n	8006b98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40014400 	.word	0x40014400
 8006bd0:	40014800 	.word	0x40014800

08006bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <TIM_OC3_SetConfig+0xfc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x6a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <TIM_OC3_SetConfig+0x100>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10d      	bne.n	8006c5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c58:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <TIM_OC3_SetConfig+0xfc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00f      	beq.n	8006c82 <TIM_OC3_SetConfig+0xae>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <TIM_OC3_SetConfig+0x100>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00b      	beq.n	8006c82 <TIM_OC3_SetConfig+0xae>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <TIM_OC3_SetConfig+0x104>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d007      	beq.n	8006c82 <TIM_OC3_SetConfig+0xae>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <TIM_OC3_SetConfig+0x108>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_OC3_SetConfig+0xae>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <TIM_OC3_SetConfig+0x10c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d113      	bne.n	8006caa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	621a      	str	r2, [r3, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40013400 	.word	0x40013400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800

08006ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	031b      	lsls	r3, r3, #12
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <TIM_OC4_SetConfig+0xc0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00f      	beq.n	8006d68 <TIM_OC4_SetConfig+0x84>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <TIM_OC4_SetConfig+0xc4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_OC4_SetConfig+0x84>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a16      	ldr	r2, [pc, #88]	; (8006dac <TIM_OC4_SetConfig+0xc8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <TIM_OC4_SetConfig+0x84>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <TIM_OC4_SetConfig+0xcc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC4_SetConfig+0x84>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <TIM_OC4_SetConfig+0xd0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d109      	bne.n	8006d7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800

08006db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <TIM_OC5_SetConfig+0xb4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_OC5_SetConfig+0x7a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <TIM_OC5_SetConfig+0xb8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_OC5_SetConfig+0x7a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <TIM_OC5_SetConfig+0xbc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_OC5_SetConfig+0x7a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <TIM_OC5_SetConfig+0xc0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_OC5_SetConfig+0x7a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <TIM_OC5_SetConfig+0xc4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d109      	bne.n	8006e46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	621a      	str	r2, [r3, #32]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800

08006e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	051b      	lsls	r3, r3, #20
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <TIM_OC6_SetConfig+0xb8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00f      	beq.n	8006efc <TIM_OC6_SetConfig+0x7c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <TIM_OC6_SetConfig+0xbc>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00b      	beq.n	8006efc <TIM_OC6_SetConfig+0x7c>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <TIM_OC6_SetConfig+0xc0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d007      	beq.n	8006efc <TIM_OC6_SetConfig+0x7c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <TIM_OC6_SetConfig+0xc4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_OC6_SetConfig+0x7c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <TIM_OC6_SetConfig+0xc8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d109      	bne.n	8006f10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a24      	ldr	r2, [pc, #144]	; (8007008 <TIM_TI1_SetConfig+0xbc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x56>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f80:	d00f      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x56>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4a21      	ldr	r2, [pc, #132]	; (800700c <TIM_TI1_SetConfig+0xc0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x56>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a20      	ldr	r2, [pc, #128]	; (8007010 <TIM_TI1_SetConfig+0xc4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x56>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <TIM_TI1_SetConfig+0xc8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x56>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <TIM_TI1_SetConfig+0xcc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <TIM_TI1_SetConfig+0x5a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <TIM_TI1_SetConfig+0x5c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e003      	b.n	8006fc6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 030a 	and.w	r3, r3, #10
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40013400 	.word	0x40013400
 8007018:	40014000 	.word	0x40014000

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f023 0210 	bic.w	r2, r3, #16
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	b29b      	uxth	r3, r3
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	f023 0210 	bic.w	r2, r3, #16
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800711e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0303 	bic.w	r3, r3, #3
 8007180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	b2db      	uxtb	r3, r3
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800720a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	031b      	lsls	r3, r3, #12
 8007210:	b29b      	uxth	r3, r3
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800721e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	031b      	lsls	r3, r3, #12
 8007224:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	f043 0307 	orr.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	431a      	orrs	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e063      	b.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2b      	ldr	r2, [pc, #172]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d108      	bne.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800735a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d018      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d013      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a18      	ldr	r2, [pc, #96]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00e      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a17      	ldr	r2, [pc, #92]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a12      	ldr	r2, [pc, #72]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a13      	ldr	r2, [pc, #76]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10c      	bne.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40013400 	.word	0x40013400
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40014000 	.word	0x40014000

08007408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e040      	b.n	80074d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fa f9a0 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2224      	movs	r2, #36	; 0x24
 8007470:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0201 	bic.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8b6 	bl	80075f4 <UART_SetConfig>
 8007488:	4603      	mov	r3, r0
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e022      	b.n	80074d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa7e 	bl	800799c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fb05 	bl	8007ae0 <UART_CheckIdleState>
 80074d6:	4603      	mov	r3, r0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	d178      	bne.n	80075ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_UART_Transmit+0x24>
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e071      	b.n	80075ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2221      	movs	r2, #33	; 0x21
 8007514:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007516:	f7fa fa77 	bl	8001a08 <HAL_GetTick>
 800751a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007534:	d108      	bne.n	8007548 <HAL_UART_Transmit+0x68>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e003      	b.n	8007550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007550:	e030      	b.n	80075b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2200      	movs	r2, #0
 800755a:	2180      	movs	r1, #128	; 0x80
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fb67 	bl	8007c30 <UART_WaitOnFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e03c      	b.n	80075ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	881a      	ldrh	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007584:	b292      	uxth	r2, r2
 8007586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	3302      	adds	r3, #2
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e008      	b.n	80075a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b292      	uxth	r2, r2
 800759a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	3301      	adds	r3, #1
 80075a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1c8      	bne.n	8007552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	2140      	movs	r1, #64	; 0x40
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fb30 	bl	8007c30 <UART_WaitOnFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e005      	b.n	80075ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80075ea:	2302      	movs	r3, #2
  }
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007622:	f023 030c 	bic.w	r3, r3, #12
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	6979      	ldr	r1, [r7, #20]
 800762c:	430b      	orrs	r3, r1
 800762e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4aa7      	ldr	r2, [pc, #668]	; (800790c <UART_SetConfig+0x318>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d120      	bne.n	80076b6 <UART_SetConfig+0xc2>
 8007674:	4ba6      	ldr	r3, [pc, #664]	; (8007910 <UART_SetConfig+0x31c>)
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d817      	bhi.n	80076b0 <UART_SetConfig+0xbc>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0x94>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	08007699 	.word	0x08007699
 800768c:	080076a5 	.word	0x080076a5
 8007690:	080076ab 	.word	0x080076ab
 8007694:	0800769f 	.word	0x0800769f
 8007698:	2301      	movs	r3, #1
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e0b5      	b.n	800780a <UART_SetConfig+0x216>
 800769e:	2302      	movs	r3, #2
 80076a0:	77fb      	strb	r3, [r7, #31]
 80076a2:	e0b2      	b.n	800780a <UART_SetConfig+0x216>
 80076a4:	2304      	movs	r3, #4
 80076a6:	77fb      	strb	r3, [r7, #31]
 80076a8:	e0af      	b.n	800780a <UART_SetConfig+0x216>
 80076aa:	2308      	movs	r3, #8
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e0ac      	b.n	800780a <UART_SetConfig+0x216>
 80076b0:	2310      	movs	r3, #16
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e0a9      	b.n	800780a <UART_SetConfig+0x216>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a96      	ldr	r2, [pc, #600]	; (8007914 <UART_SetConfig+0x320>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d124      	bne.n	800770a <UART_SetConfig+0x116>
 80076c0:	4b93      	ldr	r3, [pc, #588]	; (8007910 <UART_SetConfig+0x31c>)
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076cc:	d011      	beq.n	80076f2 <UART_SetConfig+0xfe>
 80076ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d2:	d817      	bhi.n	8007704 <UART_SetConfig+0x110>
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d8:	d011      	beq.n	80076fe <UART_SetConfig+0x10a>
 80076da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076de:	d811      	bhi.n	8007704 <UART_SetConfig+0x110>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <UART_SetConfig+0xf8>
 80076e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e8:	d006      	beq.n	80076f8 <UART_SetConfig+0x104>
 80076ea:	e00b      	b.n	8007704 <UART_SetConfig+0x110>
 80076ec:	2300      	movs	r3, #0
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e08b      	b.n	800780a <UART_SetConfig+0x216>
 80076f2:	2302      	movs	r3, #2
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e088      	b.n	800780a <UART_SetConfig+0x216>
 80076f8:	2304      	movs	r3, #4
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e085      	b.n	800780a <UART_SetConfig+0x216>
 80076fe:	2308      	movs	r3, #8
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e082      	b.n	800780a <UART_SetConfig+0x216>
 8007704:	2310      	movs	r3, #16
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e07f      	b.n	800780a <UART_SetConfig+0x216>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a82      	ldr	r2, [pc, #520]	; (8007918 <UART_SetConfig+0x324>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d124      	bne.n	800775e <UART_SetConfig+0x16a>
 8007714:	4b7e      	ldr	r3, [pc, #504]	; (8007910 <UART_SetConfig+0x31c>)
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800771c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007720:	d011      	beq.n	8007746 <UART_SetConfig+0x152>
 8007722:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007726:	d817      	bhi.n	8007758 <UART_SetConfig+0x164>
 8007728:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800772c:	d011      	beq.n	8007752 <UART_SetConfig+0x15e>
 800772e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007732:	d811      	bhi.n	8007758 <UART_SetConfig+0x164>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <UART_SetConfig+0x14c>
 8007738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800773c:	d006      	beq.n	800774c <UART_SetConfig+0x158>
 800773e:	e00b      	b.n	8007758 <UART_SetConfig+0x164>
 8007740:	2300      	movs	r3, #0
 8007742:	77fb      	strb	r3, [r7, #31]
 8007744:	e061      	b.n	800780a <UART_SetConfig+0x216>
 8007746:	2302      	movs	r3, #2
 8007748:	77fb      	strb	r3, [r7, #31]
 800774a:	e05e      	b.n	800780a <UART_SetConfig+0x216>
 800774c:	2304      	movs	r3, #4
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e05b      	b.n	800780a <UART_SetConfig+0x216>
 8007752:	2308      	movs	r3, #8
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e058      	b.n	800780a <UART_SetConfig+0x216>
 8007758:	2310      	movs	r3, #16
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e055      	b.n	800780a <UART_SetConfig+0x216>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a6e      	ldr	r2, [pc, #440]	; (800791c <UART_SetConfig+0x328>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d124      	bne.n	80077b2 <UART_SetConfig+0x1be>
 8007768:	4b69      	ldr	r3, [pc, #420]	; (8007910 <UART_SetConfig+0x31c>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007770:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007774:	d011      	beq.n	800779a <UART_SetConfig+0x1a6>
 8007776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800777a:	d817      	bhi.n	80077ac <UART_SetConfig+0x1b8>
 800777c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007780:	d011      	beq.n	80077a6 <UART_SetConfig+0x1b2>
 8007782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007786:	d811      	bhi.n	80077ac <UART_SetConfig+0x1b8>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <UART_SetConfig+0x1a0>
 800778c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007790:	d006      	beq.n	80077a0 <UART_SetConfig+0x1ac>
 8007792:	e00b      	b.n	80077ac <UART_SetConfig+0x1b8>
 8007794:	2300      	movs	r3, #0
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e037      	b.n	800780a <UART_SetConfig+0x216>
 800779a:	2302      	movs	r3, #2
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e034      	b.n	800780a <UART_SetConfig+0x216>
 80077a0:	2304      	movs	r3, #4
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e031      	b.n	800780a <UART_SetConfig+0x216>
 80077a6:	2308      	movs	r3, #8
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e02e      	b.n	800780a <UART_SetConfig+0x216>
 80077ac:	2310      	movs	r3, #16
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e02b      	b.n	800780a <UART_SetConfig+0x216>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a5a      	ldr	r2, [pc, #360]	; (8007920 <UART_SetConfig+0x32c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d124      	bne.n	8007806 <UART_SetConfig+0x212>
 80077bc:	4b54      	ldr	r3, [pc, #336]	; (8007910 <UART_SetConfig+0x31c>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80077c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077c8:	d011      	beq.n	80077ee <UART_SetConfig+0x1fa>
 80077ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077ce:	d817      	bhi.n	8007800 <UART_SetConfig+0x20c>
 80077d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077d4:	d011      	beq.n	80077fa <UART_SetConfig+0x206>
 80077d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077da:	d811      	bhi.n	8007800 <UART_SetConfig+0x20c>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <UART_SetConfig+0x1f4>
 80077e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077e4:	d006      	beq.n	80077f4 <UART_SetConfig+0x200>
 80077e6:	e00b      	b.n	8007800 <UART_SetConfig+0x20c>
 80077e8:	2300      	movs	r3, #0
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e00d      	b.n	800780a <UART_SetConfig+0x216>
 80077ee:	2302      	movs	r3, #2
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e00a      	b.n	800780a <UART_SetConfig+0x216>
 80077f4:	2304      	movs	r3, #4
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e007      	b.n	800780a <UART_SetConfig+0x216>
 80077fa:	2308      	movs	r3, #8
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e004      	b.n	800780a <UART_SetConfig+0x216>
 8007800:	2310      	movs	r3, #16
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e001      	b.n	800780a <UART_SetConfig+0x216>
 8007806:	2310      	movs	r3, #16
 8007808:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007812:	d15b      	bne.n	80078cc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007814:	7ffb      	ldrb	r3, [r7, #31]
 8007816:	2b08      	cmp	r3, #8
 8007818:	d827      	bhi.n	800786a <UART_SetConfig+0x276>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x22c>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007845 	.word	0x08007845
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007855 	.word	0x08007855
 800782c:	0800786b 	.word	0x0800786b
 8007830:	0800785b 	.word	0x0800785b
 8007834:	0800786b 	.word	0x0800786b
 8007838:	0800786b 	.word	0x0800786b
 800783c:	0800786b 	.word	0x0800786b
 8007840:	08007863 	.word	0x08007863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007844:	f7fd fe5e 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007848:	61b8      	str	r0, [r7, #24]
        break;
 800784a:	e013      	b.n	8007874 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784c:	f7fd fe7c 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007850:	61b8      	str	r0, [r7, #24]
        break;
 8007852:	e00f      	b.n	8007874 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007854:	4b33      	ldr	r3, [pc, #204]	; (8007924 <UART_SetConfig+0x330>)
 8007856:	61bb      	str	r3, [r7, #24]
        break;
 8007858:	e00c      	b.n	8007874 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785a:	f7fd fddd 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800785e:	61b8      	str	r0, [r7, #24]
        break;
 8007860:	e008      	b.n	8007874 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007866:	61bb      	str	r3, [r7, #24]
        break;
 8007868:	e004      	b.n	8007874 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	77bb      	strb	r3, [r7, #30]
        break;
 8007872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8082 	beq.w	8007980 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	005a      	lsls	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	441a      	add	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b0f      	cmp	r3, #15
 8007896:	d916      	bls.n	80078c6 <UART_SetConfig+0x2d2>
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789e:	d212      	bcs.n	80078c6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f023 030f 	bic.w	r3, r3, #15
 80078a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	085b      	lsrs	r3, r3, #1
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	89fa      	ldrh	r2, [r7, #14]
 80078c2:	60da      	str	r2, [r3, #12]
 80078c4:	e05c      	b.n	8007980 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	77bb      	strb	r3, [r7, #30]
 80078ca:	e059      	b.n	8007980 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d835      	bhi.n	800793e <UART_SetConfig+0x34a>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x2e4>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	08007929 	.word	0x08007929
 80078e4:	0800793f 	.word	0x0800793f
 80078e8:	0800792f 	.word	0x0800792f
 80078ec:	0800793f 	.word	0x0800793f
 80078f0:	0800793f 	.word	0x0800793f
 80078f4:	0800793f 	.word	0x0800793f
 80078f8:	08007937 	.word	0x08007937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fd fe02 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007900:	61b8      	str	r0, [r7, #24]
        break;
 8007902:	e021      	b.n	8007948 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007904:	f7fd fe20 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007908:	61b8      	str	r0, [r7, #24]
        break;
 800790a:	e01d      	b.n	8007948 <UART_SetConfig+0x354>
 800790c:	40013800 	.word	0x40013800
 8007910:	40021000 	.word	0x40021000
 8007914:	40004400 	.word	0x40004400
 8007918:	40004800 	.word	0x40004800
 800791c:	40004c00 	.word	0x40004c00
 8007920:	40005000 	.word	0x40005000
 8007924:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007928:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <UART_SetConfig+0x3a4>)
 800792a:	61bb      	str	r3, [r7, #24]
        break;
 800792c:	e00c      	b.n	8007948 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800792e:	f7fd fd73 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 8007932:	61b8      	str	r0, [r7, #24]
        break;
 8007934:	e008      	b.n	8007948 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800793a:	61bb      	str	r3, [r7, #24]
        break;
 800793c:	e004      	b.n	8007948 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	77bb      	strb	r3, [r7, #30]
        break;
 8007946:	bf00      	nop
    }

    if (pclk != 0U)
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	085a      	lsrs	r2, r3, #1
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	441a      	add	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b0f      	cmp	r3, #15
 8007966:	d909      	bls.n	800797c <UART_SetConfig+0x388>
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796e:	d205      	bcs.n	800797c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	e001      	b.n	8007980 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800798c:	7fbb      	ldrb	r3, [r7, #30]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	007a1200 	.word	0x007a1200

0800799c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01a      	beq.n	8007ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9a:	d10a      	bne.n	8007ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b098      	sub	sp, #96	; 0x60
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af0:	f7f9 ff8a 	bl	8001a08 <HAL_GetTick>
 8007af4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d12e      	bne.n	8007b62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f88c 	bl	8007c30 <UART_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d021      	beq.n	8007b62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b32:	653b      	str	r3, [r7, #80]	; 0x50
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e6      	bne.n	8007b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e062      	b.n	8007c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d149      	bne.n	8007c04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f856 	bl	8007c30 <UART_WaitOnFlagUntilTimeout>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d03c      	beq.n	8007c04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	623b      	str	r3, [r7, #32]
   return(result);
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8007baa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bdc:	61fa      	str	r2, [r7, #28]
 8007bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e011      	b.n	8007c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3758      	adds	r7, #88	; 0x58
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c40:	e049      	b.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c48:	d045      	beq.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4a:	f7f9 fedd 	bl	8001a08 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d302      	bcc.n	8007c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e048      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d031      	beq.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d110      	bne.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2208      	movs	r2, #8
 8007c86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f838 	bl	8007cfe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2208      	movs	r2, #8
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e029      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb0:	d111      	bne.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f81e 	bl	8007cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e00f      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	bf0c      	ite	eq
 8007ce6:	2301      	moveq	r3, #1
 8007ce8:	2300      	movne	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d0a6      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b095      	sub	sp, #84	; 0x54
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
 8007d26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e6      	bne.n	8007d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f023 0301 	bic.w	r3, r3, #1
 8007d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3308      	adds	r3, #8
 8007d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e5      	bne.n	8007d38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d118      	bne.n	8007da6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 0310 	bic.w	r3, r3, #16
 8007d88:	647b      	str	r3, [r7, #68]	; 0x44
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007dba:	bf00      	nop
 8007dbc:	3754      	adds	r7, #84	; 0x54
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007dce:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007dd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	43db      	mvns	r3, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4013      	ands	r3, r2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	f107 0014 	add.w	r0, r7, #20
 8007e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	b004      	add	sp, #16
 8007e3c:	4770      	bx	lr
	...

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	; (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	; (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	; (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	; (8007e84 <__libc_init_array+0x44>)
 8007e54:	f000 f820 	bl	8007e98 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08007ef4 	.word	0x08007ef4
 8007e7c:	08007ef4 	.word	0x08007ef4
 8007e80:	08007ef4 	.word	0x08007ef4
 8007e84:	08007ef8 	.word	0x08007ef8

08007e88 <memset>:
 8007e88:	4402      	add	r2, r0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <memset+0xa>
 8007e90:	4770      	bx	lr
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f9      	b.n	8007e8c <memset+0x4>

08007e98 <_init>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_fini>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr
